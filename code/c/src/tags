!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ABS	.\GlobalTypes.h	589;"	d
ACCEPT	.\Utils.c	967;"	d	file:
ADDLINE	.\MapIcon.c	332;"	d	file:
ADDLINE	.\MapIcon.c	451;"	d	file:
ADT2_SECTION	.\Constants.h	81;"	d
ADT3_SECTION	.\Constants.h	82;"	d
ADT_SECTION	.\Constants.h	80;"	d
AIDialBitmap	.\ResourceDefines.h	433;"	d
AIErrThrow	.\AIGauge.c	35;"	d	file:
AIGAUGE_H_INCLUDED	.\AIGauge.h	6;"	d
AIGaugeDeInit	.\AIGauge.c	/^void AIGaugeDeInit(void) {$/;"	f
AIGaugeDraw	.\AIGauge.c	/^void AIGaugeDraw(Coord gaugeX, Coord gaugeY, double roll, double pitch) {$/;"	f
AIGaugeInit	.\AIGauge.c	/^Err AIGaugeInit(Coord *radius){$/;"	f
AIGaugeModuleID	.\Modules.h	19;"	d
AIGaugeUpdate	.\MainForm.c	/^static void AIGaugeUpdate(void) {$/;"	f	file:
AIRadius	.\MainForm.c	/^static Coord AIRadius;$/;"	v	file:
AI_SECTION	.\Constants.h	60;"	d
ALARM_MANAGER_H_INCLUDED	.\AlarmManager.h	7;"	d
ALARM_MANAGER_SECTION	.\Constants.h	78;"	d
ALIGNCENTRE	.\Utils.h	10;"	d
ALIGNLEFT	.\Utils.h	8;"	d
ALIGNRIGHT	.\Utils.h	9;"	d
ALPHAPAD_H_INCLUDED	.\AlphaPadDialog.h	7;"	d
ALT_TO_IDX	.\TerrainType.c	98;"	d	file:
APPNAME	.\Constants.h	14;"	d
APPNAME	.\Constants.h	24;"	d
ASDB_INCLUDED	.\AsDatabase.h	9;"	d
ASDB_SECTION	.\Constants.h	63;"	d
ATZ_POINTS	.\MapIcon.c	55;"	d	file:
ATZ_STEP	.\MapIcon.c	56;"	d	file:
AVCALCS_SECTION	.\Constants.h	69;"	d
AboutBox	.\ResourceDefines.h	389;"	d
AckAlarm	.\AlarmManager.c	/^static Boolean AckAlarm(Int16 alarmID) {$/;"	f	file:
AddAirspace	.\MapManager.c	/^static Boolean AddAirspace(MapType map, UInt32 maxTicks) {$/;"	f	file:
AddIntToRecord	.\AsDatabase.c	/^static void AddIntToRecord(DmOpenRef db, UInt16 recNum, UInt16 val) {$/;"	f	file:
AddProxIcons	.\MapManager.c	/^static Boolean AddProxIcons(MapType map, UInt32 maxTicks) {$/;"	f	file:
AddRouteIcons	.\MapManager.c	/^static Boolean AddRouteIcons(MapType map, UInt32 maxTicks) {$/;"	f	file:
AddTrackLog	.\MapManager.c	/^static Boolean AddTrackLog(MapType map, UInt32 maxTicks) {$/;"	f	file:
AddTrackSegment	.\MapManager.c	/^Boolean AddTrackSegment(MapType map, WinLineType *wl, Coord x1, Coord y1, Coord x2, Coord y2) {$/;"	f
AircraftBitmaps	.\ResourceDefines.h	430;"	d
AirspaceClassType	.\AsDatabase.h	/^typedef UInt16 AirspaceClassType;$/;"	t
AirspaceDBType	.\AsDatabase.c	/^} AirspaceDBType;$/;"	t	typeref:struct:__anon4	file:
AirspaceDatabaseType	.\Constants.h	41;"	d
AirspaceIDType	.\AsDatabase.h	/^typedef UInt16 AirspaceIDType;$/;"	t
AirspaceModuleID	.\Modules.h	21;"	d
AirspaceType	.\AsDatabase.h	/^} AirspaceType;$/;"	t	typeref:struct:__anon8
AlarmGetMaxLevel	.\AlarmManager.c	/^AlarmLevelType AlarmGetMaxLevel(void) {$/;"	f
AlarmGetMostUrgent	.\AlarmManager.c	/^const char *AlarmGetMostUrgent(void) {$/;"	f
AlarmLevelType	.\AlarmManager.h	/^} AlarmLevelType;$/;"	t	typeref:enum:__anon2
AlarmManagerModuleID	.\Modules.h	29;"	d
AlarmPurgeAll	.\AlarmManager.c	/^void AlarmPurgeAll(void) {$/;"	f
AlarmSetCondition	.\AlarmManager.c	/^void AlarmSetCondition(MessageDialogDataType *md, AlarmLevelType level) {$/;"	f
AlarmShow	.\AlarmManager.c	/^Boolean AlarmShow(void) {$/;"	f
AlphaPad0	.\ResourceDefines.h	292;"	d
AlphaPadA	.\ResourceDefines.h	291;"	d
AlphaPadBS	.\ResourceDefines.h	295;"	d
AlphaPadCancel	.\ResourceDefines.h	297;"	d
AlphaPadClear	.\ResourceDefines.h	299;"	d
AlphaPadDash	.\ResourceDefines.h	293;"	d
AlphaPadDialog	.\ResourceDefines.h	290;"	d
AlphaPadDialogHandleEvent	.\AlphaPadDialog.c	/^Boolean AlphaPadDialogHandleEvent(EventPtr event) {$/;"	f
AlphaPadDialogInit	.\AlphaPadDialog.c	/^void AlphaPadDialogInit(char *initialValue) {$/;"	f
AlphaPadDialogModuleID	.\Modules.h	39;"	d
AlphaPadField	.\ResourceDefines.h	298;"	d
AlphaPadGetInput	.\AlphaPadDialog.c	/^char *AlphaPadGetInput(void) {$/;"	f
AlphaPadOK	.\ResourceDefines.h	296;"	d
AlphaPadSpace	.\ResourceDefines.h	294;"	d
AltField	.\ResourceDefines.h	76;"	d
AltReferenceType	.\AsDatabase.h	/^} AltReferenceType;$/;"	t	typeref:enum:__anon5
AlternatePlan	.\FMStrings.c	/^const char *AlternatePlan = "_Load Alternate Plan";$/;"	v
AltitudeCallback	.\MapDialog.c	/^static Boolean AltitudeCallback(UInt16 button, float value) {$/;"	f	file:
AltitudeCallback	.\VNAVDialog.c	/^static Boolean AltitudeCallback(UInt16 button, float value) {$/;"	f	file:
AppColourPrefs	.\Main.c	/^AppColourPrefsType AppColourPrefs;$/;"	v
AppColourPrefsType	.\GlobalTypes.h	/^} AppColourPrefsType;$/;"	t	typeref:struct:__anon40
AppEventLoop	.\Main.c	/^static void AppEventLoop(void)$/;"	f	file:
AppHandleEvent	.\Main.c	/^static Boolean AppHandleEvent(EventPtr event)$/;"	f	file:
AppHandleKeyEvent	.\Main.c	/^static Boolean AppHandleKeyEvent(EventPtr event) {$/;"	f	file:
AppStart	.\Main.c	/^static Err AppStart(void)$/;"	f	file:
AppStop	.\Main.c	/^static void AppStop(void)$/;"	f	file:
AppType	.\CpInterface.c	55;"	d	file:
AppUnitTests	.\Main.c	/^static void AppUnitTests(void)  {$/;"	f	file:
ApplyTransform	.\MapManager.c	/^static Boolean ApplyTransform(Coord xi, Coord yi, Coord *xr, Coord *yr) {$/;"	f	file:
ArcSegmentType	.\AsDatabase.h	/^} ArcSegmentType;$/;"	t	typeref:struct:__anon7
AsCloseDatabase	.\AsDatabase.c	/^void AsCloseDatabase(void) {$/;"	f
AsDecodeAltitude	.\AsDatabase.c	/^void AsDecodeAltitude(char *str, Int32 *altFeet,  UInt16 altUnits, AltReferenceType ref, UInt16 alt) {$/;"	f
AsGetAirspace	.\AsDatabase.c	/^AirspaceType *AsGetAirspace(AirspaceIDType id) {$/;"	f
AsGetDatabaseInfo	.\AsDatabase.c	/^MemPtr AsGetDatabaseInfo(void) {$/;"	f
AsImport	.\AsDatabase.c	/^Boolean AsImport(Int16 dbNumber, void(*cb)(const char *)) {$/;"	f
AsImportDB	.\AsDatabase.c	/^static Boolean AsImportDB(PFFileRef f, const char *dbname, UInt32 dbType, void (*cb)(const char *)) {$/;"	f	file:
AsImportFMAData	.\AsDatabase.c	/^void AsImportFMAData(ExgSocketType *es) {$/;"	f
AsImportFailedAlert	.\ResourceDefines.h	413;"	d
AsOpenDatabase	.\AsDatabase.c	/^Boolean AsOpenDatabase(void) {$/;"	f
AsSearchDB	.\AsDatabase.c	/^static Int16 AsSearchDB(AirspaceDBType *db, Int16 lat1, Int16 lon1, Int16 lat3, Int16 lon3,$/;"	f	file:
AsSearchDatabase	.\AsDatabase.c	/^Int16 AsSearchDatabase(Int16 lat1, Int16 lon1, Int16 lat3, Int16 lon3,$/;"	f
AtzPlotInit	.\MapIcon.c	/^static void AtzPlotInit(Coord radius) {$/;"	f	file:
AutoStartGPSCheckbox	.\ResourceDefines.h	207;"	d
AvCalcGreatCircleCourse	.\AvCalcs.c	/^double AvCalcGreatCircleCourse(double lat1, double lon1,$/;"	f
AvCalcGreatCircleRange	.\AvCalcs.c	/^double AvCalcGreatCircleRange(double lat1, double lon1, $/;"	f
AvCalcMagVarn	.\AvCalcs.c	/^float AvCalcMagVarn(double lat, double lon, float altitude, Int16 year) {     $/;"	f
AvCalcOffTrackError	.\AvCalcs.c	/^double AvCalcOffTrackError(double crsAB, double crsAD, double d) {$/;"	f
AvCalcRhumbLine	.\AvCalcs.c	/^void AvCalcRhumbLine(double lat1, double lon1,$/;"	f
AvCalcShiftPoint	.\AvCalcs.c	/^void AvCalcShiftPoint(double *lat, double *lon, double bearing, double range) {$/;"	f
BAUD_SWITCH_TIMEOUT	.\Gps.c	49;"	d	file:
BITVAL	.\AsDatabase.c	782;"	d	file:
BOTTOM	.\Utils.c	962;"	d	file:
BaudRate	.\Gps.c	/^} BaudRate;$/;"	t	typeref:enum:__anon50	file:
BetaCreatorID	.\Constants.h	17;"	d
BetaCreatorID	.\Constants.h	29;"	d
Blanks	.\Main.c	/^const char *Blanks[] = { "", " ", "  ","   ","    " };$/;"	v
BluetoothAlert	.\ResourceDefines.h	403;"	d
BoundaryAddLine	.\MapAirspace.c	82;"	d	file:
BoundaryDrawLine	.\MapAirspace.c	78;"	d	file:
BoundarySetCursor	.\MapAirspace.c	76;"	d	file:
ByCallback	.\VNAVDialog.c	/^static Boolean ByCallback(UInt16 button, float value) {$/;"	f	file:
CDAbortButton	.\ResourceDefines.h	361;"	d
CDCRSButton	.\ResourceDefines.h	352;"	d
CDCallback	.\CommandDialog.c	/^static void(*CDCallback)(UInt16);$/;"	v	file:
CDCoPilotButton	.\ResourceDefines.h	353;"	d
CDCurrentForm	.\CommandDialog.c	/^static UInt16 CDCurrentForm;$/;"	v	file:
CDDayNightButton	.\ResourceDefines.h	363;"	d
CDDivButton	.\ResourceDefines.h	348;"	d
CDEnrAppButton	.\ResourceDefines.h	350;"	d
CDGPSButton	.\ResourceDefines.h	349;"	d
CDMapButton	.\ResourceDefines.h	357;"	d
CDMapConfigButton	.\ResourceDefines.h	356;"	d
CDMonitorButton	.\ResourceDefines.h	364;"	d
CDNavButton	.\ResourceDefines.h	346;"	d
CDNextWaypointButton	.\ResourceDefines.h	358;"	d
CDPlanButton	.\ResourceDefines.h	347;"	d
CDPrevWaypointButton	.\ResourceDefines.h	359;"	d
CDResumeButton	.\ResourceDefines.h	355;"	d
CDTimerButton	.\ResourceDefines.h	365;"	d
CDUndoButton	.\ResourceDefines.h	360;"	d
CDVNAVButton	.\ResourceDefines.h	362;"	d
CDWPButton	.\ResourceDefines.h	351;"	d
CDWPInfoButton	.\ResourceDefines.h	354;"	d
COFF_LINES	.\AvCalcs.c	152;"	d	file:
COFF_LINES	.\MagVarn.c	7;"	d	file:
COLOURS_H_INCLUDED	.\Colours.h	7;"	d
COMMAND_H_INCLUDED	.\CommandDialog.h	7;"	d
CONSTANTS_H	.\Constants.h	2;"	d
CONV_WCTC	.\TerrainType.c	82;"	d	file:
COSINEZERO	.\Utils.h	120;"	d
CPINTERFACE_H_INCLUDED	.\CpInterface.h	11;"	d
CPINTERFACE_SECTION	.\Constants.h	53;"	d
CP_UNITS	.\GlobalTypes.h	29;"	d
CTRACE	.\GlobalTypes.h	686;"	d
CTRACE	.\GlobalTypes.h	696;"	d
CalcMagVarn	.\MagVarn.c	/^static float CalcMagVarn(double lat, double lon, float altitude, Int16 year) {     $/;"	f	file:
CancelButton	.\ResourceDefines.h	141;"	d
CancelDiversion	.\FMStrings.c	/^const char *CancelDiversion = "_Restore flight plan from %s? (All edits will be lost)";$/;"	v
CancelString	.\FMStrings.c	/^const char *CancelString = "_Cancel";$/;"	v
CancelTapPlan	.\MapForm.c	/^static void CancelTapPlan(void) {$/;"	f	file:
CardIndexDatabaseType	.\CpInterface.c	64;"	d	file:
CardInputAlert	.\ResourceDefines.h	404;"	d
CheckAndDrawMessageFlag	.\Main.c	/^void CheckAndDrawMessageFlag(void) {$/;"	f
CheckDimensions	.\MorePreferencesDialog.c	/^Boolean CheckDimensions(FormPtr frm, UInt16 *length, UInt16 *width) {$/;"	f
CheckIndex	.\WDManager.c	/^static Boolean CheckIndex(DatabaseType *db) {$/;"	f	file:
ChooseBluetoothDevice	.\Gps.c	/^static Boolean ChooseBluetoothDevice(BtLibDeviceAddressType *btID) {$/;"	f	file:
Cleanup	.\Platform.c	/^static Err Cleanup(SysNotifyParamType* notifyParamsP) {$/;"	f	file:
ClearAlarm	.\AlarmManager.c	/^static void ClearAlarm(Int16 num) {$/;"	f	file:
ClipLine16	.\Utils.c	/^Boolean ClipLine16(Coord *x1, Coord *y1, Coord *x2, Coord *y2, Coord minx, Coord miny, Coord maxx, Coord maxy) {$/;"	f
ClipLine32	.\Utils.c	/^Boolean ClipLine32(Int32 *x1, Int32 *y1, Int32 *x2, Int32 *y2, Int32 minx, Int32 miny, Int32 maxx, Int32 maxy) {$/;"	f
ClippedOutCode16	.\Utils.c	/^static UInt8 ClippedOutCode16(Coord x, Coord y, Coord minx, Coord miny, Coord maxx, Coord maxy) {$/;"	f	file:
ClippedOutCode32	.\Utils.c	/^static UInt8 ClippedOutCode32(Int32 x, Int32 y, Int32 minx, Int32 miny, Int32 maxx, Int32 maxy) {$/;"	f	file:
CloseDatabase	.\AsDatabase.c	/^static void CloseDatabase(AirspaceDBType *db) {$/;"	f	file:
CoPilotCreatorID	.\CpInterface.h	19;"	d
CoPilotCreatorID	.\CpInterface.h	21;"	d
CoPilotExternalDBName	.\CpInterface.h	27;"	d
CoPilotLaunched	.\Main.c	/^Boolean            CoPilotLaunched   = false;$/;"	v
CoPilotModuleID	.\Modules.c	11;"	d	file:
CoPilotModuleID	.\Modules.h	11;"	d
CoPilotUserWaypointType	.\CpInterface.h	25;"	d
CoPilotWaypointType	.\CpInterface.h	24;"	d
CoPilotWaypointsAlert	.\ResourceDefines.h	412;"	d
CoffData	.\AvCalcs.c	/^} CoffData;$/;"	t	typeref:struct:__anon9	file:
CoffData	.\MagVarn.c	/^} CoffData;$/;"	t	typeref:struct:__anon60	file:
ColoursModuleID	.\Modules.h	40;"	d
ColoursSetDay	.\Colours.c	/^void ColoursSetDay(AppColourPrefsType *ap) {$/;"	f
ColoursSetNight	.\Colours.c	/^void ColoursSetNight(AppColourPrefsType *ap) {$/;"	f
CommandDialog	.\ResourceDefines.h	345;"	d
CommandDialogCallback	.\Main.c	/^static void CommandDialogCallback(UInt16 button) {$/;"	f	file:
CommandDialogHandleEvent	.\CommandDialog.c	/^Boolean CommandDialogHandleEvent(EventPtr event)$/;"	f
CommandDialogInit	.\CommandDialog.c	/^void CommandDialogInit(UInt16 currentForm, void (*cb)(UInt16)) {$/;"	f
CompassText	.\Main.c	/^const char *CompassText[] = { "N", "NNE", "NE", "ENE", $/;"	v
ConfirmDeleteDialogue	.\ResourceDefines.h	382;"	d
ConfirmImportAlert	.\ResourceDefines.h	414;"	d
CopilotNotFoundAlert	.\ResourceDefines.h	388;"	d
CpAirwayType	.\CpInterface.c	/^typedef enum {airw, sid, star, approach} CpAirwayType;$/;"	t	typeref:enum:__anon13	file:
CpClose	.\CpInterface.c	/^void CpClose(void){$/;"	f
CpGetActiveFlightNum	.\CpInterface.c	/^UInt16 CpGetActiveFlightNum(void){$/;"	f
CpGetAirportFrequencies	.\CpInterface.c	/^const char *CpGetAirportFrequencies(const Waypoint *wp) {$/;"	f
CpGetFlightDescription	.\CpInterface.c	/^char *CpGetFlightDescription(UInt16 flightNum){ $/;"	f
CpGetNavFrequency	.\CpInterface.c	/^char *CpGetNavFrequency(const Waypoint *wp) {$/;"	f
CpGetNumSegments	.\CpInterface.c	/^Int16 CpGetNumSegments(void) { return numSegments; }$/;"	f
CpGetPlanID	.\CpInterface.c	/^UInt16 CpGetPlanID(void) { return planID; }$/;"	f
CpGetRunwayInfo	.\CpInterface.c	/^CpRunwayInfoType *CpGetRunwayInfo(const char *notes, Int16 *count) {$/;"	f
CpGetSegmentNum	.\CpInterface.c	/^Int16 CpGetSegmentNum(void) { return loadedSegment; }$/;"	f
CpGetUnitPreferences	.\CpInterface.c	/^void CpGetUnitPreferences(DisplayUnitsType *du){$/;"	f
CpGetValidFlights	.\CpInterface.c	/^void *CpGetValidFlights(UInt16 maxResults, UInt16 *total, UInt16 *resultPtr) {$/;"	f
CpImportFlight	.\CpInterface.c	/^Boolean CpImportFlight(UInt16 flightNum, FlightPlanType fp, UInt16 segment, Boolean alternate) {$/;"	f
CpInitialise	.\CpInterface.c	/^void CpInitialise(void){ $/;"	f
CpIsAlternateAvailable	.\CpInterface.c	/^Boolean CpIsAlternateAvailable(void) { return alternateAvailable; }$/;"	f
CpIsAlternateLoaded	.\CpInterface.c	/^Boolean CpIsAlternateLoaded(void) { return alternateLoaded; }$/;"	f
CpIsInstalled	.\CpInterface.c	/^Boolean CpIsInstalled(void) {$/;"	f
CpLaunchCoPilot	.\CpInterface.c	/^void CpLaunchCoPilot(void) {$/;"	f
CpLegWaypoint	.\CpInterface.c	/^}CpLegWaypoint ;$/;"	t	typeref:struct:__anon16	file:
CpPreferences	.\CpInterface.c	/^} CpPreferences;$/;"	t	typeref:struct:__anon19	file:
CpPushButton	.\ResourceDefines.h	204;"	d
CpRecordType	.\CpInterface.c	/^	CpRecordType;$/;"	t	typeref:enum:__anon10	file:
CpRunwayInfoType	.\CpInterface.h	/^} CpRunwayInfoType;$/;"	t	typeref:struct:__anon20
CpWaypointType	.\CpInterface.c	/^typedef enum {system,user} CpWaypointType;$/;"	t	typeref:enum:__anon11	file:
CreateIndex	.\WDManager.c	/^static Boolean CreateIndex(WDMHandle ds, DatabaseType *db, Int16 (*f)(Int16)) {$/;"	f	file:
CreateWindowFromBitmap	.\Utils.c	/^WinHandle CreateWindowFromBitmap(UInt16 bitmapId, Coord *width, Coord *height) {$/;"	f
CycleCounter	.\Main.c	/^Int32 CycleCounter = 0;$/;"	v
DBHANDLER_SECTION	.\Constants.h	56;"	d
DEG_MAGVAR_GPS	.\GlobalTypes.h	595;"	d
DEG_MAGVAR_WP	.\GlobalTypes.h	594;"	d
DEG_PER_RAD	.\GlobalTypes.h	406;"	d
DEG_TO_INT16	.\GlobalTypes.h	420;"	d
DEG_TO_INT32	.\GlobalTypes.h	421;"	d
DEG_TO_RAD	.\GlobalTypes.h	413;"	d
DEMO_LIMIT	.\Gps.h	31;"	d
DIVERSIONFORM_H_INCLUDED	.\DiversionForm.h	2;"	d
DIVERSIONMGR_H_INCLUDED	.\DiversionMgr.h	16;"	d
DIVERSIONMGR_SECTION	.\Constants.h	76;"	d
DIVERSION_SECTION	.\Constants.h	61;"	d
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\AIGauge.c	7;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\AlphaPadDialog.c	7;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\CommandDialog.c	7;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\CpInterface.c	12;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\DiversionForm.c	8;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\DiversionMgr.c	9;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\EditWaypointForm.c	9;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\FlightPlanForm.c	10;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\GPSForm.c	8;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\HeadingIndicator.c	7;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\KeypadDialog.c	7;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\Main.c	11;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\MainForm.c	9;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\MapForm.c	25;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\MessageDialog.c	7;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\MonitorDialog.c	7;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\MorePreferencesDialog.c	7;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\PreferencesDialog.c	8;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\SelectCopilotFlightDialog.c	6;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\SimulationDialog.c	8;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\TextDialog.c	8;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\TimerForm.c	8;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\Upgrades.c	11;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\Utils.c	10;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\VNAVDialog.c	5;"	d	file:
DO_NOT_ALLOW_ACCESS_TO_INTERNALS_OF_STRUCTS	.\WPInfoDialog.c	8;"	d	file:
DRAWFUNC	.\Utils.c	283;"	d	file:
DUMP_INT16	.\GlobalTypes.h	682;"	d
DUMP_INT16	.\GlobalTypes.h	697;"	d
DUMP_INT32	.\GlobalTypes.h	683;"	d
DUMP_INT32	.\GlobalTypes.h	698;"	d
DUMP_STR	.\GlobalTypes.h	684;"	d
DUMP_STR	.\GlobalTypes.h	699;"	d
Dashes	.\Main.c	/^const char *Dashes[] = { "", "-", "--","---","----" };$/;"	v
DataInputAlert	.\ResourceDefines.h	383;"	d
DatabaseExists	.\Utils.c	/^Boolean DatabaseExists(UInt32 type, UInt32 creator, UInt16 version) {$/;"	f
DatabaseScanResultsAlert	.\ResourceDefines.h	400;"	d
DatabaseType	.\WDManager.c	/^} DatabaseType;$/;"	t	typeref:struct:__anon91	file:
DbHandlerModuleID	.\Modules.c	12;"	d	file:
DbHandlerModuleID	.\Modules.h	12;"	d
DecodeGGA	.\Gps.c	/^static Boolean DecodeGGA(char *gga) {$/;"	f	file:
DecodeGPSMsg	.\Gps.c	/^static GPSMessageType DecodeGPSMsg(char *startOfMsg) {$/;"	f	file:
DecodeGSA	.\Gps.c	/^static void DecodeGSA(char *gsaMsg) {$/;"	f	file:
DecodeGSV	.\Gps.c	/^static Boolean DecodeGSV(char *gsvMsg) {$/;"	f	file:
DecodePMGNST	.\Gps.c	/^static void DecodePMGNST(char *stMsg) {$/;"	f	file:
DecodeRMC	.\Gps.c	/^static Boolean DecodeRMC(char *rmc) {$/;"	f	file:
DeferUpdate	.\MainForm.c	/^static Boolean DeferUpdate;$/;"	v	file:
DeferredUpdateTime	.\MainForm.c	/^static UInt32 DeferredUpdateTime;$/;"	v	file:
DeinitForm	.\SaveFlightDialog.c	/^static void DeinitForm(FormPtr form) {$/;"	f	file:
DeinitForm	.\SelectCopilotFlightDialog.c	/^static void DeinitForm(FormPtr form) {$/;"	f	file:
DeleteButton	.\ResourceDefines.h	142;"	d
DemoDateLimit	.\Main.c	/^UInt32 DemoDateLimit = 0xFFFFFFFF;$/;"	v
DemoExpiredAlert	.\ResourceDefines.h	415;"	d
DemoLeftAlert	.\ResourceDefines.h	416;"	d
DescriptionField	.\ResourceDefines.h	139;"	d
DialBitmap	.\ResourceDefines.h	429;"	d
DialogEventHandler	.\MorePreferencesDialog.c	/^static Boolean DialogEventHandler(EventPtr event) {$/;"	f	file:
DisclaimerAlert	.\ResourceDefines.h	390;"	d
DisplayUnits	.\Main.c	/^DisplayUnitsType   DisplayUnits;$/;"	v
DisplayUnitsType	.\GlobalTypes.h	/^} DisplayUnitsType;$/;"	t	typeref:struct:__anon43
DiversionForm	.\ResourceDefines.h	277;"	d
DiversionFormDeInit	.\DiversionForm.c	/^static void DiversionFormDeInit(FormPtr form) $/;"	f	file:
DiversionFormHandleEvent	.\DiversionForm.c	/^Boolean DiversionFormHandleEvent(EventPtr event)$/;"	f
DiversionFormInit	.\DiversionForm.c	/^static void DiversionFormInit(FormPtr form) {$/;"	f	file:
DiversionFormModuleID	.\Modules.c	13;"	d	file:
DiversionFormModuleID	.\Modules.h	13;"	d
DiversionMenu	.\ResourceDefines.h	9;"	d
DiversionMgrModuleID	.\Modules.h	43;"	d
DiversionType	.\GlobalTypes.h	/^typedef enum { divNone=0, divActive, divEmergency } DiversionType;$/;"	t	typeref:enum:__anon47
DoMorePreferencesDialog	.\MorePreferencesDialog.c	/^void DoMorePreferencesDialog(UInt8 units) {$/;"	f
DoPreferencesDialog	.\PreferencesDialog.c	/^void DoPreferencesDialog(void) {$/;"	f
DoTapPlanEdit	.\MapForm.c	/^Boolean DoTapPlanEdit(void) {$/;"	f
DoTapPlanStateMachine	.\MapForm.c	/^static void DoTapPlanStateMachine(Int16 menuID) {$/;"	f	file:
Double2FP	.\Fixed.h	74;"	d
DoubleToStr	.\Utils.c	/^char *DoubleToStr(double d,UInt16 dp) {$/;"	f
DrawAirspaceFilters	.\MapDialog.c	/^static void DrawAirspaceFilters() {$/;"	f	file:
DrawAlarmBanner	.\Main.c	/^void DrawAlarmBanner(void) {$/;"	f
DrawAlignedChars	.\Utils.c	/^Coord DrawAlignedChars(const char *text, UInt8 align, Coord x,Coord y) {$/;"	f
DrawCircle	.\Utils.c	/^WinLineType *DrawCircle(Coord cx, Coord cy, Coord r, Int16 *numLines) {$/;"	f
DrawFilterOverlay	.\MapDialog.c	/^static void DrawFilterOverlay(Int16 buttonNumber) {$/;"	f	file:
DrawFilterOverlays	.\MapDialog.c	/^static void DrawFilterOverlays(void) {$/;"	f	file:
DrawFlag	.\Utils.c	/^void DrawFlag(const PointType *pos, const char *str, IndexedColorType colour)  {$/;"	f
DrawFlightDataDisplay	.\MapForm.c	/^static void DrawFlightDataDisplay(Boolean full) {$/;"	f	file:
DrawHeadingArc	.\MapForm.c	/^static void DrawHeadingArc(Int16 heading, Coord xc, Coord yc) {$/;"	f	file:
DrawHeadingDisc	.\HeadingIndicator.c	/^static void DrawHeadingDisc(HSIType hsi, Int16 heading, Int16 bearing)  {$/;"	f	file:
DrawLargeNumberSmallText	.\Utils.c	/^Coord DrawLargeNumberSmallText(const char *num, const char *txt, Coord x, $/;"	f
DrawLegListItem	.\FlightPlanForm.c	/^static void DrawLegListItem(Int16 itemNum, RectangleType *bounds, Char **text) {$/;"	f	file:
DrawLines2d	.\Utils.c	/^void DrawLines2d(WinLineType *lines, Int16 numLines, IndexedColorType colour, Boolean dashed) {$/;"	f
DrawOneFlight	.\SelectCopilotFlightDialog.c	/^static void DrawOneFlight(Int16 itemNum, RectangleType *bounds, $/;"	f	file:
DrawOneLine	.\WPInfoDialog.c	/^static void DrawOneLine(Int16 itemNum, RectangleType *bounds, char **text) {$/;"	f	file:
DrawOutlineChars	.\Utils.c	/^Coord DrawOutlineChars(const char *str, UInt8 align, Coord x1, Coord y1) {$/;"	f
DrawPointer	.\HeadingIndicator.c	/^static void DrawPointer(HSIType hsi, Int16 course, float trkError, float maxTrkError) {$/;"	f	file:
DrawPointerSection	.\HeadingIndicator.c	/^static void DrawPointerSection(PointType p[], UInt8 start, UInt8 end) {$/;"	f	file:
DrawPolygon	.\Polygon.c	/^void DrawPolygon(PolyPointType *pnts, Int16 n) {$/;"	f
DrawRunways	.\MapIcon.c	/^static void DrawRunways(MapIconType *i, Waypoint *wp, Coord ix, Coord iy, Int16 rotation) {$/;"	f	file:
DrawSelectionBox	.\MapForm.c	/^static void DrawSelectionBox(void) {$/;"	f	file:
DrawWaypoint	.\DiversionForm.c	/^static void DrawWaypoint(UInt16 listNum) {$/;"	f	file:
DrawWaypointId	.\MainForm.c	/^static void DrawWaypointId(Boolean inverted) {$/;"	f	file:
DvAirfieldPushbutton	.\ResourceDefines.h	281;"	d
DvAnyPushbutton	.\ResourceDefines.h	285;"	d
DvCancelDiversion	.\DiversionMgr.c	/^Boolean DvCancelDiversion(Boolean userConfirmed) {$/;"	f
DvEmergencyDiversion	.\DiversionMgr.c	/^Boolean DvEmergencyDiversion(void) {$/;"	f
DvIdentCheckbox	.\ResourceDefines.h	280;"	d
DvIntPushbutton	.\ResourceDefines.h	284;"	d
DvItemHeight	.\ResourceDefines.h	275;"	d
DvItemListLeft	.\ResourceDefines.h	274;"	d
DvItemListTop	.\ResourceDefines.h	273;"	d
DvItemWidth	.\ResourceDefines.h	276;"	d
DvManageKeypress	.\DiversionMgr.c	/^void DvManageKeypress(UInt16 currentForm) {$/;"	f
DvNDBPushbutton	.\ResourceDefines.h	283;"	d
DvPushbuttonGroup	.\ResourceDefines.h	286;"	d
DvScrollbar	.\ResourceDefines.h	279;"	d
DvSearchStr	.\ResourceDefines.h	278;"	d
DvSetupDiversion	.\DiversionMgr.c	/^void DvSetupDiversion(Boolean selectedWaypoint, WaypointIDType wpID) {$/;"	f
DvVORPushbutton	.\ResourceDefines.h	282;"	d
E0000	.\AvCalcs.c	/^static void E0000(int IENTRY,int *maxdeg, float alt,float glat,float glon,float time,$/;"	f	file:
E0000	.\MagVarn.c	/^static void E0000(int IENTRY,int *maxdeg, float alt,float glat,float glon,float time,$/;"	f	file:
EDITWAYPOINTFORM_H	.\EditWaypointForm.h	2;"	d
EDITWAYPOINT_SECTION	.\Constants.h	66;"	d
ERROR_CHECK_LEVEL	.\AIGauge.c	10;"	d	file:
ERROR_CHECK_LEVEL	.\AlphaPadDialog.c	10;"	d	file:
ERROR_CHECK_LEVEL	.\CommandDialog.c	10;"	d	file:
ERROR_CHECK_LEVEL	.\CpInterface.c	15;"	d	file:
ERROR_CHECK_LEVEL	.\DiversionForm.c	11;"	d	file:
ERROR_CHECK_LEVEL	.\DiversionMgr.c	12;"	d	file:
ERROR_CHECK_LEVEL	.\EditWaypointForm.c	12;"	d	file:
ERROR_CHECK_LEVEL	.\FlightPlanForm.c	13;"	d	file:
ERROR_CHECK_LEVEL	.\GPSForm.c	11;"	d	file:
ERROR_CHECK_LEVEL	.\HeadingIndicator.c	10;"	d	file:
ERROR_CHECK_LEVEL	.\KeypadDialog.c	10;"	d	file:
ERROR_CHECK_LEVEL	.\Main.c	14;"	d	file:
ERROR_CHECK_LEVEL	.\MainForm.c	12;"	d	file:
ERROR_CHECK_LEVEL	.\MapForm.c	28;"	d	file:
ERROR_CHECK_LEVEL	.\MessageDialog.c	10;"	d	file:
ERROR_CHECK_LEVEL	.\MonitorDialog.c	10;"	d	file:
ERROR_CHECK_LEVEL	.\MorePreferencesDialog.c	10;"	d	file:
ERROR_CHECK_LEVEL	.\PreferencesDialog.c	11;"	d	file:
ERROR_CHECK_LEVEL	.\SelectCopilotFlightDialog.c	9;"	d	file:
ERROR_CHECK_LEVEL	.\SimulationDialog.c	11;"	d	file:
ERROR_CHECK_LEVEL	.\TextDialog.c	11;"	d	file:
ERROR_CHECK_LEVEL	.\TimerForm.c	11;"	d	file:
ERROR_CHECK_LEVEL	.\Upgrades.c	14;"	d	file:
ERROR_CHECK_LEVEL	.\Utils.c	13;"	d	file:
ERROR_CHECK_LEVEL	.\VNAVDialog.c	8;"	d	file:
ERROR_CHECK_LEVEL	.\WPInfoDialog.c	11;"	d	file:
ERR_CANT_INIT_FORM	.\GlobalTypes.h	388;"	d
ERR_GPS_INVALID_MSGID	.\Gps.h	20;"	d
ERR_GPS_MSG_NOT_DECODED	.\Gps.c	48;"	d	file:
ERR_GPS_NOT_INIT	.\Gps.h	22;"	d
ERR_GPS_NO_BLUETOOTH	.\Gps.h	27;"	d
ERR_GPS_NO_CARD	.\Gps.h	28;"	d
ERR_GPS_NO_GARMIN	.\Gps.h	29;"	d
ERR_GPS_NO_SUCH_SOURCE	.\Gps.h	26;"	d
ERR_GPS_OUT_OF_DATE	.\Gps.h	25;"	d
ERR_GPS_PORT_LOCKED	.\Gps.h	21;"	d
ERR_GPS_RETRY_REQD	.\Gps.h	23;"	d
ERR_GPS_TIMEOUT	.\Gps.h	24;"	d
ERR_INVALID_FORM_LOAD_EVENT	.\GlobalTypes.h	389;"	d
ERR_MATHLIB_CLOSE_ERROR	.\GlobalTypes.h	391;"	d
ERR_MATHLIB_NOT_FOUND	.\GlobalTypes.h	392;"	d
ERR_MEM_ALLOC_ERROR	.\GlobalTypes.h	390;"	d
ETAReadout	.\ResourceDefines.h	63;"	d
EastPushButton	.\ResourceDefines.h	147;"	d
EditWaypointForm	.\ResourceDefines.h	132;"	d
EditWaypointFormDeinit	.\EditWaypointForm.c	/^static void EditWaypointFormDeinit(void)$/;"	f	file:
EditWaypointFormHandleEvent	.\EditWaypointForm.c	/^Boolean EditWaypointFormHandleEvent(EventPtr event)$/;"	f
EditWaypointFormHelpString	.\ResourceDefines.h	426;"	d
EditWaypointFormInit	.\EditWaypointForm.c	/^static void EditWaypointFormInit(FormPtr form)$/;"	f	file:
EditWaypointFormModuleID	.\Modules.c	14;"	d	file:
EditWaypointFormModuleID	.\Modules.h	14;"	d
EditWaypointFormSetup	.\EditWaypointForm.c	/^void EditWaypointFormSetup(const Waypoint *inWp, Boolean(*cb)(Boolean validate, const Waypoint *wp, UInt16 size, Boolean deleted)) {$/;"	f
EmergencyDiversionForm	.\ResourceDefines.h	288;"	d
EmergencyDivertFailedAlert	.\ResourceDefines.h	408;"	d
EnableCopilotAlert	.\ResourceDefines.h	391;"	d
EndianSwap16	.\Utils.h	246;"	d
EndianSwap32	.\Utils.h	248;"	d
ErrExtra	.\Main.c	/^char ErrExtra[128] = " " ;	\/\/ extra error info from ErrThrows$/;"	v
EwErrThrow	.\EditWaypointForm.c	60;"	d	file:
ExitAlert	.\ResourceDefines.h	402;"	d
ExtraAirfieldInfoType	.\MapIcon.h	/^} ExtraAirfieldInfoType;$/;"	t	typeref:struct:__anon68
ExtraIconInfoType	.\MapIcon.h	/^} ExtraIconInfoType;$/;"	t	typeref:union:__anon70
ExtraNavaidInfoType	.\MapIcon.h	/^} ExtraNavaidInfoType;$/;"	t	typeref:struct:__anon69
FALSE	.\TerrainType.c	23;"	d	file:
FEET_PER_METRE	.\GlobalTypes.h	401;"	d
FEET_PER_NM	.\GlobalTypes.h	402;"	d
FEET_TO_NM	.\GlobalTypes.h	409;"	d
FEET_UNITS	.\GlobalTypes.h	31;"	d
FILEROOT	.\Constants.h	15;"	d
FILEROOT	.\Constants.h	25;"	d
FIRST_AIRSPACE_BUTTON	.\MapDialog.c	38;"	d	file:
FLIGHTDATABASE_H_INCLUDED	.\FlightDatabase.h	7;"	d
FLIGHTPLANFORM_H	.\FlightPlanForm.h	2;"	d
FLIGHTPLAN_H_INCLUDED	.\FlightPlan.h	10;"	d
FLIGHTPLAN_SECTION	.\Constants.h	64;"	d
FLIGHT_SEEK	.\FlightDatabase.c	29;"	d	file:
FMCreatorID	.\Platform.c	/^const UInt32 FMCreatorID = 'BHMN';$/;"	v
FMDBType	.\Platform.c	/^const UInt32 FMDBType = 'FMDB';$/;"	v
FMDS	.\Main.c	/^FMDataset FMDS;$/;"	v
FMDataset	.\GlobalTypes.h	/^} FMDataset;$/;"	t	typeref:struct:__anon34
FMPreferencesType	.\GlobalTypes.h	/^typedef FMPreferencesType_v7_2  FMPreferencesType;$/;"	t
FMPreferencesType_v7_2	.\GlobalTypes.h	/^} FMPreferencesType_v7_2;$/;"	t	typeref:struct:__anon39
FP14	.\Fixed.h	/^typedef Int32 FP14;$/;"	t
FP2Double	.\Fixed.h	73;"	d
FP2Int	.\Fixed.h	72;"	d
FP8FRAC	.\TerrainCore.h	21;"	d
FP8INT	.\TerrainCore.h	20;"	d
FP8RADIX	.\TerrainCore.h	18;"	d
FPAdd	.\Fixed.h	62;"	d
FPAltWidth	.\ResourceDefines.h	128;"	d
FPAlternateButton	.\ResourceDefines.h	117;"	d
FPCoPilotButton	.\ResourceDefines.h	109;"	d
FPCos	.\Fixed.h	109;"	d
FPCumulativePushButton	.\ResourceDefines.h	119;"	d
FPDistWidth	.\ResourceDefines.h	130;"	d
FPDiv	.\Fixed.h	/^static FP14 FPDiv(FP14 d1, FP14 d2) {$/;"	f
FPDnButton	.\ResourceDefines.h	111;"	d
FPETAPushButton	.\ResourceDefines.h	121;"	d
FPETEPushButton	.\ResourceDefines.h	120;"	d
FPEditButton	.\ResourceDefines.h	108;"	d
FPFract	.\Fixed.h	93;"	d
FPHalf	.\Fixed.h	84;"	d
FPLegList	.\ResourceDefines.h	114;"	d
FPLegPushButton	.\ResourceDefines.h	118;"	d
FPLegPushButtonGroup	.\ResourceDefines.h	124;"	d
FPLegWidth	.\ResourceDefines.h	127;"	d
FPList	.\ResourceDefines.h	112;"	d
FPMul	.\Fixed.h	38;"	d
FPNewButton	.\ResourceDefines.h	113;"	d
FPOne	.\Fixed.h	82;"	d
FPRoundInt	.\Fixed.h	94;"	d
FPSin	.\Fixed.h	108;"	d
FPSqrt	.\Fixed.h	111;"	d
FPStatusField	.\ResourceDefines.h	122;"	d
FPSub	.\Fixed.h	63;"	d
FPTimePushButtonGroup	.\ResourceDefines.h	125;"	d
FPTotalDistance	.\ResourceDefines.h	116;"	d
FPTotalTime	.\ResourceDefines.h	115;"	d
FPTrkWidth	.\ResourceDefines.h	129;"	d
FPTwo	.\Fixed.h	83;"	d
FPUpButton	.\ResourceDefines.h	110;"	d
FPZero	.\Fixed.h	81;"	d
FP_STACK_SIZE	.\FlightPlan.c	73;"	d	file:
FTRACE	.\GlobalTypes.h	685;"	d
FTRACE	.\GlobalTypes.h	694;"	d
FlightDBClose	.\FlightDatabase.c	/^void FlightDBClose(void)  {$/;"	f
FlightDBDeleteFlight	.\FlightDatabase.c	/^Boolean FlightDBDeleteFlight(Int16 flightNum) {$/;"	f
FlightDBGetFlight	.\FlightDatabase.c	/^FlightPlanType FlightDBGetFlight(Int16 flightNum, Boolean alternate) {$/;"	f
FlightDBGetName	.\FlightDatabase.c	/^char *FlightDBGetName(Int16 flightNum)  {$/;"	f
FlightDBGetNumRecords	.\FlightDatabase.c	/^Int16 FlightDBGetNumRecords(void)  {$/;"	f
FlightDBOpen	.\FlightDatabase.c	/^void FlightDBOpen(void)  {$/;"	f
FlightDBSaveFlight	.\FlightDatabase.c	/^Boolean FlightDBSaveFlight(const char *name, FlightPlanType flight, FlightPlanType alternate, Boolean overwrite) {$/;"	f
FlightDataDisplayType	.\GlobalTypes.h	/^typedef enum { fddOff = 0, fddBasic, fddFull } FlightDataDisplayType;$/;"	t	typeref:enum:__anon33
FlightDataType	.\CpInterface.c	53;"	d	file:
FlightDatabaseModuleID	.\Modules.h	35;"	d
FlightDeleteAlert	.\ResourceDefines.h	419;"	d
FlightDialogHandleEvent	.\SelectCopilotFlightDialog.c	/^Boolean FlightDialogHandleEvent(EventPtr event) {$/;"	f
FlightDirectorDraw	.\Instruments.c	/^void FlightDirectorDraw(Coord centreX, Coord centreY, Coord spacing) {$/;"	f
FlightExistsAlert	.\ResourceDefines.h	418;"	d
FlightListBox	.\ResourceDefines.h	172;"	d
FlightMasterCreatorId	.\Constants.h	16;"	d
FlightMasterCreatorId	.\Constants.h	28;"	d
FlightMasterDatabaseType	.\Constants.h	40;"	d
FlightPlan	.\Main.c	/^FlightPlanType FlightPlan = NULL;$/;"	v
FlightPlanAlert	.\ResourceDefines.h	409;"	d
FlightPlanForm	.\ResourceDefines.h	107;"	d
FlightPlanFormDeinit	.\FlightPlanForm.c	/^static void FlightPlanFormDeinit(FormPtr form)$/;"	f	file:
FlightPlanFormHandleEvent	.\FlightPlanForm.c	/^Boolean FlightPlanFormHandleEvent(EventPtr event)$/;"	f
FlightPlanFormInit	.\FlightPlanForm.c	/^static void FlightPlanFormInit(FormPtr form) {$/;"	f	file:
FlightPlanFormModuleID	.\Modules.h	38;"	d
FlightPlanLegType	.\FlightPlan.h	/^} FlightPlanLegType;$/;"	t	typeref:struct:__anon29
FlightPlanLegWaypointType	.\FlightPlan.h	/^} FlightPlanLegWaypointType;$/;"	t	typeref:struct:__anon28
FlightPlanMenu	.\ResourceDefines.h	7;"	d
FlightPlanModuleID	.\Modules.h	22;"	d
FlightPlanName	.\GlobalTypes.h	/^	char FlightPlanName[36];$/;"	m	struct:__anon39
FlightPlanStack	.\Main.c	/^FlightPlanStackType FlightPlanStack;$/;"	v
FlightPlanStackB	.\Main.c	/^FlightPlanStackType FlightPlanStackB;$/;"	v
FlightPlanStackType	.\FlightPlan.c	/^struct FlightPlanStackType {$/;"	s	file:
FlightPlanStackType	.\FlightPlan.h	/^typedef struct FlightPlanStackType *FlightPlanStackType;$/;"	t	typeref:struct:FlightPlanStackType
FlightPlanType	.\FlightPlan.c	/^struct FlightPlanType {$/;"	s	file:
FlightPlanType	.\FlightPlan.h	/^typedef struct FlightPlanType *FlightPlanType;$/;"	t	typeref:struct:FlightPlanType
FlightPlanVersionType	.\FlightPlan.h	/^typedef enum { minorVersion, majorVersion } FlightPlanVersionType;$/;"	t	typeref:enum:__anon30
FlightStruct	.\CpInterface.c	/^}FlightStruct;$/;"	t	typeref:struct:__anon15	file:
FloatToStr	.\Utils.c	/^char *FloatToStr(float d,UInt16 dp) {$/;"	f
FormDeinit	.\SimulationDialog.c	/^static void FormDeinit(void) {$/;"	f	file:
FormDeinit	.\TextDialog.c	/^static void FormDeinit(void) {$/;"	f	file:
FormDeinit	.\TimerForm.c	/^static void FormDeinit(FormPtr form) {$/;"	f	file:
FormDeinit	.\VNAVDialog.c	/^static void FormDeinit(FormPtr frm) {$/;"	f	file:
FormDeinit	.\WPInfoDialog.c	/^static void FormDeinit(void) {$/;"	f	file:
FormInit	.\CommandDialog.c	/^static void FormInit(FormPtr frm) {$/;"	f	file:
FormInit	.\KeypadDialog.c	/^static void FormInit(FormPtr frm) {$/;"	f	file:
FormInit	.\MonitorDialog.c	/^static void FormInit(FormPtr frm) {$/;"	f	file:
FormInit	.\SimulationDialog.c	/^static void FormInit(FormPtr frm) {$/;"	f	file:
FormInit	.\TextDialog.c	/^static void FormInit(FormPtr frm) {$/;"	f	file:
FormInit	.\TimerForm.c	/^static void FormInit(FormPtr form) $/;"	f	file:
FormInit	.\VNAVDialog.c	/^static void FormInit(FormPtr frm) {$/;"	f	file:
FormInit	.\WPInfoDialog.c	/^static void FormInit(FormPtr frm) {$/;"	f	file:
FormSaveValues	.\MonitorDialog.c	/^static void FormSaveValues(FormPtr frm) {$/;"	f	file:
FpAddLeg	.\FlightPlan.c	/^Boolean FpAddLeg(FlightPlanType fp, WaypointIDType wpIDA, $/;"	f
FpAppendWaypoint	.\FlightPlan.c	/^Boolean FpAppendWaypoint(FlightPlanType fp, WaypointIDType wpid){$/;"	f
FpCleanPlan	.\FlightPlan.c	/^void FpCleanPlan(FlightPlanType fp, WaypointIDType delWPID) {$/;"	f
FpCleanStack	.\FlightPlan.c	/^void FpCleanStack(FlightPlanStackType fs, WaypointIDType delWPID) {$/;"	f
FpClearVNAV	.\FlightPlan.c	/^void FpClearVNAV(const FlightPlanType fp, Int16 leg) {$/;"	f
FpCopy	.\FlightPlan.c	/^void FpCopy(FlightPlanType dest, FlightPlanType src) {$/;"	f
FpDeleteLeg	.\FlightPlan.c	/^Boolean FpDeleteLeg(FlightPlanType fp, Int16 legNum) {$/;"	f
FpDeleteWaypoint	.\FlightPlan.c	/^Boolean FpDeleteWaypoint(FlightPlanType fp, Int16 legNum) {$/;"	f
FpDeleteWaypointByID	.\FlightPlan.c	/^Boolean FpDeleteWaypointByID(FlightPlanType fp, WaypointIDType wpID) {$/;"	f
FpFree	.\FlightPlan.c	/^void FpFree(FlightPlanType fp) {$/;"	f
FpGetCurrentLeg	.\FlightPlan.c	/^Int16 FpGetCurrentLeg(const FlightPlanType fp) { return fp->currentLeg; }$/;"	f
FpGetFromWaypoint	.\FlightPlan.c	/^Waypoint *FpGetFromWaypoint(const FlightPlanType fp, Int16 leg) {$/;"	f
FpGetLeg	.\FlightPlan.c	/^const FlightPlanLegType *FpGetLeg(const FlightPlanType fp, Int16 leg, $/;"	f
FpGetLegWaypointID	.\FlightPlan.c	/^WaypointIDType FpGetLegWaypointID(const FlightPlanType fp, Int16 leg) {$/;"	f
FpGetNumLegs	.\FlightPlan.c	/^Int16 FpGetNumLegs(const FlightPlanType fp) { return fp->numLegs; }$/;"	f
FpGetToWaypoint	.\FlightPlan.c	/^Waypoint *FpGetToWaypoint(const FlightPlanType fp, Int16 leg) {$/;"	f
FpGetVNAV	.\FlightPlan.c	/^const VNAVDataType *FpGetVNAV(FlightPlanType fp, Int16 leg) {$/;"	f
FpGetVersion	.\FlightPlan.c	/^Int16 FpGetVersion(const FlightPlanType fp, FlightPlanVersionType fpv) {$/;"	f
FpGetWaypoint	.\FlightPlan.c	/^Waypoint *FpGetWaypoint(const FlightPlanType fp, Int16 wpNum) {$/;"	f
FpGetWaypointID	.\FlightPlan.c	/^WaypointIDType FpGetWaypointID(const FlightPlanType fp, Int16 wpNum) {$/;"	f
FpGotoActive	.\FlightPlan.c	/^Boolean FpGotoActive(FlightPlanType fp) {$/;"	f
FpInit	.\FlightPlan.c	/^void FpInit(FlightPlanType fp) {$/;"	f
FpInsertWaypoint	.\FlightPlan.c	/^Boolean FpInsertWaypoint(FlightPlanType fp, WaypointIDType wpid, Int16 leg) {$/;"	f
FpIsBlank	.\FlightPlan.c	/^Boolean FpIsBlank(const FlightPlanType fp) { return (fp->numLegs < 1); }$/;"	f
FpLoadFromFile	.\FlightPlan.c	/^Int32 FpLoadFromFile(FlightPlanType f, PFFileRef file) {$/;"	f
FpNew	.\FlightPlan.c	/^FlightPlanType FpNew(void) {$/;"	f
FpNextLeg	.\FlightPlan.c	/^Boolean FpNextLeg(FlightPlanType fp) {$/;"	f
FpPreviousLeg	.\FlightPlan.c	/^Boolean FpPreviousLeg(FlightPlanType fp) {$/;"	f
FpSaveToFile	.\FlightPlan.c	/^Int32 FpSaveToFile(FlightPlanType f, PFFileRef file) {$/;"	f
FpSetCurrentLeg	.\FlightPlan.c	/^void FpSetCurrentLeg(FlightPlanType fp, Int16 leg) {$/;"	f
FpSetGoto	.\FlightPlan.c	/^void FpSetGoto(FlightPlanType fp, Int32 lat, Int32 lon, float magVar) {$/;"	f
FpSetVNAV	.\FlightPlan.c	/^void FpSetVNAV(FlightPlanType fp, Int16 leg, const VNAVDataType *vd) {$/;"	f
FpSizeOf	.\FlightPlan.c	/^const UInt32 FpSizeOf(void) {$/;"	f
FpStackFree	.\FlightPlan.c	/^void FpStackFree(FlightPlanStackType fs) {$/;"	f
FpStackLoad	.\FlightPlan.c	/^Boolean FpStackLoad(FlightPlanStackType fs, const char *filename) {$/;"	f
FpStackNew	.\FlightPlan.c	/^FlightPlanStackType FpStackNew(void) { $/;"	f
FpStackPeek	.\FlightPlan.c	/^FlightPlanType FpStackPeek(FlightPlanStackType fs, Int16 num) {$/;"	f
FpStackPop	.\FlightPlan.c	/^FlightPlanType FpStackPop(FlightPlanStackType fs) {$/;"	f
FpStackPush	.\FlightPlan.c	/^Boolean FpStackPush(FlightPlanStackType fs, FlightPlanType fp) {$/;"	f
FpStackSave	.\FlightPlan.c	/^Boolean FpStackSave(FlightPlanStackType fs, const char *filename) {$/;"	f
FpVNAVIsSet	.\FlightPlan.c	/^Boolean FpVNAVIsSet(FlightPlanType fp, Int16 leg) {$/;"	f
FromFlag	.\MainForm.c	159;"	d	file:
GLOBAL_TYPES_H_INCLUDED	.\GlobalTypes.h	7;"	d
GPS	.\Main.c	/^GPSType        GPS;$/;"	v
GPSAltCallback	.\VNAVDialog.c	/^static Boolean GPSAltCallback(UInt16 button, float value) {$/;"	f	file:
GPSBattLevelData	.\Gps.h	/^} GPSBattLevelData;$/;"	t	typeref:struct:__anon56
GPSClose	.\Gps.c	/^void GPSClose(void){$/;"	f
GPSCoordsToText	.\Gps.c	/^void GPSCoordsToText(double lat, double lon, char *north, char *east) {$/;"	f
GPSDutyType	.\Gps.h	/^} GPSDutyType;$/;"	t	typeref:enum:__anon58
GPSFORM_H	.\GPSForm.h	2;"	d
GPSFORM_SECTION	.\Constants.h	68;"	d
GPSFix2dString	.\FMStrings.c	/^const char *GPSFix2dString = "_GPS Fix 2D";$/;"	v
GPSFix3dString	.\FMStrings.c	/^const char *GPSFix3dString = "_GPS Fix 3D";$/;"	v
GPSFixLostString	.\FMStrings.c	/^const char *GPSFixLostString = "_GPS Fix Lost";$/;"	v
GPSForm	.\ResourceDefines.h	69;"	d
GPSFormDeinit	.\GPSForm.c	/^static void GPSFormDeinit(FormPtr form) {$/;"	f	file:
GPSFormHandleEvent	.\GPSForm.c	/^Boolean GPSFormHandleEvent(EventPtr event)$/;"	f
GPSFormInit	.\GPSForm.c	/^static void GPSFormInit(FormPtr form) {$/;"	f	file:
GPSHDOPField	.\ResourceDefines.h	82;"	d
GPSInit	.\Gps.c	/^Err GPSInit(GPSSourceType source, BtLibDeviceAddressType *bluetoothID) {$/;"	f
GPSLocalField	.\ResourceDefines.h	77;"	d
GPSMenu	.\ResourceDefines.h	8;"	d
GPSMessageType	.\Gps.c	/^} GPSMessageType;$/;"	t	typeref:enum:__anon51	file:
GPSModuleID	.\Modules.h	17;"	d
GPSNumSats	.\Gps.h	18;"	d
GPSPDOPField	.\ResourceDefines.h	84;"	d
GPSPosnData	.\Gps.h	/^} GPSPosnData;$/;"	t	typeref:struct:__anon54
GPSProcess	.\Gps.c	/^Err GPSProcess(GPSDutyType dutyCycle, EventPtr event) {$/;"	f
GPSPushButtonGroup	.\ResourceDefines.h	86;"	d
GPSSatData	.\Gps.h	/^} GPSSatData;$/;"	t	typeref:struct:__anon55
GPSSetAMSLAltitude	.\Gps.c	/^void GPSSetAMSLAltitude(float altitude) {$/;"	f
GPSSetAltitudeCorrection	.\Gps.c	/^void GPSSetAltitudeCorrection(float correction) {$/;"	f
GPSSetLocation	.\Gps.c	/^void GPSSetLocation(Int32 lat, Int32 lon) {$/;"	f
GPSSetSimParams	.\Gps.c	/^void GPSSetSimParams(const double *lat, const double *lon, float heading, $/;"	f
GPSSimulating	.\Gps.c	/^Boolean GPSSimulating(void) {$/;"	f
GPSSourceSupported	.\Gps.c	/^Boolean GPSSourceSupported(GPSSourceType source) {$/;"	f
GPSSourceType	.\Gps.h	/^} GPSSourceType;$/;"	t	typeref:enum:__anon57
GPSState	.\Main.c	/^Boolean            GPSState;$/;"	v
GPSStatusField	.\ResourceDefines.h	85;"	d
GPSTimeStamp	.\Gps.h	/^} GPSTimeStamp;$/;"	t	typeref:struct:__anon53
GPSTimeZoneField	.\ResourceDefines.h	79;"	d
GPSTimeZoneMinusButton	.\ResourceDefines.h	81;"	d
GPSTimeZonePlusButton	.\ResourceDefines.h	80;"	d
GPSType	.\Gps.h	/^} GPSType;$/;"	t	typeref:struct:__anon59
GPSUTCField	.\ResourceDefines.h	75;"	d
GPSVDOPField	.\ResourceDefines.h	83;"	d
GPS_COMMS_TIMEOUT	.\Gps.c	50;"	d	file:
GPS_H_INCLUDED	.\Gps.h	12;"	d
GPS_OK	.\Gps.h	19;"	d
GPS_SECTION	.\Constants.h	70;"	d
GSIDraw	.\Instruments.c	/^void GSIDraw(GSIType gsi, Int32 altError) {$/;"	f
GSIFree	.\Instruments.c	/^void GSIFree(GSIType gsi) {$/;"	f
GSINew	.\Instruments.c	/^GSIType GSINew(Coord x, Coord y, Coord width, Coord height, Int32 maxDeflection, Int32 tickInterval) {$/;"	f
GSIType	.\Instruments.h	/^typedef struct GSITypeStruct *GSIType;$/;"	t	typeref:struct:GSITypeStruct
GSITypeStruct	.\Instruments.c	/^struct GSITypeStruct { $/;"	s	file:
GTAN15	.\NavManager.c	745;"	d	file:
GUIDrawBitmap	.\Platform.c	/^void GUIDrawBitmap(UInt16 bitmapID, Coord x, Coord y) {$/;"	f
GUIDrawForm	.\Platform.c	/^void  GUIDrawForm(void) {$/;"	f
GUIGetFieldText	.\Platform.c	/^char *GUIGetFieldText(UInt16 fieldID) {$/;"	f
GUIGetObjectBounds	.\Platform.c	/^void GUIGetObjectBounds(UInt16 controlID, RectangleType *r) {$/;"	f
GUIGetObjectState	.\Platform.c	/^Boolean GUIGetObjectState(UInt16 controlID) {$/;"	f
GUIHideObject	.\Platform.c	/^void GUIHideObject(UInt16 controlID) {$/;"	f
GUIHitControl	.\Platform.c	/^void GUIHitControl(UInt16 controlID) {$/;"	f
GUISetFieldText	.\Platform.c	/^void GUISetFieldText(UInt16 controlID, const char *text, Boolean redraw)  {$/;"	f
GUISetObjectBitmap	.\Platform.c	/^void GUISetObjectBitmap(UInt16 controlID, UInt16 bitmapID) {$/;"	f
GUISetObjectLabel	.\Platform.c	/^void GUISetObjectLabel(UInt16 controlID, const char *label) {$/;"	f
GUISetObjectState	.\Platform.c	/^void GUISetObjectState(UInt16 controlID, Boolean state) {$/;"	f
GUIShowObject	.\Platform.c	/^void GUIShowObject(UInt16 controlID) {$/;"	f
GarminInputAlert	.\ResourceDefines.h	405;"	d
GeneratePreviewMap	.\MapForm.c	/^static void GeneratePreviewMap(void) {$/;"	f	file:
GenerateRegistrationCode	.\RegistrationCode.c	/^static UInt32 GenerateRegistrationCode(UInt32 seed, UInt32 prime, const char *uid) {$/;"	f	file:
GenericWarningAlert	.\ResourceDefines.h	392;"	d
GetAirportFrequencies	.\WDManager.c	/^static \/*@shared@*\/ const char *GetAirportFrequencies(const Waypoint *wp) {$/;"	f	file:
GetDemoDate	.\RegistrationCode.c	/^static UInt32 GetDemoDate(UInt32 code, const char *uid) {$/;"	f	file:
GetField	.\Gps.c	/^static char *GetField(char **ptr) {$/;"	f	file:
GetHighestPriorityAlarm	.\AlarmManager.c	/^static Int16 GetHighestPriorityAlarm(Boolean checkReturnedCounter) {$/;"	f	file:
GetLegWaypointID	.\CpInterface.c	/^static WaypointIDType GetLegWaypointID(CpLegWaypoint *wp) {$/;"	f	file:
GetNum	.\Gps.c	/^static UInt32 GetNum(char *str, UInt8 numChars) {$/;"	f	file:
GetObjectPtr	.\Platform.c	/^static void *GetObjectPtr(FormPtr form, UInt16 objectID)$/;"	f	file:
GetObjectPtr	.\Utils.c	/^void *GetObjectPtr(FormPtr form, UInt16 objectID)$/;"	f
GetObjectPtrFromActiveForm	.\Utils.c	/^void *GetObjectPtrFromActiveForm(UInt16 objectID)$/;"	f
GetObstacleAltitude	.\CpInterface.c	/^Int32 GetObstacleAltitude(const Waypoint *wp) {$/;"	f
GetPreferences	.\CpInterface.c	/^static CpPreferences *GetPreferences(void){$/;"	f	file:
GetSinCos	.\Utils.c	/^void GetSinCos(Int16 angle, Int32 *sn, Int32 *cs) {$/;"	f
GetStringFromList	.\Utils.c	/^const char *GetStringFromList(const char *str, UInt16 stringNo) {$/;"	f
GpsErrThrow	.\Gps.c	203;"	d	file:
GpsErrThrowIf	.\Gps.c	204;"	d	file:
GpsErrThrowIfExt	.\Gps.c	205;"	d	file:
HASH_SIZE	.\MapManager.c	247;"	d	file:
HASH_VALUE	.\MapManager.c	312;"	d	file:
HEADINGINDICATOR_H_INCLUDED	.\HeadingIndicator.h	16;"	d
HEIGHT	.\Polygon.c	18;"	d	file:
HSIDraw	.\HeadingIndicator.c	/^void HSIDraw(HSIType hsi, Int16 heading, Int16 bearing, $/;"	f
HSIFree	.\HeadingIndicator.c	/^void HSIFree(HSIType hsi) {$/;"	f
HSINew	.\HeadingIndicator.c	/^HSIType HSINew(Coord x, Coord y, Coord radius, Boolean highDensity){$/;"	f
HSIType	.\HeadingIndicator.h	/^typedef struct HSITypeStruct *HSIType;$/;"	t	typeref:struct:HSITypeStruct
HSITypeStruct	.\HeadingIndicator.c	/^struct HSITypeStruct {$/;"	s	file:
HSI_RADIUS	.\HeadingIndicator.h	23;"	d
HSI_SECTION	.\Constants.h	54;"	d
HandleAirspaceFilter	.\MapDialog.c	/^static void HandleAirspaceFilter(Int16 buttonNumber) {$/;"	f	file:
HandleCommonMenuEvent	.\Main.c	/^static Boolean HandleCommonMenuEvent(EventPtr event) {$/;"	f	file:
HandleCtlSelectEvent	.\DiversionForm.c	/^static Boolean HandleCtlSelectEvent(EventPtr event) {$/;"	f	file:
HandleCtlSelectEvent	.\EditWaypointForm.c	/^static Boolean HandleCtlSelectEvent(EventPtr event) {$/;"	f	file:
HandleCtlSelectEvent	.\FlightPlanForm.c	/^static Boolean HandleCtlSelectEvent(EventPtr event) {$/;"	f	file:
HandleCtlSelectEvent	.\GPSForm.c	/^static Boolean HandleCtlSelectEvent(EventPtr event) {$/;"	f	file:
HandleCtlSelectEvent	.\MapForm.c	/^static Boolean HandleCtlSelectEvent(EventPtr event) {$/;"	f	file:
HandleCtlSelectEvent	.\TimerForm.c	/^static Boolean HandleCtlSelectEvent(EventPtr event) {$/;"	f	file:
HandleDemoChecks	.\Main.c	/^Boolean HandleDemoChecks(UInt32 code, const char *uid) {$/;"	f
HandleFilter	.\MapDialog.c	/^static void HandleFilter(Int16 buttonNumber) {$/;"	f	file:
HandleKeyDownEvent	.\GPSForm.c	/^static Boolean HandleKeyDownEvent(EventPtr evt) {$/;"	f	file:
HandleKeyEvent	.\DiversionForm.c	/^static Boolean HandleKeyEvent(EventPtr event) {$/;"	f	file:
HandleKeyEvent	.\EditWaypointForm.c	/^static Boolean HandleKeyEvent(EventPtr e) {$/;"	f	file:
HandleKeyEvent	.\FlightPlanForm.c	/^static Boolean HandleKeyEvent(EventPtr event) {$/;"	f	file:
HandleKeyEvent	.\MainForm.c	/^static Boolean HandleKeyEvent(EventPtr event) {$/;"	f	file:
HandleKeyEvent	.\MapForm.c	/^static Boolean HandleKeyEvent(EventPtr event) {$/;"	f	file:
HandleListSelectEvent	.\FlightPlanForm.c	/^static Boolean HandleListSelectEvent(EventPtr event) {$/;"	f	file:
HandleMapQuickFindKey	.\MapForm.c	/^static Boolean HandleMapQuickFindKey(char inputChar, Boolean *updateScreen) {$/;"	f	file:
HandlePenDownEvent	.\MapForm.c	/^static Boolean HandlePenDownEvent(EventPtr event) {$/;"	f	file:
HandlePenEvent	.\MainForm.c	/^static Boolean HandlePenEvent(EventPtr event) {$/;"	f	file:
HandleProxSelectEvent	.\DiversionForm.c	/^static Boolean HandleProxSelectEvent(EventPtr e) {$/;"	f	file:
HeadingIndicatorModuleID	.\Modules.h	41;"	d
HeadingsPushButtonGroup	.\ResourceDefines.h	219;"	d
HighDensityCheck	.\MapForm.c	/^static void HighDensityCheck(void) {$/;"	f	file:
IDToDBNumber	.\WDManager.c	/^static Int16 IDToDBNumber(WDMDatabaseIDType id) {$/;"	f	file:
INSIDE	.\Utils.c	965;"	d	file:
INSTRUMENTS_H_INCLUDED	.\Instruments.h	9;"	d
INT32_1NM	.\GlobalTypes.h	429;"	d
INT32_TO_RAD	.\GlobalTypes.h	423;"	d
INTFP8	.\TerrainCore.h	19;"	d
IconBitmaps	.\ResourceDefines.h	431;"	d
IconMaskBitmaps	.\ResourceDefines.h	432;"	d
IconModuleID	.\Modules.h	25;"	d
IconWindows	.\Main.c	/^IconWindowsType IconWindows;$/;"	v
IconWindowsType	.\GlobalTypes.h	/^} IconWindowsType;$/;"	t	typeref:struct:__anon42
IdField	.\ResourceDefines.h	133;"	d
ImportAltitude	.\AsDatabase.c	/^static void ImportAltitude(const char *line, AltReferenceType *ar, UInt16 *alt) {$/;"	f	file:
ImportDialog	.\ResourceDefines.h	104;"	d
ImportRecord	.\AsDatabase.c	/^static AirspaceType *ImportRecord(PFFileRef f, Int16 *lat1, Int16 *lon1, Int16 *lat3, Int16 *lon3,$/;"	f	file:
ImportStatusField	.\ResourceDefines.h	105;"	d
IndexDatabaseType	.\CpInterface.c	63;"	d	file:
IndexDialog	.\ResourceDefines.h	324;"	d
IndexPtrs	.\WDManager.c	/^} IndexPtrs;$/;"	t	typeref:struct:__anon90	file:
IndexUpdateProgess	.\Main.c	/^static Int16 IndexUpdateProgess(Int16 j) {$/;"	f	file:
IndexingAlert	.\ResourceDefines.h	406;"	d
IndexingErrorAlert	.\ResourceDefines.h	410;"	d
InitDialog	.\SaveFlightDialog.c	/^static void InitDialog(FormPtr form) {$/;"	f	file:
InitDialog	.\SelectCopilotFlightDialog.c	/^static void InitDialog(FormPtr form) {$/;"	f	file:
InitProxDBSearch	.\WDManager.c	/^static void InitProxDBSearch(WDMSearchHandle sh) {$/;"	f	file:
InitialiseLeg	.\FlightPlan.c	/^static void InitialiseLeg(FlightPlanLegType *leg) {$/;"	f	file:
InsideThickenLine	.\Utils.c	/^void InsideThickenLine(Coord x1, Coord y1, Coord x2, Coord y2, Int16 thickness ) {$/;"	f
InstrumentModuleID	.\Modules.h	31;"	d
Int2FP	.\Fixed.h	71;"	d
Int64	.\GlobalTypes.h	/^typedef long long          Int64;$/;"	t
IntSinCos	.\Utils.c	/^void IntSinCos(Int16 angle, Int32 *sn, Int32 *cs) {$/;"	f
IntSqrt	.\Utils.c	/^Int32 IntSqrt(Int32 r) {$/;"	f
InvalidATZRadiusAlert	.\ResourceDefines.h	407;"	d
InvalidRunwayDimensionAlert	.\ResourceDefines.h	399;"	d
IsValidCode	.\RegistrationCode.c	85;"	d	file:
KEYPAD_H_INCLUDED	.\KeypadDialog.h	10;"	d
KM_PER_NM	.\GlobalTypes.h	399;"	d
KM_PER_NM	.\Gps.c	51;"	d	file:
KM_PER_RADIAN	.\GlobalTypes.h	404;"	d
KM_UNITS	.\GlobalTypes.h	28;"	d
KPButton0	.\ResourceDefines.h	327;"	d
KPButton1	.\ResourceDefines.h	328;"	d
KPButton2	.\ResourceDefines.h	329;"	d
KPButton3	.\ResourceDefines.h	330;"	d
KPButton4	.\ResourceDefines.h	331;"	d
KPButton5	.\ResourceDefines.h	332;"	d
KPButton6	.\ResourceDefines.h	333;"	d
KPButton7	.\ResourceDefines.h	334;"	d
KPButton8	.\ResourceDefines.h	335;"	d
KPButton9	.\ResourceDefines.h	336;"	d
KPDecimalButton	.\ResourceDefines.h	342;"	d
KPDeleteButton	.\ResourceDefines.h	337;"	d
KPInputField	.\ResourceDefines.h	343;"	d
KPUser1	.\ResourceDefines.h	338;"	d
KPUser2	.\ResourceDefines.h	339;"	d
KPUser3	.\ResourceDefines.h	340;"	d
KPUser4	.\ResourceDefines.h	341;"	d
KeypadCallback	.\TimerForm.c	/^Boolean KeypadCallback(UInt16 buttonID, float input) {$/;"	f
KeypadDialog	.\ResourceDefines.h	326;"	d
KeypadDialogHandleEvent	.\KeypadDialog.c	/^Boolean KeypadDialogHandleEvent(EventPtr event) {$/;"	f
KeypadDialogInit	.\KeypadDialog.c	/^void KeypadDialogInit(Boolean (*callback)(UInt16,float), float initialValue,$/;"	f
KmPushButton	.\ResourceDefines.h	203;"	d
LATEST_PREFS_VERSION	.\FMPreferences.c	26;"	d	file:
LEFT	.\Utils.c	963;"	d	file:
LOGDOUBLE	.\GlobalTypes.h	619;"	d
LOGDOUBLE	.\GlobalTypes.h	672;"	d
LOGENTRY	.\GlobalTypes.h	623;"	d
LOGENTRY	.\GlobalTypes.h	665;"	d
LOGEXIT	.\GlobalTypes.h	622;"	d
LOGEXIT	.\GlobalTypes.h	666;"	d
LOGFLOAT	.\GlobalTypes.h	618;"	d
LOGFLOAT	.\GlobalTypes.h	671;"	d
LOGINT16	.\GlobalTypes.h	617;"	d
LOGINT16	.\GlobalTypes.h	669;"	d
LOGINT32	.\GlobalTypes.h	616;"	d
LOGINT32	.\GlobalTypes.h	670;"	d
LOGLINE	.\GlobalTypes.h	621;"	d
LOGLINE	.\GlobalTypes.h	667;"	d
LOGSTR	.\GlobalTypes.h	614;"	d
LOGSTR	.\GlobalTypes.h	674;"	d
LOGTAG	.\GlobalTypes.h	620;"	d
LOGTAG	.\GlobalTypes.h	668;"	d
LOGTIMESTART	.\GlobalTypes.h	624;"	d
LOGTIMESTART	.\GlobalTypes.h	675;"	d
LOGTIMESTOP	.\GlobalTypes.h	625;"	d
LOGTIMESTOP	.\GlobalTypes.h	676;"	d
LOGUINT32	.\GlobalTypes.h	615;"	d
LOGUINT32	.\GlobalTypes.h	673;"	d
LOG_DISTANCE	.\TrackLog.c	259;"	d	file:
LatDegreesField	.\ResourceDefines.h	134;"	d
LatField	.\ResourceDefines.h	73;"	d
LatMinutesField	.\ResourceDefines.h	135;"	d
LatPushButtonGroup	.\ResourceDefines.h	167;"	d
LatitudeCompareFunc	.\WDManager.c	/^static Int16 LatitudeCompareFunc(void const *lat1, void const *lat2, $/;"	f	file:
LegStruct	.\CpInterface.c	/^}LegStruct ;$/;"	t	typeref:struct:__anon17	file:
LineSegmentType	.\AsDatabase.h	/^} LineSegmentType;$/;"	t	typeref:struct:__anon6
LineShift	.\Platform.c	/^static void LineShift(WinLineType *l, Int16 numLines, Boolean outside) {$/;"	f	file:
LoadAlternateAlert	.\ResourceDefines.h	417;"	d
LoadCoPilotFlight	.\SelectCopilotFlightDialog.c	/^static Boolean LoadCoPilotFlight(Int16 flightNum, Int16 importSegment) {$/;"	f	file:
LoadFlightMasterFlight	.\SelectCopilotFlightDialog.c	/^static Boolean LoadFlightMasterFlight(Int16 flightNum) {$/;"	f	file:
LogClose	.\Main.c	/^void LogClose(void) {$/;"	f
LogData	.\Main.c	/^static void LogData(const char *data) {$/;"	f	file:
LogDouble	.\Main.c	/^void LogDouble(const char *name, double val) {$/;"	f
LogEntry	.\Main.c	/^void LogEntry(const char *fname) {$/;"	f
LogExit	.\Main.c	/^void LogExit(const char *fname,UInt16 line) {$/;"	f
LogInt16	.\Main.c	/^void LogInt16(const char *name, Int16 val) {$/;"	f
LogInt32	.\Main.c	/^void LogInt32(const char *name, Int32 val) {$/;"	f
LogLine	.\Main.c	/^void LogLine(UInt16 lineNo) {$/;"	f
LogOpen	.\Main.c	/^void LogOpen(void) {$/;"	f
LogString	.\Main.c	/^void LogString(const char *name, const char *s) {$/;"	f
LogTag	.\Main.c	/^void LogTag(const char *tag) {$/;"	f
LogUInt32	.\Main.c	/^void LogUInt32(const char *name, UInt32 val) {$/;"	f
LonDegreesField	.\ResourceDefines.h	136;"	d
LonField	.\ResourceDefines.h	74;"	d
LonMinutesField	.\ResourceDefines.h	137;"	d
LonPopUpTrigger	.\ResourceDefines.h	138;"	d
LonPushButtonGroup	.\ResourceDefines.h	168;"	d
MAIN	.\Constants.h	44;"	d
MAINFORM_H	.\MainForm.h	2;"	d
MAINFORM_SECTION	.\Constants.h	62;"	d
MAPFORM_H_INCLUDED	.\MapForm.h	2;"	d
MAPICON_H_INCLUDED	.\MapIcon.h	9;"	d
MAPICON_SECTION	.\Constants.h	57;"	d
MAPLAST	.\MapManager.h	70;"	d
MAPMANAGER_H_INCLUDED	.\MapManager.h	9;"	d
MAPORIGIN	.\MapManager.h	69;"	d
MAP_AIRSPACE_H_INCLUDED	.\MapAirspace.h	7;"	d
MAP_DIALOG_H_INCLUDED	.\MapDialog.h	7;"	d
MAP_SECTION	.\Constants.h	73;"	d
MAX	.\GlobalTypes.h	588;"	d
MAXIDCHARS	.\GlobalTypes.h	17;"	d
MAXLON	.\TerrainType.c	26;"	d	file:
MAXSTRLEN	.\KeypadDialog.c	29;"	d	file:
MAX_AIRSPACES	.\MapManager.c	74;"	d	file:
MAX_AIRWAY_CHARS	.\MapAirspace.h	13;"	d
MAX_ALARMS	.\AlarmManager.c	21;"	d	file:
MAX_ALT_CHARS	.\MapAirspace.h	12;"	d
MAX_DBS	.\WDManager.c	32;"	d	file:
MAX_FILENAME_LENGTH	.\FlightDatabase.c	25;"	d	file:
MAX_FLIGHTS	.\SelectCopilotFlightDialog.c	79;"	d	file:
MAX_FLIGHT_DESCRIPTION	.\CpInterface.c	67;"	d	file:
MAX_FP_LEGS	.\FlightPlan.h	16;"	d
MAX_ICON_CHARS	.\MapIcon.h	20;"	d
MAX_IDENTCHARS	.\DiversionForm.c	69;"	d	file:
MAX_IDENT_CHARS	.\FlightPlan.h	17;"	d
MAX_INFO_LINE_CHARS	.\MapForm.c	250;"	d	file:
MAX_LABEL_CHARS	.\MapForm.c	248;"	d	file:
MAX_LINES	.\WPInfoDialog.c	79;"	d	file:
MAX_MAPICONS	.\MapManager.c	73;"	d	file:
MAX_MAP_ELEMENTS	.\MapManager.c	75;"	d	file:
MAX_MESSAGE_ITEMS	.\MessageDialog.h	15;"	d
MAX_NAMECHARS	.\DiversionForm.c	70;"	d	file:
MAX_PROXWAYPOINTS	.\DiversionForm.c	68;"	d	file:
MAX_RETURNS	.\AlarmManager.c	22;"	d	file:
MAX_SCALES	.\MapForm.c	154;"	d	file:
MAX_SND_QUEUE_DEPTH	.\Platform.c	177;"	d	file:
MAX_SYS_TEMP	.\WDManager.c	33;"	d	file:
MAX_TEMP	.\WDManager.c	34;"	d	file:
MAX_TIMERS	.\Utils.c	1410;"	d	file:
MAX_TRACKLINES	.\MapManager.c	45;"	d	file:
MAX_TRACKSIZE	.\TrackLog.c	22;"	d	file:
MAX_ZOOM	.\MainForm.c	177;"	d	file:
MDButton1	.\ResourceDefines.h	223;"	d
MDButton2	.\ResourceDefines.h	224;"	d
MDButton3	.\ResourceDefines.h	225;"	d
MDButton4	.\ResourceDefines.h	226;"	d
MDField	.\ResourceDefines.h	222;"	d
MENUHANDLER_SECTION	.\Constants.h	67;"	d
MESSAGE_DIALOG_H_INCLUDED	.\MessageDialog.h	10;"	d
METRES_PER_FOOT	.\GlobalTypes.h	400;"	d
METRE_UNITS	.\GlobalTypes.h	32;"	d
MIN	.\GlobalTypes.h	587;"	d
MI_PER_NM	.\GlobalTypes.h	398;"	d
MI_PER_RADIAN	.\GlobalTypes.h	405;"	d
MI_UNITS	.\GlobalTypes.h	27;"	d
MODALDIALOGS_SECTION	.\Constants.h	77;"	d
MONITOR_H_INCLUDED	.\MonitorDialog.h	7;"	d
MOREPREFS_H_INCLUDED	.\MorePreferencesDialog.h	7;"	d
MQF_MAX_CHARS	.\MapForm.c	299;"	d	file:
MTMaxType	.\MapForm.c	/^} MTMaxType;$/;"	t	typeref:struct:__anon66	file:
MagField	.\ResourceDefines.h	78;"	d
MagVarnField	.\ResourceDefines.h	143;"	d
MagneticPushButton	.\ResourceDefines.h	206;"	d
MainForm	.\ResourceDefines.h	61;"	d
MainFormDeinit	.\MainForm.c	/^static void MainFormDeinit(FormPtr form)$/;"	f	file:
MainFormHandleEvent	.\MainForm.c	/^Boolean MainFormHandleEvent(EventPtr event)$/;"	f
MainFormInit	.\MainForm.c	/^static void MainFormInit(FormPtr form)$/;"	f	file:
MainFormModuleID	.\Modules.c	15;"	d	file:
MainFormModuleID	.\Modules.h	15;"	d
MainMenu	.\ResourceDefines.h	6;"	d
MainModuleID	.\Modules.h	46;"	d
MapAirspaceCreate	.\MapAirspace.c	/^Boolean MapAirspaceCreate(const AirspaceType *as, MapAirspaceType *mas, AirspaceIDType id, UInt16 altUnits) {$/;"	f
MapAirspaceDeselect	.\MapAirspace.c	/^void MapAirspaceDeselect(MapAirspaceSelectedType *selection) {$/;"	f
MapAirspaceDraw	.\MapAirspace.c	/^Boolean MapAirspaceDraw(MapAirspaceType *mas, Boolean border, Boolean thick, Boolean highlight, Boolean label, $/;"	f
MapAirspaceDrawSelected	.\MapAirspace.c	/^void MapAirspaceDrawSelected(MapAirspaceSelectedType *selection) {$/;"	f
MapAirspaceInit	.\MapAirspace.c	/^void MapAirspaceInit(Int32 latReference, Int32 lonReference,$/;"	f
MapAirspaceSelect	.\MapAirspace.c	/^void MapAirspaceSelect(MapAirspaceType *mas, MapAirspaceSelectedType *selection,$/;"	f
MapAirspaceSelectedType	.\MapAirspace.h	/^} MapAirspaceSelectedType;$/;"	t	typeref:struct:__anon62
MapAirspaceType	.\MapAirspace.h	/^} MapAirspaceType;$/;"	t	typeref:struct:__anon61
MapBuild	.\MapManager.c	/^Boolean MapBuild(MapType map, UInt32 maxTicks)  {$/;"	f
MapCursorLeftButton	.\ResourceDefines.h	230;"	d
MapCursorRightButton	.\ResourceDefines.h	231;"	d
MapDeselect	.\MapManager.c	/^void MapDeselect(MapType map) {$/;"	f
MapDialog	.\ResourceDefines.h	241;"	d
MapDialogHandleEvent	.\MapDialog.c	/^Boolean MapDialogHandleEvent(EventPtr event) {$/;"	f
MapDialogInit	.\MapDialog.c	/^static void MapDialogInit() {$/;"	f	file:
MapDialogSaveSettings	.\MapDialog.c	/^static void MapDialogSaveSettings(void) {$/;"	f	file:
MapDraw	.\MapManager.c	/^Boolean MapDraw(MapType map,  Int32 maxTicks,$/;"	f
MapElementIndexType	.\MapManager.c	/^} MapElementIndexType;$/;"	t	typeref:struct:__anon74	file:
MapElementType	.\MapManager.c	/^typedef enum { melIcon, melAirspace, melAirway } MapElementType;$/;"	t	typeref:enum:__anon72	file:
MapForm	.\ResourceDefines.h	228;"	d
MapFormDeinit	.\MapForm.c	/^static void MapFormDeinit(FormPtr form) {$/;"	f	file:
MapFormHandleEvent	.\MapForm.c	/^Boolean MapFormHandleEvent(EventPtr event)$/;"	f
MapFormInit	.\MapForm.c	/^static void MapFormInit(FormPtr form) {$/;"	f	file:
MapFormModuleID	.\Modules.h	18;"	d
MapFree	.\MapManager.c	/^void MapFree(MapType map)  {$/;"	f
MapGetLatLon	.\MapManager.c	/^void MapGetLatLon(MapType map, Coord x, Coord y, Int32 *lat, Int32 *lon) {$/;"	f
MapGetScreenCoords	.\MapManager.c	/^Boolean MapGetScreenCoords(MapType map, Int32 lat, Int32 lon, Coord *x, Coord *y)  {$/;"	f
MapGetSelection	.\MapManager.c	/^MapSelection MapGetSelection(MapType map)  {$/;"	f
MapIconCreate	.\MapIcon.c	/^void MapIconCreate(MapIconType *ptr, Coord x, Coord y, const ShortWaypointType *wp) {$/;"	f
MapIconDraw	.\MapIcon.c	/^void MapIconDraw(MapIconType *icon, Boolean label, Coord x, Coord y, Int16 rotation) {$/;"	f
MapIconDrawSelected	.\MapIcon.c	/^void MapIconDrawSelected(MapIconType *icon, Coord x, Coord y, Int16 rotation) {$/;"	f
MapIconSelectedType	.\MapIcon.h	/^} MapIconSelectedType;$/;"	t	typeref:struct:__anon71
MapIconSetScale	.\MapIcon.c	/^void MapIconSetScale(Int32 scale, Coord atz) {$/;"	f
MapIconType	.\MapIcon.h	/^} MapIconType;$/;"	t	typeref:struct:__anon67
MapImport	.\MapForm.c	/^static void MapImport(Int16 dbNumber) {$/;"	f	file:
MapImportCallback	.\MapForm.c	/^static void MapImportCallback(const char *s) {$/;"	f	file:
MapInit	.\MapManager.c	/^MapType MapInit(Int32 lat, Int32 lon, Int32 scaling, Coord pxWidth, Coord pxHeight,$/;"	f
MapManagerModuleID	.\Modules.h	23;"	d
MapMenu	.\ResourceDefines.h	10;"	d
MapPanToAircraftButton	.\ResourceDefines.h	233;"	d
MapPanToSelectionButton	.\ResourceDefines.h	234;"	d
MapPanToWaypointButton	.\ResourceDefines.h	232;"	d
MapSelectByCoord	.\MapManager.c	/^MapSelection MapSelectByCoord(MapType map, Coord x, Coord y, Coord threshold)  {$/;"	f
MapSelectByReference	.\MapManager.c	/^Boolean MapSelectByReference(MapType map, MapSelection selection)  {$/;"	f
MapSelection	.\MapManager.h	/^typedef struct MapSelectionStructType *MapSelection;$/;"	t	typeref:struct:MapSelectionStructType
MapSelectionFree	.\MapManager.c	/^void MapSelectionFree(MapSelection ms) {$/;"	f
MapSelectionStructType	.\MapManager.h	/^struct MapSelectionStructType {$/;"	s
MapSetSelection	.\MapForm.c	/^void MapSetSelection(WaypointIDType wp) {$/;"	f
MapSettingType	.\GlobalTypes.h	/^} MapSettingType;$/;"	t	typeref:struct:__anon35
MapSourceType	.\MapManager.c	/^} MapSourceType;$/;"	t	typeref:enum:__anon73	file:
MapSpaceConstructor	.\MapForm.c	/^static void MapSpaceConstructor(Boolean initialise, UInt32 maxTicks) {$/;"	f	file:
MapType	.\MapManager.h	/^typedef struct MapTypeStruct *MapType;$/;"	t	typeref:struct:MapTypeStruct
MapTypeStruct	.\MapManager.c	/^struct MapTypeStruct {$/;"	s	file:
MapUnitTestHead	.\MapForm.c	/^UInt16 MapUnitTestHead(TestActionType action,UInt16 extra, HostFILE *f) {$/;"	f
MasModuleID	.\Modules.h	24;"	d
MathLibAlert	.\ResourceDefines.h	384;"	d
MaxCheck	.\MapForm.c	/^static void MaxCheck(Int32 value, MTMaxType *mt) {$/;"	f	file:
McATZCheckbox	.\ResourceDefines.h	266;"	d
McAfButton	.\ResourceDefines.h	242;"	d
McAirfieldBmp	.\ResourceDefines.h	435;"	d
McClassABmp	.\ResourceDefines.h	442;"	d
McClassAButton	.\ResourceDefines.h	249;"	d
McClassBBmp	.\ResourceDefines.h	443;"	d
McClassBButton	.\ResourceDefines.h	250;"	d
McClassCButton	.\ResourceDefines.h	251;"	d
McClassDButton	.\ResourceDefines.h	252;"	d
McClassEButton	.\ResourceDefines.h	253;"	d
McClassFButton	.\ResourceDefines.h	254;"	d
McClassGButton	.\ResourceDefines.h	255;"	d
McFilterAboveBmp	.\ResourceDefines.h	447;"	d
McFilterBelowBmp	.\ResourceDefines.h	448;"	d
McHeadingArcCheckbox	.\ResourceDefines.h	268;"	d
McIntersectButton	.\ResourceDefines.h	247;"	d
McIntersectionBmp	.\ResourceDefines.h	440;"	d
McLabelBmp	.\ResourceDefines.h	450;"	d
McLargeAfButton	.\ResourceDefines.h	243;"	d
McLargeAirfieldBmp	.\ResourceDefines.h	436;"	d
McLowerAirwayBmp	.\ResourceDefines.h	446;"	d
McLowerAirwayButton	.\ResourceDefines.h	258;"	d
McLowerAltButton	.\ResourceDefines.h	260;"	d
McNDBBmp	.\ResourceDefines.h	438;"	d
McNDBButton	.\ResourceDefines.h	245;"	d
McObstacleBmp	.\ResourceDefines.h	441;"	d
McObstacleButton	.\ResourceDefines.h	248;"	d
McOffBmp	.\ResourceDefines.h	449;"	d
McOtherBmp	.\ResourceDefines.h	439;"	d
McOtherButton	.\ResourceDefines.h	246;"	d
McRouteLineCheckbox	.\ResourceDefines.h	269;"	d
McSUASBmp	.\ResourceDefines.h	444;"	d
McSUASButton	.\ResourceDefines.h	256;"	d
McTerrainButton	.\ResourceDefines.h	261;"	d
McTerrainLevelLabel	.\ResourceDefines.h	263;"	d
McTerrainLevelSelector	.\ResourceDefines.h	264;"	d
McTerrainNormalBmp	.\ResourceDefines.h	452;"	d
McTerrainNormalWarnBmp	.\ResourceDefines.h	453;"	d
McTerrainWarnBmp	.\ResourceDefines.h	454;"	d
McTrackLogCheckbox	.\ResourceDefines.h	270;"	d
McTracklineCheckbox	.\ResourceDefines.h	265;"	d
McTrackupCheckbox	.\ResourceDefines.h	267;"	d
McUpperAirwayBmp	.\ResourceDefines.h	445;"	d
McUpperAirwayButton	.\ResourceDefines.h	257;"	d
McUpperAltButton	.\ResourceDefines.h	259;"	d
McVORBmp	.\ResourceDefines.h	437;"	d
McVORButton	.\ResourceDefines.h	244;"	d
MdCancelButton	.\ResourceDefines.h	190;"	d
MdOKButton	.\ResourceDefines.h	189;"	d
MdObstacleWarnings	.\ResourceDefines.h	184;"	d
MdTrackLog10s	.\ResourceDefines.h	188;"	d
MdTrackLog1s	.\ResourceDefines.h	186;"	d
MdTrackLog5s	.\ResourceDefines.h	187;"	d
MdTrackLogGroup	.\ResourceDefines.h	192;"	d
MdTrackLogOff	.\ResourceDefines.h	185;"	d
MdTurnAnticipation	.\ResourceDefines.h	183;"	d
MdVoiceVolume	.\ResourceDefines.h	191;"	d
MessageDialog	.\ResourceDefines.h	221;"	d
MessageDialogDataFree	.\MessageDialog.c	/^void MessageDialogDataFree(MessageDialogDataType *md) {$/;"	f
MessageDialogDataNew	.\MessageDialog.c	/^MessageDialogDataType *MessageDialogDataNew(const char *message, Int16 numItems,$/;"	f
MessageDialogDataType	.\MessageDialog.h	/^} MessageDialogDataType;$/;"	t	typeref:struct:__anon79
MessageDialogHandleEvent	.\MessageDialog.c	/^Boolean MessageDialogHandleEvent(EventPtr event) {$/;"	f
MessageDialogInit	.\MessageDialog.c	/^void MessageDialogInit(MessageDialogDataType *md) {$/;"	f
MessageDialogModuleID	.\Modules.h	30;"	d
MessageFlag	.\Main.c	/^PointType MessageFlag;$/;"	v
MessageFlagString	.\FMStrings.c	/^const char *MessageFlagString = "_MSG";$/;"	v
MfErrThrow	.\MainForm.c	90;"	d	file:
MiPushButton	.\ResourceDefines.h	202;"	d
MnAbout	.\ResourceDefines.h	14;"	d
MnClearTrackLog	.\ResourceDefines.h	47;"	d
MnCommandPopup	.\ResourceDefines.h	28;"	d
MnDayNight	.\ResourceDefines.h	46;"	d
MnDivertCancel	.\ResourceDefines.h	40;"	d
MnDivertCancelConfirmed	.\ResourceDefines.h	41;"	d
MnDivertEmergency	.\ResourceDefines.h	39;"	d
MnDivertTo	.\ResourceDefines.h	38;"	d
MnEditPlan	.\ResourceDefines.h	37;"	d
MnExit	.\ResourceDefines.h	58;"	d
MnFlight	.\ResourceDefines.h	31;"	d
MnFlightFlipFlop	.\ResourceDefines.h	56;"	d
MnFlightSave	.\ResourceDefines.h	54;"	d
MnFlightSaveAs	.\ResourceDefines.h	55;"	d
MnGotoGPS	.\ResourceDefines.h	21;"	d
MnGotoHSI	.\ResourceDefines.h	24;"	d
MnGotoMap	.\ResourceDefines.h	23;"	d
MnGotoPlan	.\ResourceDefines.h	25;"	d
MnGotoPrx	.\ResourceDefines.h	22;"	d
MnGotoTimer	.\ResourceDefines.h	26;"	d
MnImportBase	.\ResourceDefines.h	18;"	d
MnImportTFR	.\ResourceDefines.h	19;"	d
MnInformation	.\ResourceDefines.h	32;"	d
MnMapConfig	.\ResourceDefines.h	34;"	d
MnMonitoring	.\ResourceDefines.h	48;"	d
MnNewWaypoint	.\ResourceDefines.h	30;"	d
MnNextLeg	.\ResourceDefines.h	35;"	d
MnNextPage	.\ResourceDefines.h	42;"	d
MnNextSegment	.\ResourceDefines.h	16;"	d
MnOBS	.\ResourceDefines.h	33;"	d
MnObstacleMap	.\ResourceDefines.h	51;"	d
MnObstacleOff	.\ResourceDefines.h	52;"	d
MnPreferences	.\ResourceDefines.h	13;"	d
MnPreviousLeg	.\ResourceDefines.h	36;"	d
MnPreviousPage	.\ResourceDefines.h	43;"	d
MnPreviousSegment	.\ResourceDefines.h	17;"	d
MnShowAlarm	.\ResourceDefines.h	44;"	d
MnSimulation	.\ResourceDefines.h	15;"	d
MnTurnAnticipationOff	.\ResourceDefines.h	53;"	d
MnUndoEdit	.\ResourceDefines.h	49;"	d
MnVNAV	.\ResourceDefines.h	45;"	d
ModErrThrow	.\Platform.h	44;"	d
ModErrThrowIf	.\Platform.h	43;"	d
ModuleID	.\AlarmManager.c	42;"	d	file:
ModuleID	.\AlphaPadDialog.c	23;"	d	file:
ModuleID	.\AsDatabase.c	19;"	d	file:
ModuleID	.\Colours.c	11;"	d	file:
ModuleID	.\CpInterface.c	69;"	d	file:
ModuleID	.\DiversionForm.c	56;"	d	file:
ModuleID	.\DiversionMgr.c	32;"	d	file:
ModuleID	.\FlightDatabase.c	9;"	d	file:
ModuleID	.\FlightPlan.c	15;"	d	file:
ModuleID	.\FlightPlanForm.c	35;"	d	file:
ModuleID	.\Gps.c	27;"	d	file:
ModuleID	.\HeadingIndicator.c	25;"	d	file:
ModuleID	.\HeadingIndicator.c	42;"	d	file:
ModuleID	.\Instruments.c	18;"	d	file:
ModuleID	.\Main.c	88;"	d	file:
ModuleID	.\MapAirspace.c	13;"	d	file:
ModuleID	.\MapForm.c	58;"	d	file:
ModuleID	.\MapIcon.c	18;"	d	file:
ModuleID	.\MapManager.c	20;"	d	file:
ModuleID	.\MessageDialog.c	21;"	d	file:
ModuleID	.\NavManager.c	23;"	d	file:
ModuleID	.\NavManager.c	45;"	d	file:
ModuleID	.\OBSManager.c	10;"	d	file:
ModuleID	.\SelectCopilotFlightDialog.c	25;"	d	file:
ModuleID	.\TerrainType.c	20;"	d	file:
ModuleID	.\TextDialog.c	26;"	d	file:
ModuleID	.\TimerForm.c	28;"	d	file:
ModuleID	.\Utils.c	29;"	d	file:
ModuleID	.\WDManager.c	237;"	d	file:
ModuleID	.\WPInfoDialog.c	30;"	d	file:
MonitorDialog	.\ResourceDefines.h	182;"	d
MonitorDialogHandleEvent	.\MonitorDialog.c	/^Boolean MonitorDialogHandleEvent(EventPtr event) {$/;"	f
MorePreferencesDialog	.\ResourceDefines.h	301;"	d
MorePrefsButton	.\ResourceDefines.h	216;"	d
MorePrefsHelpString	.\ResourceDefines.h	427;"	d
MpATZRadiusField	.\ResourceDefines.h	311;"	d
MpAfSelector	.\ResourceDefines.h	307;"	d
MpAsphaltPushbutton	.\ResourceDefines.h	303;"	d
MpBothPushbutton	.\ResourceDefines.h	304;"	d
MpCancelButton	.\ResourceDefines.h	313;"	d
MpGrassPushbutton	.\ResourceDefines.h	302;"	d
MpLengthField	.\ResourceDefines.h	305;"	d
MpNDBSelector	.\ResourceDefines.h	309;"	d
MpOKButton	.\ResourceDefines.h	312;"	d
MpOtherSelector	.\ResourceDefines.h	310;"	d
MpSurfacePushbuttonGroup	.\ResourceDefines.h	314;"	d
MpVORSelector	.\ResourceDefines.h	308;"	d
MpWidthField	.\ResourceDefines.h	306;"	d
MyBinarySearch	.\Utils.c	/^Boolean MyBinarySearch (void const * baseP, $/;"	f
MyWinScreenLock	.\Utils.c	/^void MyWinScreenLock(void) {$/;"	f
MyWinScreenUnlock	.\Utils.c	/^void MyWinScreenUnlock(void) {$/;"	f
NAVMAN_H_INCLUDED	.\NavManager.h	10;"	d
NEWTASKTIMER	.\Utils.h	270;"	d
NMUnitValue	.\MapManager.h	58;"	d
NM_PER_RADIAN	.\GlobalTypes.h	403;"	d
NM_TO_FEET	.\GlobalTypes.h	410;"	d
NM_TO_RAD	.\GlobalTypes.h	415;"	d
NM_UNITS	.\GlobalTypes.h	26;"	d
NUMCOLS	.\TerrainType.c	488;"	d	file:
NUMTIMERS	.\GlobalTypes.h	120;"	d
NUM_AI_POINTS	.\AIGauge.c	47;"	d	file:
NUM_BUG_POINTS	.\HeadingIndicator.c	45;"	d	file:
NUM_FILTER_BUTTONS	.\MapDialog.c	37;"	d	file:
NUM_HASH_ELEMENTS	.\MapManager.c	246;"	d	file:
NUM_POINTER_POINTS	.\HeadingIndicator.c	44;"	d	file:
NUM_POINTS	.\HeadingIndicator.c	46;"	d	file:
NavDataType	.\NavManager.h	/^} NavDataType;$/;"	t	typeref:enum:__anon81
NavDrawField	.\NavManager.c	/^Coord NavDrawField(NavDataType field, Coord x, Coord y, UInt8 alignment, FontID font) {$/;"	f
NavGetDoubleValue	.\NavManager.c	/^double NavGetDoubleValue(NavDataType field) {$/;"	f
NavGetFloatValue	.\NavManager.c	/^float NavGetFloatValue(NavDataType field) {$/;"	f
NavGetIntValue	.\NavManager.c	/^Int32 NavGetIntValue(NavDataType field) {$/;"	f
NavGetStrValue	.\NavManager.c	/^const char *NavGetStrValue(NavDataType field) {$/;"	f
NavManagerModuleID	.\Modules.h	28;"	d
NavUpdatePosition	.\NavManager.c	/^void NavUpdatePosition(GPSPosnData *gps) {$/;"	f
NewWPCallback	.\Main.c	/^static Boolean NewWPCallback(Boolean validate, const Waypoint *wp, UInt16 size, Boolean deleted) {$/;"	f	file:
NmPushButton	.\ResourceDefines.h	201;"	d
NorthPushButton	.\ResourceDefines.h	144;"	d
OBSActive	.\OBSManager.c	/^Boolean OBSActive(void) { return obsActive; }$/;"	f
OBSCallback	.\Main.c	/^static Boolean OBSCallback(UInt16 button, float value) {$/;"	f	file:
OBSClear	.\OBSManager.c	/^void OBSClear(void) {$/;"	f
OBSGetBearing	.\OBSManager.c	/^float OBSGetBearing(void) {$/;"	f
OBSGetWaypoint	.\OBSManager.c	/^const Waypoint *OBSGetWaypoint(Int16 num) {$/;"	f
OBSInputPrompt	.\FMStrings.c	/^const char *OBSInputPrompt = "_Set OBS";$/;"	v
OBSLabelStrings	.\FMStrings.c	/^const char *OBSLabelStrings[4] = { "_OK", "_Resume", NULL, NULL };$/;"	v
OBSManagerModuleID	.\Modules.h	42;"	d
OBSSet	.\OBSManager.c	/^void OBSSet(const Waypoint *wp, float newOBSHeading, Boolean magnetic) {$/;"	f
OCEAN	.\TerrainType.c	74;"	d	file:
OKButton	.\ResourceDefines.h	140;"	d
OKString	.\FMStrings.c	/^const char *OKString = "_OK";$/;"	v
ObstacleMapOption	.\FMStrings.c	/^const char *ObstacleMapOption = "_Map";$/;"	v
ObstacleNearby	.\FMStrings.c	/^const char *ObstacleNearby = "_Near Obstacle(s)";$/;"	v
ObstacleOffOption	.\FMStrings.c	/^const char *ObstacleOffOption = "_Off";$/;"	v
OlBitmapDeinit	.\Utils.c	/^void OlBitmapDeinit(void) {$/;"	f
OlBitmapDraw	.\Utils.c	/^void OlBitmapDraw(Coord x1, Coord y1) {$/;"	f
OlBitmapInit	.\Utils.c	/^void OlBitmapInit(Coord width, Coord height) {$/;"	f
OlBitmapSetDrawing	.\Utils.c	/^void OlBitmapSetDrawing(void) {$/;"	f
OpenDatabase	.\AsDatabase.c	/^static AirspaceDBType *OpenDatabase(char *intName) {$/;"	f	file:
OpenGPSPort	.\Gps.c	/^static Err OpenGPSPort(BaudRate baudRate, Boolean resetTimers, BtLibDeviceAddressType *btID) {$/;"	f	file:
OriginalPlan	.\FMStrings.c	/^const char *OriginalPlan = "_Load Original Plan";$/;"	v
OutsideThickenLine	.\Utils.c	/^void OutsideThickenLine(Coord x1, Coord y1, Coord x2, Coord y2, Int16 thickness ) {$/;"	f
OutsideThickenLinePoints	.\Utils.c	/^void OutsideThickenLinePoints(Coord *x1, Coord *y1, Coord *x2, Coord *y2) {$/;"	f
PFCloseDatabase	.\Platform.c	/^void PFCloseDatabase(DmOpenRef ref) {$/;"	f
PFCloseFile	.\Platform.c	/^void PFCloseFile(PFFileRef f) {$/;"	f
PFDatabaseDates	.\Platform.c	/^void PFDatabaseDates(DmOpenRef db, UInt32 *createDate, UInt32 *modDate) {$/;"	f
PFDeinit	.\Platform.c	/^void PFDeinit(void) {$/;"	f
PFDeleteDatabase	.\Platform.c	/^void PFDeleteDatabase(const char *dbname) {$/;"	f
PFDrawThickLines	.\Platform.c	/^void PFDrawThickLines(WinLineType *lines, Int16 numLines,$/;"	f
PFErrExit	.\Platform.c	/^void \/*@noreturn@*\/ PFErrExit(UInt32 ev) {$/;"	f
PFFileDates	.\Platform.c	/^void PFFileDates(PFFileRef f, UInt32 *createDate, UInt32 *modDate) {$/;"	f
PFFileMode	.\Platform.h	/^typedef enum { pfFileReadOnly, pfFileReadWrite, pfFileTruncate } PFFileMode;$/;"	t	typeref:enum:__anon82
PFFileNumRecords	.\Platform.c	/^UInt16 PFFileNumRecords(PFFileRef f) {$/;"	f
PFFileRef	.\Platform.h	/^typedef struct PFFileRefStructType *PFFileRef;$/;"	t	typeref:struct:PFFileRefStructType
PFFileRefStructType	.\Platform.c	/^struct PFFileRefStructType {$/;"	s	file:
PFFileSeek	.\Platform.h	/^typedef enum { pfSeekStart, pfSeekEnd, pfSeekCurrent} PFFileSeek;$/;"	t	typeref:enum:__anon83
PFFileSize	.\Platform.c	/^UInt32 PFFileSize(PFFileRef f) {$/;"	f
PFGetDatabaseInfo	.\Platform.c	/^MemPtr PFGetDatabaseInfo(DmOpenRef ref) {$/;"	f
PFGetEvent	.\Platform.c	/^Boolean PFGetEvent(EventPtr event, UInt32 maxTicks) {$/;"	f
PFGetFileDatabaseInfo	.\Platform.c	/^MemPtr PFGetFileDatabaseInfo(PFFileRef f) {$/;"	f
PFGetSeconds	.\Platform.c	/^UInt32 PFGetSeconds(void) {$/;"	f
PFGetTicks	.\Platform.c	/^UInt32 PFGetTicks(void) {$/;"	f
PFInit	.\Platform.c	/^void PFInit(void) {$/;"	f
PFMalloc	.\Platform.c	/^void *PFMalloc(UInt32 size) {$/;"	f
PFMemFree	.\Platform.h	81;"	d
PFMemFree1	.\Platform.c	/^void PFMemFree1(\/*@only@*\/ \/*@out@*\/ \/*@null@*\/ void *ptr) {$/;"	f
PFNumDatabaseRecords	.\Platform.h	236;"	d
PFOpenDatabase	.\Platform.c	/^DmOpenRef PFOpenDatabase(const char *dbname, Boolean readOnly, Boolean createIfMissing) {$/;"	f
PFOpenFile	.\Platform.c	/^PFFileRef PFOpenFile(const char *filename, PFFileMode mode) {$/;"	f
PFPlaySound	.\Platform.c	/^void PFPlaySound(const char *filename, Int32 volume) {$/;"	f
PFQueryDatabase	.\Platform.c	/^MemHandle PFQueryDatabase(DmOpenRef ref, UInt16 recnum) {$/;"	f
PFReadFile	.\Platform.c	/^Int32 PFReadFile(PFFileRef f, void *dst, UInt32 maxSize) {$/;"	f
PFReadLine	.\Platform.c	/^Boolean PFReadLine(PFFileRef f, char *result) {$/;"	f
PFReadRecord	.\Platform.c	/^MemHandle PFReadRecord(PFFileRef f, UInt16 recNum) {$/;"	f
PFSafeMalloc	.\Platform.h	79;"	d
PFSeekFile	.\Platform.c	/^void PFSeekFile(PFFileRef f, PFFileSeek mode, Int32 whereTo) {$/;"	f
PFTimerHasExpired	.\Platform.c	/^Boolean PFTimerHasExpired(UInt32 startTime, UInt32 plusTicks) {$/;"	f
PFTruncateFile	.\Platform.c	/^void PFTruncateFile(PFFileRef f, UInt32 newLength) {$/;"	f
PFWriteFile	.\Platform.c	/^Int32 PFWriteFile(PFFileRef f, const void *data, UInt32 size) {$/;"	f
PI	.\GlobalTypes.h	397;"	d
PIRADIANS	.\GlobalTypes.h	19;"	d
PLATFORM_H	.\Platform.h	11;"	d
PLATFORM_SECTION	.\Constants.h	58;"	d
POLYGON_H_INCLUDED	.\Polygon.h	7;"	d
PREFERENCES_H	.\FMPreferences.h	7;"	d
PREFERENCES_H_INCLUDED	.\PreferencesDialog.h	10;"	d
PREFSET1	.\FMPreferences.c	18;"	d	file:
PREF_V5_01	.\FMPreferences.c	19;"	d	file:
PREF_V6_0	.\FMPreferences.c	20;"	d	file:
PREF_V7_0	.\FMPreferences.c	21;"	d	file:
PREF_V7_1	.\FMPreferences.c	23;"	d	file:
PREF_V7_2	.\FMPreferences.c	24;"	d	file:
PanButton	.\ResourceDefines.h	229;"	d
PanSetNextState	.\MapForm.c	313;"	d	file:
PanToCursor	.\FMStrings.c	/^const char *PanToCursor = "_Csr";$/;"	v
PanToWaypoint	.\FMStrings.c	/^const char *PanToWaypoint= "_Wpt";$/;"	v
PceNativeResourceCall	.\Utils.c	/^UInt32 PceNativeResourceCall(DmResType resType, DmResID resID,$/;"	f
PfErrThrowIf	.\Platform.c	17;"	d	file:
PilotMain	.\Main.c	/^UInt32 PilotMain(UInt16 launchCode, MemPtr launchParameters, $/;"	f
PlayRawVFSFile	.\Platform.c	/^static void PlayRawVFSFile(const char* filenameP, UInt32 sampleRate, SndStreamWidth sampleWidth, Int32 volume) {$/;"	f	file:
PolyPointType	.\Polygon.h	/^} PolyPointType;$/;"	t	typeref:struct:__anon86
PrefCancelButton	.\ResourceDefines.h	212;"	d
PrefGPSPopup	.\ResourceDefines.h	214;"	d
PrefGPSSourceList	.\ResourceDefines.h	215;"	d
PrefOKButton	.\ResourceDefines.h	211;"	d
PrefOneSecUpdateCheckbox	.\ResourceDefines.h	213;"	d
Preferences	.\Main.c	/^FMPreferencesType  Preferences;$/;"	v
PreferencesDialog	.\ResourceDefines.h	200;"	d
PreferencesEventHandler	.\PreferencesDialog.c	/^static Boolean PreferencesEventHandler(EventPtr event) {$/;"	f	file:
PrefsDataType	.\CpInterface.c	54;"	d	file:
PrefsHelpString	.\ResourceDefines.h	425;"	d
PrfReadPreferences	.\FMPreferences.c	/^Boolean PrfReadPreferences(FMPreferencesType *prefs) {$/;"	f
PrfSavePreferences	.\FMPreferences.c	/^void PrfSavePreferences(const FMPreferencesType *prefs) {$/;"	f
PromptForFlightCheckbox	.\ResourceDefines.h	209;"	d
ProxWaypointListType	.\DiversionForm.c	/^} ProxWaypointListType;$/;"	t	typeref:struct:__anon22	file:
ProxWaypointType	.\DiversionForm.c	/^} ProxWaypointType;$/;"	t	typeref:struct:__anon21	file:
Quadrant	.\CpInterface.c	/^typedef enum {north, west, south, east, noIntersection }Quadrant;$/;"	t	typeref:enum:__anon12	file:
RAD_PER_DEG	.\GlobalTypes.h	407;"	d
RAD_TO_DEG	.\GlobalTypes.h	412;"	d
RAD_TO_INT16	.\GlobalTypes.h	418;"	d
RAD_TO_INT32	.\GlobalTypes.h	419;"	d
RAD_TO_NM	.\GlobalTypes.h	416;"	d
RECORDSIZE	.\FlightDatabase.c	27;"	d	file:
REGCODEPRIME	.\Constants.h	20;"	d
REGCODEPRIME	.\Constants.h	32;"	d
REGCODEPRIME	.\Constants.h	35;"	d
REGISTRATION_CODE_H_INCLUDED	.\RegistrationCode.h	2;"	d
REJECT	.\Utils.c	968;"	d	file:
REQUESTED_BUFFER_SIZE	.\Platform.c	232;"	d	file:
RESULTSIZE	.\CpInterface.c	798;"	d	file:
REVOKE_COUNT	.\RegistrationCode.c	27;"	d	file:
RIGHT	.\Utils.c	964;"	d	file:
ROTATEPOINT	.\MapForm.c	119;"	d	file:
ROUND	.\MapAirspace.c	38;"	d	file:
RangeSettingDialog	.\ResourceDefines.h	316;"	d
RateCallback	.\VNAVDialog.c	/^static Boolean RateCallback(UInt16 button, float value) {$/;"	f	file:
ReadFromGPS	.\Gps.c	/^Boolean ReadFromGPS(void) {$/;"	f
ReadFromGarminGPS	.\Gps.c	/^Boolean ReadFromGarminGPS(void) {$/;"	f
ReadoutHeight	.\ResourceDefines.h	60;"	d
RecordEvent	.\Platform.c	/^static void RecordEvent(UInt32 timestamp, EventPtr event) {$/;"	f	file:
RegCodeFileName	.\FMPreferences.c	/^static const char *RegCodeFileName = "\/FM-RegCode.dat";$/;"	v	file:
RegcodeTesterAlert	.\ResourceDefines.h	421;"	d
RegistrationCodeField	.\ResourceDefines.h	210;"	d
RegistrationFailedAlert	.\ResourceDefines.h	386;"	d
RegistrationNagAlert	.\ResourceDefines.h	387;"	d
RegistrationSucceededAlert	.\ResourceDefines.h	385;"	d
ResetScan	.\DiversionForm.c	/^static void ResetScan(void) {$/;"	f	file:
ResizeForm	.\DiversionForm.c	/^static Boolean ResizeForm(FormPtr form) {$/;"	f	file:
ResizeForm	.\FlightPlanForm.c	/^static Boolean ResizeForm(FormPtr form) {$/;"	f	file:
ResizeForm	.\GPSForm.c	/^static Boolean ResizeForm(FormPtr form) {$/;"	f	file:
ResizeForm	.\MainForm.c	/^static Boolean ResizeForm(FormPtr form) {$/;"	f	file:
ResizeForm	.\MapForm.c	/^static Boolean ResizeForm(FormPtr form) {$/;"	f	file:
ResizeForm	.\TextDialog.c	/^static Boolean ResizeForm(FormPtr form) {$/;"	f	file:
ResizeForm	.\TimerForm.c	/^static Boolean ResizeForm(FormPtr form) {$/;"	f	file:
ReverseTransform	.\MapManager.c	/^static void ReverseTransform(Coord xi, Coord yi, Coord *xr, Coord *yr) {$/;"	f	file:
RomIncompatibleAlert	.\ResourceDefines.h	4;"	d
RomVersionCompatible	.\Utils.c	/^Err RomVersionCompatible(UInt32 requiredVersion, UInt16 launchFlags)$/;"	f
RouteDataType	.\CpInterface.c	56;"	d	file:
RouteStruct	.\CpInterface.c	/^}RouteStruct ;$/;"	t	typeref:struct:__anon18	file:
RsCancelButton	.\ResourceDefines.h	322;"	d
RsIconPopup	.\ResourceDefines.h	317;"	d
RsIconPopupList	.\ResourceDefines.h	318;"	d
RsLabelPopup	.\ResourceDefines.h	319;"	d
RsLabelPopupList	.\ResourceDefines.h	320;"	d
RsOKButton	.\ResourceDefines.h	321;"	d
RunMapTests	.\MapForm.c	/^static void RunMapTests(void) {$/;"	f	file:
RunSimulation	.\Gps.c	/^static void RunSimulation(void) {$/;"	f	file:
RunwayCompareFunc	.\CpInterface.c	/^static Int16 RunwayCompareFunc(void *p1, void *p2, Int32 other) {$/;"	f	file:
RunwaySurfaceType	.\GlobalTypes.h	/^typedef enum { surfEither, surfHard, surfGrass } RunwaySurfaceType;$/;"	t	typeref:enum:__anon32
RwyDimFieldValue	.\MorePreferencesDialog.c	/^Int16 RwyDimFieldValue(FormPtr frm, UInt16 fld) {$/;"	f
SAVE_FLIGHT_DIALOG_INCLUDED	.\SaveFlightDialog.h	8;"	d
SCFBlankButton	.\ResourceDefines.h	175;"	d
SCFCancelButton	.\ResourceDefines.h	174;"	d
SCFCoPilotButton	.\ResourceDefines.h	179;"	d
SCFDeleteButton	.\ResourceDefines.h	178;"	d
SCFFMButton	.\ResourceDefines.h	180;"	d
SCFFlightDBGroup	.\ResourceDefines.h	170;"	d
SCFHelpString	.\ResourceDefines.h	424;"	d
SCFInfoField	.\ResourceDefines.h	176;"	d
SCFNextSegmentButton	.\ResourceDefines.h	177;"	d
SCFOKButton	.\ResourceDefines.h	173;"	d
SECTION2	.\Constants.h	45;"	d
SECTION3	.\Constants.h	46;"	d
SECTION4	.\Constants.h	47;"	d
SECTION5	.\Constants.h	48;"	d
SECTION6	.\Constants.h	49;"	d
SECTION7	.\Constants.h	50;"	d
SECTION8	.\Constants.h	51;"	d
SELECTCOPILOTFLIGHT_H_INCLUDED	.\SelectCopilotFlightDialog.h	9;"	d
SETBIT	.\AsDatabase.c	781;"	d	file:
SET_HASH	.\MapManager.c	311;"	d	file:
SIMULATION_H	.\SimulationDialog.h	2;"	d
SINTABSIZE	.\Utils.c	395;"	d	file:
SKIP_FIELD	.\GlobalTypes.h	442;"	d
SKIP_FIELD	.\Platform.c	19;"	d	file:
SKIP_LINE	.\GlobalTypes.h	448;"	d
SKIP_TO_WHITESPACE	.\GlobalTypes.h	446;"	d
SKIP_WHITESPACE	.\GlobalTypes.h	444;"	d
STARTUP_SECTION	.\Constants.h	55;"	d
STORELINE	.\Utils.c	1142;"	d	file:
SWAP16	.\TerrainCore.c	24;"	d	file:
SWAP16	.\TerrainCore.c	30;"	d	file:
SWAP32	.\TerrainCore.c	25;"	d	file:
SWAP32	.\TerrainCore.c	31;"	d	file:
SatConst	.\Main.c	/^SatConstType SatConst = NULL;$/;"	v
SatConstDraw	.\Instruments.c	/^void SatConstDraw(SatConstType sc) {$/;"	f
SatConstFree	.\Instruments.c	/^void SatConstFree(SatConstType sc) {$/;"	f
SatConstNew	.\Instruments.c	/^SatConstType SatConstNew(GPSType *gps, Coord x, Coord y, Coord w, Coord h) {$/;"	f
SatConstType	.\Instruments.h	/^typedef struct SatConstTypeStruct *SatConstType;$/;"	t	typeref:struct:SatConstTypeStruct
SatConstTypeStruct	.\Instruments.c	/^struct SatConstTypeStruct {$/;"	s	file:
SatReadout	.\ResourceDefines.h	62;"	d
SaveFlightCancelButton	.\ResourceDefines.h	197;"	d
SaveFlightDialog	.\ResourceDefines.h	194;"	d
SaveFlightDialogHandleEvent	.\SaveFlightDialog.c	/^Boolean SaveFlightDialogHandleEvent(EventPtr event) {$/;"	f
SaveFlightFileNameField	.\ResourceDefines.h	195;"	d
SaveFlightModuleID	.\Modules.h	36;"	d
SaveFlightOKButton	.\ResourceDefines.h	196;"	d
ScanForWaypoints	.\DiversionForm.c	/^static Boolean ScanForWaypoints(UInt16 maxTicks, Boolean stopOnEvent) {$/;"	f	file:
ScanningAlert	.\ResourceDefines.h	401;"	d
Screen	.\Main.c	/^ScreenInfoType Screen;$/;"	v
ScreenInfoType	.\GlobalTypes.h	/^} ScreenInfoType;$/;"	t	typeref:struct:__anon41
SegmentTable	.\CpInterface.c	/^} SegmentTable;$/;"	t	typeref:struct:__anon14	file:
SelectCopilotFlightDialog	.\ResourceDefines.h	171;"	d
SelectFlightModuleID	.\Modules.h	37;"	d
SendUpdateEvent	.\SelectCopilotFlightDialog.c	/^void SendUpdateEvent(void) {$/;"	f
SerialNoString	.\Main.c	/^char *SerialNoString = NULL;$/;"	v
SerialPortAlert	.\ResourceDefines.h	393;"	d
SetAppColourPreferences	.\Colours.c	/^static void SetAppColourPreferences(AppColourPrefsType *ap) {$/;"	f	file:
SetControlLabels	.\VNAVDialog.c	/^static void SetControlLabels(void) {$/;"	f	file:
SetDegreesAndMinutes	.\EditWaypointForm.c	/^static void SetDegreesAndMinutes(FormPtr form, UInt16 degrees,UInt16 minutes, $/;"	f	file:
SetDisplayUnits	.\MainForm.c	/^void SetDisplayUnits(UInt8 units) {$/;"	f
SetFieldTextFromStr	.\Utils.c	/^Err SetFieldTextFromStr(FieldPtr field, const char *s, Boolean redraw) {$/;"	f
SetFlightPlanInfoField	.\SelectCopilotFlightDialog.c	/^static void SetFlightPlanInfoField(Int16 flightNum, Int16 segment, Boolean redraw) {$/;"	f	file:
SetGPSAltitudeSelector	.\VNAVDialog.c	/^static void SetGPSAltitudeSelector(void) {$/;"	f	file:
SetLegTrack	.\FlightPlan.c	/^static void SetLegTrack(FlightPlanType fp, Int16 legNum) {$/;"	f	file:
SetLegWaypoint	.\FlightPlan.c	/^static void SetLegWaypoint(FlightPlanLegWaypointType *lw, WaypointIDType id) {$/;"	f	file:
SetMapDialogStage	.\MapDialog.c	/^void SetMapDialogStage(void) {$/;"	f
SetPlanWaypointIDs	.\FlightPlan.c	/^static void SetPlanWaypointIDs(FlightPlanType fp) {$/;"	f	file:
SetTerrainRef	.\MapDialog.c	/^static void SetTerrainRef(void) {$/;"	f	file:
SetupDialog	.\MessageDialog.c	/^static void SetupDialog(FormPtr form) {$/;"	f	file:
SetupDialog	.\MorePreferencesDialog.c	/^static void SetupDialog(FormPtr frm) {$/;"	f	file:
SetupDirectTo	.\DiversionMgr.c	/^static void SetupDirectTo(Int16 legNum) {$/;"	f	file:
SetupFlightListBox	.\SelectCopilotFlightDialog.c	/^void SetupFlightListBox(Boolean redraw) {$/;"	f
SetupFlightPlanData	.\FlightPlanForm.c	/^static void SetupFlightPlanData(void) {$/;"	f	file:
SetupList	.\FlightPlanForm.c	/^static void SetupList(FormPtr form, Boolean redraw) {$/;"	f	file:
SetupListLines	.\WPInfoDialog.c	/^static UInt16 SetupListLines(void) {$/;"	f	file:
SetupNewDisplay	.\MapForm.c	/^static void SetupNewDisplay(void) {$/;"	f	file:
SetupOffRoute	.\DiversionMgr.c	/^static void SetupOffRoute(WaypointIDType newWp) { $/;"	f	file:
SetupPreferencesDialog	.\PreferencesDialog.c	/^static void SetupPreferencesDialog(FormPtr frm) {$/;"	f	file:
SetupScreenInfo	.\Main.c	/^void SetupScreenInfo(void) {$/;"	f
SetupScrollbar	.\DiversionForm.c	/^static void SetupScrollbar(void) {$/;"	f	file:
SetupWaypointHash	.\MapManager.c	/^static void SetupWaypointHash(void) {$/;"	f	file:
ShortWaypointType	.\WDManager.h	/^} ShortWaypointType;$/;"	t	typeref:struct:__anon96
ShowOrHideEditControls	.\MapForm.c	/^static void ShowOrHideEditControls(Boolean preview) {$/;"	f	file:
SimAltitudeField	.\ResourceDefines.h	99;"	d
SimCancelButton	.\ResourceDefines.h	102;"	d
SimHeadingField	.\ResourceDefines.h	98;"	d
SimOKButton	.\ResourceDefines.h	101;"	d
SimPushButton	.\ResourceDefines.h	72;"	d
SimRate	.\Gps.c	53;"	d	file:
SimSpeedField	.\ResourceDefines.h	100;"	d
SimpleResizeForm	.\Utils.c	/^Boolean SimpleResizeForm(FormPtr form, Boolean isModal) {$/;"	f
SimulationAlert	.\ResourceDefines.h	411;"	d
SimulationDialog	.\ResourceDefines.h	97;"	d
SimulationDialogHandleEvent	.\SimulationDialog.c	/^Boolean SimulationDialogHandleEvent(EventPtr event)$/;"	f
SimulationDialogModuleID	.\Modules.c	17;"	d	file:
SimulationDialogModuleID	.\Modules.h	20;"	d
SmErrThrow	.\SimulationDialog.c	48;"	d	file:
SouthPushButton	.\ResourceDefines.h	145;"	d
Stars	.\Main.c	/^const char *Stars[] = { "", "*", "**","***","****" };$/;"	v
StartPushButton	.\ResourceDefines.h	71;"	d
StopPushButton	.\ResourceDefines.h	70;"	d
StoreClipLine	.\MapAirspace.c	/^static Boolean StoreClipLine(WinLineType *line, Coord x1, Coord y1, Coord x2, Coord y2) {$/;"	f	file:
StoreIndexRecord	.\WDManager.c	/^static void StoreIndexRecord(DmOpenRef db, UInt16 recNum, MemPtr record) {$/;"	f	file:
Str2DOnly	.\FMStrings.c	/^const char *Str2DOnly = "_2-D ONLY";$/;"	v
StrAltitude	.\FMStrings.c	/^const char *StrAltitude = "_Altitude";$/;"	v
StrAppendIdent	.\FMStrings.c	/^const char *StrAppendIdent = "_APPEND %s";$/;"	v
StrBYNOTAM	.\FMStrings.c	/^const char *StrBYNOTAM = "_BY NOTAM";$/;"	v
StrBackCourse	.\FMStrings.c	/^const char *StrBackCourse = "_BC";$/;"	v
StrBlankFlight	.\FMStrings.c	/^ const char *StrBlankFlight = "_Blank";$/;"	v
StrCancelOBSFirst	.\FMStrings.c	/^const char *StrCancelOBSFirst = "_CANCEL OBS FIRST";$/;"	v
StrCheckingObstacleDB	.\FMStrings.c	/^const char *StrCheckingObstacleDB = "_ Checking Obstacle DB %d...";$/;"	v
StrChooseGPS	.\FMStrings.c	/^const char *StrChooseGPS = "_Choose GPS";$/;"	v
StrCreatingdatabaseStructure	.\FMStrings.c	/^const char *StrCreatingdatabaseStructure = "_Creating database structure";$/;"	v
StrDegrees	.\FMStrings.c	/^const char *StrDegrees = "_degrees";$/;"	v
StrDeleteIdent	.\FMStrings.c	/^const char *StrDeleteIdent = "_DELETE %s";$/;"	v
StrErrorDetectedPurgingDatabase	.\FMStrings.c	/^const char *StrErrorDetectedPurgingDatabase = "_Error detected - purging database";$/;"	v
StrFilenotfound	.\FMStrings.c	/^const char *StrFilenotfound = "_File not found";$/;"	v
StrGPS	.\FMStrings.c	/^const char *StrGPS = "_GPS";$/;"	v
StrGoto	.\FMStrings.c	/^const char *StrGoto = "_GOTO";$/;"	v
StrGotoIdent	.\FMStrings.c	/^const char *StrGotoIdent = "_GOTO %s";$/;"	v
StrH	.\FMStrings.c	/^const char *StrH = "_H";$/;"	v
StrHeading	.\FMStrings.c	/^const char *StrHeading = "_Heading";$/;"	v
StrHold	.\FMStrings.c	/^const char *StrHold = "_HOLD";$/;"	v
StrHz	.\FMStrings.c	/^const char *StrHz = "_Hz";$/;"	v
StrInitialiseMap	.\FMStrings.c	/^const char *StrInitialiseMap = "_LOAD PLAN TO INITIALISE";$/;"	v
StrLTMap	.\FMStrings.c	/^const char *StrLTMap = "_<map";$/;"	v
StrLTPan	.\FMStrings.c	/^const char *StrLTPan = "_<pan";$/;"	v
StrLoaded	.\FMStrings.c	/^const char *StrLoaded = "_LOADED";$/;"	v
StrLoadingCoPilotSystemDatabase	.\FMStrings.c	/^const char *StrLoadingCoPilotSystemDatabase = "_ Loading CoPilot System Database";$/;"	v
StrLoadingCoPilotUserDatabase	.\FMStrings.c	/^const char *StrLoadingCoPilotUserDatabase = "_ Loading CoPilot User Database";$/;"	v
StrMap	.\FMStrings.c	/^const char *StrMap = "_Map";$/;"	v
StrMapNum	.\FMStrings.c	/^const char *StrMapNum = "_Map %d";$/;"	v
StrMark	.\FMStrings.c	/^const char *StrMark = "_MRK";$/;"	v
StrNoFix	.\FMStrings.c	/^const char *StrNoFix = "_No Fix";$/;"	v
StrNoMemory	.\FMStrings.c	/^const char *StrNoMemory = "_No Memory";$/;"	v
StrNoPositionFix	.\FMStrings.c	/^const char *StrNoPositionFix = "_NO POSITION FIX";$/;"	v
StrOFF	.\FMStrings.c	/^const char *StrOFF = "_OFF";$/;"	v
StrPan	.\FMStrings.c	/^const char *StrPan = "_PAN";$/;"	v
StrPleaseWait	.\FMStrings.c	/^const char *StrPleaseWait = "_Please Wait";$/;"	v
StrPurgingDatabase	.\FMStrings.c	/^const char *StrPurgingDatabase = "_Purging database";$/;"	v
StrSFC	.\FMStrings.c	/^const char *StrSFC = "_SFC";$/;"	v
StrSearching	.\FMStrings.c	/^const char *StrSearching = "_Searching...";$/;"	v
StrSegmentNum	.\FMStrings.c	/^const char *StrSegmentNum = "_Segment: %d\/%d";$/;"	v
StrSetTimer	.\FMStrings.c	/^const char *StrSetTimer = "_Set Timer (hhmm or mm)";$/;"	v
StrSim	.\FMStrings.c	/^const char *StrSim = "_Sim";$/;"	v
StrSpeed	.\FMStrings.c	/^const char *StrSpeed = "_Speed";$/;"	v
StrStartAt	.\FMStrings.c	/^const char *StrStartAt = "_START AT %s";$/;"	v
StrToDouble	.\Utils.c	/^double StrToDouble(const char *str) {$/;"	f
StrTref	.\FMStrings.c	/^const char *StrTref = "_T-ref: %s%s";$/;"	v
StrUNLTD	.\FMStrings.c	/^const char *StrUNLTD = "_UNLTD";$/;"	v
StrV	.\FMStrings.c	/^const char *StrV = "_V";$/;"	v
StrVP	.\FMStrings.c	/^const char *StrVP = "_VP";$/;"	v
StrWA	.\FMStrings.c	/^const char *StrWA = "_WA";$/;"	v
StrWarnGPSNotDetected	.\FMStrings.c	/^const char *StrWarnGPSNotDetected = "_WARN: GPS NOT DETECTED";$/;"	v
StrWarnNoPosition	.\FMStrings.c	/^const char *StrWarnNoPosition = "_WARN: NO POSITION";$/;"	v
StringIsNumeric	.\Utils.c	/^Boolean StringIsNumeric(char *str) {$/;"	f
SurfaceSearchFunc	.\CpInterface.c	/^static Int16 SurfaceSearchFunc(void const *searchData, void const *arrayData, Int32 other) {$/;"	f	file:
TCElement	.\TerrainType.c	/^typedef UInt8 TCElement;$/;"	t	file:
TCFLOAT	.\TerrainType.c	89;"	d	file:
TERRAIN_CORE_INCLUDED	.\TerrainCore.h	10;"	d
TERRAIN_TYPE_H_INCLUDED	.\TerrainType.h	19;"	d
TEXTDIALOG_H_INCLUDED	.\TextDialog.h	11;"	d
TFRDatabaseType	.\Constants.h	42;"	d
TIMERFORM_H	.\TimerForm.h	2;"	d
TIMERFORM_SECTION	.\Constants.h	71;"	d
TIME_START	.\GlobalTypes.h	689;"	d
TIME_START	.\GlobalTypes.h	700;"	d
TIME_STOP	.\GlobalTypes.h	690;"	d
TIME_STOP	.\GlobalTypes.h	701;"	d
TLAddPoint	.\TrackLog.c	/^void TLAddPoint(GPSPosnData *gps)  {$/;"	f
TLClear	.\TrackLog.c	/^void TLClear(void)  {$/;"	f
TLClose	.\TrackLog.c	/^void TLClose(void)  {$/;"	f
TLErrThrowIf	.\TrackLog.c	49;"	d	file:
TLGetForwardPoint	.\TrackLog.c	/^Boolean TLGetForwardPoint(TLRefType *ref, TLInternalRecordType *result) {$/;"	f
TLGetNumNewEntries	.\TrackLog.c	/^Int16 TLGetNumNewEntries(TLRefType ref) {$/;"	f
TLGetPoint	.\TrackLog.c	/^Boolean TLGetPoint(TLRefType *ref, TLInternalRecordType *result)  {$/;"	f
TLInitGetPoint	.\TrackLog.c	/^TLRefType TLInitGetPoint(void) {$/;"	f
TLInternalRecordType	.\TrackLog.h	/^} TLInternalRecordType;$/;"	t	typeref:struct:__anon88
TLOpen	.\TrackLog.c	/^void TLOpen(void)  {$/;"	f
TLRefType	.\TrackLog.h	/^typedef Int16 TLRefType;$/;"	t
TLWriteBreak	.\TrackLog.c	/^void TLWriteBreak() {$/;"	f
TOP	.\Utils.c	961;"	d	file:
TRACE	.\GlobalTypes.h	687;"	d
TRACE	.\GlobalTypes.h	695;"	d
TRACKLOG_H_INCLUDED	.\TrackLog.h	13;"	d
TRACKUP_ORIGIN_Y	.\MapForm.c	90;"	d	file:
TRUE	.\TerrainType.c	22;"	d	file:
TaskTimer	.\Utils.c	/^Int32 TaskTimer(Int16 timerRef, Boolean done) {$/;"	f
Terrain	.\Main.c	/^TerrainType Terrain = NULL;$/;"	v
TerrainCoreParamType	.\TerrainCore.h	/^struct TerrainCoreParamType {$/;"	s
TerrainFree	.\TerrainType.c	/^void TerrainFree(TerrainType t) {$/;"	f
TerrainLoadPalette	.\TerrainType.c	/^void TerrainLoadPalette(TerrainType t, PFFileRef f, Boolean nightMode) {$/;"	f
TerrainModuleID	.\Modules.h	33;"	d
TerrainNew	.\TerrainType.c	/^TerrainType TerrainNew($/;"	f
TerrainPaletteType	.\TerrainType.h	/^typedef enum { terrainOff, terrainNormal, terrainNormalWarn, terrainWarn } TerrainPaletteType;$/;"	t	typeref:enum:__anon87
TerrainRefButtons	.\FMStrings.c	/^const char *TerrainRefButtons[4] = { "_AMSL", "_GPS", "_Cancel", NULL };$/;"	v
TerrainRefPrompt	.\FMStrings.c	/^const char *TerrainRefPrompt = "_Set Terrain Reference";$/;"	v
TerrainRender	.\TerrainType.c	/^void TerrainRender($/;"	f
TerrainRenderCore	.\TerrainCore.c	/^unsigned int TerrainRenderCore(const void *emulStateP, void *userData, Call68KFuncType *call68kf) {$/;"	f
TerrainRenderNorthUp	.\TerrainType.c	/^void TerrainRenderNorthUp($/;"	f
TerrainSetAlertAlt	.\TerrainType.c	/^void TerrainSetAlertAlt(TerrainType t, Int32 altInFeet) {$/;"	f
TerrainSetPalette	.\TerrainType.c	/^void TerrainSetPalette(TerrainType t, TerrainPaletteType type, const char *fileName, Boolean nightMode) {$/;"	f
TerrainSetPaletteEntry	.\TerrainType.c	/^void TerrainSetPaletteEntry(TerrainType t, Int32 altFrom, Int32 altTo, UInt8 r, UInt8 g, UInt8 b) {$/;"	f
TerrainType	.\TerrainType.h	/^typedef struct TerrainTypeStruct * TerrainType;$/;"	t	typeref:struct:TerrainTypeStruct
TerrainTypeStruct	.\TerrainType.c	/^struct TerrainTypeStruct {$/;"	s	file:
TestActionType	.\GlobalTypes.h	/^} TestActionType;$/;"	t	typeref:enum:__anon48
TextDialog	.\ResourceDefines.h	379;"	d
TextDialogField	.\ResourceDefines.h	380;"	d
TextDialogHandleEvent	.\TextDialog.c	/^Boolean TextDialogHandleEvent (EventPtr event)$/;"	f
TextDialogModuleID	.\Modules.h	26;"	d
TextDialogSet	.\TextDialog.c	/^void TextDialogSet(const char *in) {$/;"	f
TimeDisplayType	.\GlobalTypes.h	/^typedef enum {timeETE, timeETA, timeLocal, timeUTC, timeETV, timeETT } TimeDisplayType;$/;"	t	typeref:enum:__anon45
TimeModeStr	.\FMStrings.c	/^const char *TimeModeStr[] = { "_ETE","_ETA","_LOC","_UTC","_ETV", "_ETT" };$/;"	v
Timer1Button	.\ResourceDefines.h	154;"	d
Timer1LabelSelector	.\ResourceDefines.h	158;"	d
Timer1Seconds	.\ResourceDefines.h	162;"	d
Timer1Selector	.\ResourceDefines.h	150;"	d
Timer2Button	.\ResourceDefines.h	155;"	d
Timer2LabelSelector	.\ResourceDefines.h	159;"	d
Timer2Seconds	.\ResourceDefines.h	163;"	d
Timer2Selector	.\ResourceDefines.h	151;"	d
Timer3Button	.\ResourceDefines.h	156;"	d
Timer3LabelSelector	.\ResourceDefines.h	160;"	d
Timer3Seconds	.\ResourceDefines.h	164;"	d
Timer3Selector	.\ResourceDefines.h	152;"	d
Timer4Button	.\ResourceDefines.h	157;"	d
Timer4LabelSelector	.\ResourceDefines.h	161;"	d
Timer4Seconds	.\ResourceDefines.h	165;"	d
Timer4Selector	.\ResourceDefines.h	153;"	d
TimerButtons	.\FMStrings.c	/^const char *TimerButtons[4] = { "_Once", "_Recycle","_Count-up","_Cancel" };$/;"	v
TimerForm	.\ResourceDefines.h	149;"	d
TimerFormHandleEvent	.\TimerForm.c	/^Boolean TimerFormHandleEvent(EventPtr event)$/;"	f
TimerHasExpired	.\Utils.c	/^Boolean TimerHasExpired(UInt32 startTime, UInt32 plusTicks) {$/;"	f
TimerMenu	.\ResourceDefines.h	11;"	d
TimerMessage	.\FMStrings.c	/^const char *TimerMessage = "_%s timer expired";$/;"	v
TimerMessageButton	.\FMStrings.c	/^const char *TimerMessageButton = "_Timer";$/;"	v
TimerModes	.\FMStrings.c	/^const char *TimerModes[3] = { "_Stop", "_Flight", "_Run" };$/;"	v
TimerModuleID	.\Modules.h	34;"	d
TimerTicksLeft	.\Utils.c	/^UInt32 TimerTicksLeft(UInt32 startTime, UInt32 plusTicks) {$/;"	f
TimerType	.\GlobalTypes.h	/^} TimerType;$/;"	t	typeref:struct:__anon37
ToFlag	.\MainForm.c	158;"	d	file:
ToFromFlagFont	.\MainForm.c	160;"	d	file:
TrackLogModuleID	.\Modules.h	32;"	d
TrackLogSettingType	.\GlobalTypes.h	/^typedef enum { trackLogOff = 0, trackLog1s, trackLog5s, trackLog10s } TrackLogSettingType;$/;"	t	typeref:enum:__anon36
TruePushButton	.\ResourceDefines.h	205;"	d
TurnAnticipateOffOption	.\FMStrings.c	/^const char *TurnAnticipateOffOption="_Off";$/;"	v
TurnIn2MinutesString	.\FMStrings.c	/^const char *TurnIn2MinutesString = "_Approaching Turn";$/;"	v
TzAlert	.\ResourceDefines.h	398;"	d
UC	.\Main.c	/^UserConversionType UC;$/;"	v
UInt64	.\GlobalTypes.h	/^typedef unsigned long long UInt64;$/;"	t
UKSMALL	.\MapForm.c	2388;"	d	file:
UNSELECTED	.\DiversionForm.c	144;"	d	file:
UPGRADES_H_INCLUDED	.\Upgrades.h	11;"	d
UTILS_H	.\Utils.h	2;"	d
UTILS_SECTION	.\Constants.h	75;"	d
UnitsPushButtonGroup	.\ResourceDefines.h	218;"	d
UpdateAltitude	.\GPSForm.c	/^static void UpdateAltitude(void) {$/;"	f	file:
UpdateDisplay	.\DiversionForm.c	/^static void UpdateDisplay(void) {$/;"	f	file:
UpdateDisplay	.\FlightPlanForm.c	/^static void UpdateDisplay(void) {$/;"	f	file:
UpdateDisplay	.\GPSForm.c	/^static void UpdateDisplay(void) {$/;"	f	file:
UpdateDisplay	.\MainForm.c	/^static void UpdateDisplay(void) {$/;"	f	file:
UpdateDisplay	.\MapForm.c	/^static void UpdateDisplay(void) {$/;"	f	file:
UpdateForm	.\TimerForm.c	/^static void UpdateForm(Boolean full) {$/;"	f	file:
UpdateStateMachine	.\Gps.c	/^void UpdateStateMachine(Boolean gpsMessageReceived) {$/;"	f
UseCopilotFlightsCheckbox	.\ResourceDefines.h	208;"	d
UseDefaultCopilotFlight	.\Main.c	/^static void UseDefaultCopilotFlight(void) {$/;"	f	file:
UserConversionType	.\GlobalTypes.h	/^} UserConversionType;$/;"	t	typeref:struct:__anon44
UtilsModuleID	.\Modules.h	44;"	d
VALIDGPSFIX	.\GlobalTypes.h	593;"	d
VNAVAltType	.\FlightPlan.h	/^typedef enum { vnavAltAMSL, vnavAltAboveWP } VNAVAltType;$/;"	t	typeref:enum:__anon25
VNAVCalculations	.\NavManager.c	/^static void VNAVCalculations(float gpsSpeed, float gpsAltitude) {$/;"	f	file:
VNAVDIALOG_H_INCLUDED	.\VNAVDialog.h	7;"	d
VNAVDataType	.\FlightPlan.h	/^} VNAVDataType;$/;"	t	typeref:struct:__anon27
VNAVDialog	.\ResourceDefines.h	88;"	d
VNAVDialogHandleEvent	.\VNAVDialog.c	/^Boolean VNAVDialogHandleEvent(EventPtr event) {$/;"	f
VNAVIn2MinutesString	.\FMStrings.c	/^const char *VNAVIn2MinutesString = "_Approaching VNAV";$/;"	v
VNAVOptionString	.\FMStrings.c	/^const char *VNAVOptionString = "_VNAV";$/;"	v
VNAVRateType	.\FlightPlan.h	/^typedef enum { vnavRatePerMin, vnavRatePerMile, vnavDegrees } VNAVRateType;$/;"	t	typeref:enum:__anon26
VNAltButtons	.\FMStrings.c	/^const char *VNAltButtons[4] = { "_AMSL", "_Above", "_Cancel", NULL };$/;"	v
VNAltPrompt	.\FMStrings.c	/^const char *VNAltPrompt = "_Set Target Altitude";$/;"	v
VNByButtons	.\FMStrings.c	/^const char *VNByButtons[4] = { "_OK", "_Waypoint", "_Cancel", NULL };$/;"	v
VNByPrompt	.\FMStrings.c	/^const char *VNByPrompt = "_Set distance before";$/;"	v
VNGPSAltPrompt	.\FMStrings.c	/^const char *VNGPSAltPrompt = "_Set Barometric Altitude";$/;"	v
VNGPSButtons	.\FMStrings.c	/^const char *VNGPSButtons[4] = { "_AMSL", "_Reset", "_Cancel", NULL };$/;"	v
VNRateButtons	.\FMStrings.c	/^const char *VNRateButtons[2][4] = {$/;"	v
VNRatePrompt	.\FMStrings.c	/^const char *VNRatePrompt = "_Set Rate";$/;"	v
VSIDraw	.\Instruments.c	/^void VSIDraw(VSIType vsi, Int32 vs, Int32 requiredVS) {$/;"	f
VSIFree	.\Instruments.c	/^void VSIFree(VSIType vsi) {$/;"	f
VSINew	.\Instruments.c	/^VSIType VSINew(Coord x, Coord y, Coord width, Coord height, Boolean leftHanded, Int32 maxDeflection) {$/;"	f
VSIType	.\Instruments.h	/^typedef struct VSITypeStruct *VSIType;$/;"	t	typeref:struct:VSITypeStruct
VSITypeStruct	.\Instruments.c	/^struct VSITypeStruct {$/;"	s	file:
ValidRegistration	.\Main.c	/^UInt8              ValidRegistration = 0;$/;"	v
ValidateAndSave	.\SimulationDialog.c	/^static Boolean ValidateAndSave(void) {$/;"	f	file:
ValidateAndSetPrefs	.\MorePreferencesDialog.c	/^static Boolean ValidateAndSetPrefs(FormPtr frm) {$/;"	f	file:
ValidateAndStorePreferences	.\PreferencesDialog.c	/^static Boolean ValidateAndStorePreferences(FormPtr frm){$/;"	f	file:
ValidateAndTranslateInputs	.\EditWaypointForm.c	/^static Err ValidateAndTranslateInputs(void **record, UInt16 *recSize) {$/;"	f	file:
VnAltSelector	.\ResourceDefines.h	89;"	d
VnBySelector	.\ResourceDefines.h	91;"	d
VnCancelButton	.\ResourceDefines.h	93;"	d
VnClearButton	.\ResourceDefines.h	94;"	d
VnGPSAltSelector	.\ResourceDefines.h	95;"	d
VnOKButton	.\ResourceDefines.h	92;"	d
VnRateSelector	.\ResourceDefines.h	90;"	d
WARN_GPS_NOT_STARTED	.\MainForm.c	175;"	d	file:
WARN_NO_POSITION_FIX	.\MainForm.c	174;"	d	file:
WCFLOAT	.\TerrainType.h	60;"	d
WDMAddDB	.\WDManager.c	/^WDMDatabaseIDType WDMAddDB(WDMHandle ds, const char *dbname, const char *externalName, const char *compactDBName,$/;"	f
WDMDatabaseIDType	.\WDManager.h	/^typedef UInt32 WDMDatabaseIDType;$/;"	t
WDMDeleteWaypoint	.\WDManager.c	/^Boolean WDMDeleteWaypoint(WDMHandle ds, WaypointIDType wpID) {$/;"	f
WDMFree	.\WDManager.c	/^void WDMFree(WDMHandle ds) {$/;"	f
WDMFreeSearch	.\WDManager.c	/^void WDMFreeSearch(WDMSearchHandle \/*@out@*\/ \/*@only@*\/ sh) {$/;"	f
WDMGetProxWaypoint	.\WDManager.c	/^ShortWaypointType *WDMGetProxWaypoint(WDMSearchHandle sh, Int32 maxRange) {$/;"	f
WDMGetShortWaypoint	.\WDManager.c	/^ShortWaypointType *WDMGetShortWaypoint(WDMHandle ds, WaypointIDType wpID) {$/;"	f
WDMGetWaypoint	.\WDManager.c	/^Waypoint *WDMGetWaypoint(WDMHandle ds, WaypointIDType wpID) {$/;"	f
WDMGetWaypointByUniqueID	.\WDManager.c	/^WaypointIDType WDMGetWaypointByUniqueID(WDMHandle ds, WDMDatabaseIDType db, UInt32 uniqueID)  {$/;"	f
WDMGetWaypointDatabase	.\WDManager.c	/^WaypointIDType WDMGetWaypointDatabase(WaypointIDType wpID) {$/;"	f
WDMGetWaypointFromDB	.\WDManager.c	/^Waypoint *WDMGetWaypointFromDB(WDMHandle ds, WDMDatabaseIDType dbID,$/;"	f
WDMGetWaypointType	.\WDManager.c	/^WaypointClassType WDMGetWaypointType(const Waypoint *wp) {$/;"	f
WDMHandle	.\WDManager.h	/^typedef struct WDMHandleStructType * WDMHandle;$/;"	t	typeref:struct:WDMHandleStructType
WDMHandleStructType	.\WDManager.c	/^struct WDMHandleStructType {$/;"	s	file:
WDMIndexOK	.\WDManager.c	/^Boolean WDMIndexOK(WDMHandle ds) {$/;"	f
WDMInitProxScan	.\WDManager.c	/^WDMSearchHandle WDMInitProxScan(WDMHandle ds, Int32 lat, Int32 lon, $/;"	f
WDMIntegrityCheck	.\WDManager.c	/^void WDMIntegrityCheck(WDMHandle ds) {$/;"	f
WDMIsExternal	.\WDManager.c	/^Boolean WDMIsExternal (WDMHandle ds, WDMDatabaseIDType dbid) {$/;"	f
WDMLoadDatabase	.\WDManager.c	/^extern Boolean WDMLoadDatabase(WDMHandle ds, WDMDatabaseIDType dbid, const char *filename) {$/;"	f
WDMModuleID	.\Modules.h	27;"	d
WDMMoveExternal	.\WDManager.c	/^Boolean WDMMoveExternal(WDMHandle ds, WDMDatabaseIDType dbid) {$/;"	f
WDMMoveInternal	.\WDManager.c	/^Boolean WDMMoveInternal(WDMHandle ds, WDMDatabaseIDType dbid) {$/;"	f
WDMNew	.\WDManager.c	/^WDMHandle WDMNew(void) {$/;"	f
WDMNewWaypoint	.\WDManager.c	/^Waypoint *WDMNewWaypoint(const char *ident, const char *name, Int32 lat, Int32 lon, float magVarn) {$/;"	f
WDMSaveDatabase	.\WDManager.c	/^Boolean WDMSaveDatabase(WDMHandle ds, WDMDatabaseIDType dbid, const char *filename) {$/;"	f
WDMSaveWaypoint	.\WDManager.c	/^WaypointIDType WDMSaveWaypoint(WDMHandle ds, WDMDatabaseIDType db, $/;"	f
WDMScanArea	.\WDManager.c	/^Boolean WDMScanArea(WDMHandle ds, WDMDatabaseIDType dbids, $/;"	f
WDMSearchForWaypointByLocation	.\WDManager.c	/^WaypointIDType WDMSearchForWaypointByLocation(WDMHandle ds, char *ident, Int32 lat, Int32 lon, Int32 range) {$/;"	f
WDMSearchHandle	.\WDManager.h	/^typedef struct WDMSearchStructType * WDMSearchHandle;$/;"	t	typeref:struct:WDMSearchStructType
WDMSearchStructType	.\WDManager.c	/^struct WDMSearchStructType {$/;"	s	file:
WDMUpdateIndex	.\WDManager.c	/^Boolean WDMUpdateIndex(WDMHandle ds, Int16 (*f)(Int16) ) {$/;"	f
WDM_H_INCLUDED	.\WDManager.h	9;"	d
WPDataset	.\Main.c	/^WDMHandle WPDataset;$/;"	v
WPINFO_H_INCLUDED	.\WPInfoDialog.h	13;"	d
WPInfoAllPushbutton	.\ResourceDefines.h	371;"	d
WPInfoDescField	.\ResourceDefines.h	370;"	d
WPInfoDialog	.\ResourceDefines.h	367;"	d
WPInfoDialogHandleEvent	.\WPInfoDialog.c	/^Boolean WPInfoDialogHandleEvent(EventPtr event)$/;"	f
WPInfoFormModuleID	.\Modules.c	16;"	d	file:
WPInfoFormModuleID	.\Modules.h	16;"	d
WPInfoFreqPushbutton	.\ResourceDefines.h	372;"	d
WPInfoILSPushbutton	.\ResourceDefines.h	374;"	d
WPInfoIdElevField	.\ResourceDefines.h	369;"	d
WPInfoListbox	.\ResourceDefines.h	368;"	d
WPInfoPushbuttonGroup	.\ResourceDefines.h	377;"	d
WPInfoRwyPushbutton	.\ResourceDefines.h	373;"	d
WPInfoSetWaypointInfo	.\WPInfoDialog.c	/^void WPInfoSetWaypointInfo(WaypointIDType wpID) {$/;"	f
WPPanMapButton	.\ResourceDefines.h	375;"	d
WRAPMAX	.\GlobalTypes.h	591;"	d
WarningGPSLost	.\ResourceDefines.h	67;"	d
WarningNoFix	.\ResourceDefines.h	66;"	d
WarningNotStarted	.\ResourceDefines.h	65;"	d
Waypoint	.\WDManager.h	/^typedef Waypoint_v4_0 Waypoint;$/;"	t
WaypointClassType	.\WDManager.h	/^} WaypointClassType;$/;"	t	typeref:enum:__anon94
WaypointField	.\ResourceDefines.h	64;"	d
WaypointIDType	.\WDManager.h	/^typedef UInt32 WaypointIDType;$/;"	t
Waypoint_v4_0	.\WDManager.h	/^} Waypoint_v4_0;$/;"	t	typeref:struct:__anon95
WestPushButton	.\ResourceDefines.h	146;"	d
WpIdErrorAlert	.\ResourceDefines.h	396;"	d
WpLatErrorAlert	.\ResourceDefines.h	394;"	d
WpLonErrorAlert	.\ResourceDefines.h	395;"	d
WpMagVarAlert	.\ResourceDefines.h	397;"	d
WriteInternal	.\TrackLog.c	/^static void WriteInternal(Int32 lat, Int32 lon) {$/;"	f	file:
_FIXED_H_INCLUDED	.\Fixed.h	8;"	d
_H	.\ModTemplate.h	7;"	d
a	.\FlightPlan.h	/^	FlightPlanLegWaypointType a;$/;"	m	struct:__anon29
aaLines	.\Colours.c	/^static const RGBColorType aaLines     = { 0, 255,255,255 };$/;"	v	file:
aaLines	.\GlobalTypes.h	/^	IndexedColorType aaLines;$/;"	m	struct:__anon40
aboveBottomReadoutY	.\MainForm.c	/^static const Coord aboveBottomReadoutY = 132;$/;"	v	file:
acDistance	.\CpInterface.c	/^	UInt32 acDistance;$/;"	m	struct:__anon15	file:
acTakeoffs	.\CpInterface.c	/^	UInt32 acTakeoffs;$/;"	m	struct:__anon15	file:
acTime	.\CpInterface.c	/^	UInt32 acTime;$/;"	m	struct:__anon15	file:
ack	.\AlarmManager.c	/^	Boolean ack;$/;"	m	struct:__anon1	file:
action	.\MessageDialog.h	/^	UInt16 action[MAX_MESSAGE_ITEMS];$/;"	m	struct:__anon79
activePlayback	.\Platform.c	/^static oeCallbackDataType *activePlayback = NULL; \/\/ communication semaphore$/;"	v	file:
adjust	.\Polygon.c	/^Coord adjust(FP14 val)$/;"	f
aiPoints	.\AIGauge.c	/^static PointType aiPoints[NUM_AI_POINTS];$/;"	v	file:
airIDs	.\MapManager.c	/^	AirspaceIDType *airIDs;$/;"	m	struct:MapTypeStruct	file:
aircraft	.\CpInterface.c	/^	UInt32 aircraft;$/;"	m	struct:__anon15	file:
aircraft	.\GlobalTypes.h	/^	WinHandle aircraft;$/;"	m	struct:__anon42
aircraftDim	.\GlobalTypes.h	/^	Coord aircraftDim;$/;"	m	struct:__anon42
airfield	.\DiversionForm.c	/^static enum { airfield = 0,vor,ndb,intersection,all } displayFilter = airfield;$/;"	e	enum:__anon23	file:
airfield	.\MapIcon.h	/^	ExtraAirfieldInfoType airfield;$/;"	m	union:__anon70
airfieldIcon	.\Colours.c	/^static const RGBColorType airfieldIcon = { 0, 200, 0, 200 };$/;"	v	file:
airfieldIcon	.\GlobalTypes.h	/^	IndexedColorType airfieldIcon;$/;"	m	struct:__anon40
airspace	.\Colours.c	/^static const RGBColorType airspace[7] = {$/;"	v	file:
airspace	.\GlobalTypes.h	/^	AirspaceClassType airspace;$/;"	m	struct:__anon35
airspace	.\GlobalTypes.h	/^	IndexedColorType airspace[7];$/;"	m	struct:__anon40
airspace	.\MapManager.c	/^	MapAirspaceType *airspace;$/;"	m	struct:MapTypeStruct	file:
airspace	.\MapManager.h	/^		AirspaceType *airspace;$/;"	m	union:MapSelectionStructType::__anon78
airspaceID	.\MapManager.h	/^		AirspaceIDType airspaceID;$/;"	m	union:MapSelectionStructType::__anon77
airspaceIndex	.\MapManager.c	/^	Int16  *airspaceIndex;$/;"	m	struct:MapTypeStruct	file:
airspaceLabels	.\GlobalTypes.h	/^	AirspaceClassType airspaceLabels;$/;"	m	struct:__anon35
airspaceLabels	.\MapManager.c	/^	AirspaceClassType airspaceTypes, airspaceLabels;$/;"	m	struct:MapTypeStruct	file:
airspaceOutline	.\Colours.c	/^static const RGBColorType airspaceOutline[8] = {$/;"	v	file:
airspaceOutline	.\GlobalTypes.h	/^	IndexedColorType airspaceOutline[8];$/;"	m	struct:__anon40
airspaceTypes	.\MapManager.c	/^	AirspaceClassType airspaceTypes, airspaceLabels;$/;"	m	struct:MapTypeStruct	file:
airw	.\CpInterface.c	/^typedef enum {airw, sid, star, approach} CpAirwayType;$/;"	e	enum:__anon13	file:
airway	.\Colours.c	/^static const RGBColorType airway = { 0, 128, 128, 128 };$/;"	v	file:
airway	.\CpInterface.c	/^	Char       airway[airwaySize+1];$/;"	m	struct:__anon17	file:
airway	.\GlobalTypes.h	/^	IndexedColorType airway;$/;"	m	struct:__anon40
airwayIdent	.\MapAirspace.h	/^	char  airwayIdent[MAX_AIRWAY_CHARS];$/;"	m	struct:__anon61
airwaySize	.\CpInterface.c	129;"	d	file:
airwayType	.\CpInterface.c	/^	CpAirwayType airwayType:3;$/;"	m	struct:__anon17	file:
alarm	.\AlarmManager.c	/^} alarm[MAX_ALARMS];$/;"	v	typeref:struct:__anon1
alarmAlert	.\AlarmManager.h	/^	alarmAlert $/;"	e	enum:__anon2
alarmMessage	.\AlarmManager.h	/^	alarmMessage, $/;"	e	enum:__anon2
alarmOff	.\AlarmManager.h	/^	alarmOff = 0, $/;"	e	enum:__anon2
alarmWarning	.\AlarmManager.h	/^	alarmWarning, $/;"	e	enum:__anon2
alertAltitudeIndex	.\TerrainType.c	/^	Int16 alertAltitudeIndex;	\/\/ If != -1, this is the index which represents$/;"	m	struct:TerrainTypeStruct	file:
all	.\DiversionForm.c	/^static enum { airfield = 0,vor,ndb,intersection,all } displayFilter = airfield;$/;"	e	enum:__anon23	file:
all	.\GlobalTypes.h	/^	WDMDatabaseIDType all;$/;"	m	struct:__anon34
all	.\WPInfoDialog.c	/^static enum {all = 0, frequencies, runways, ils} displayMode = all;$/;"	e	enum:__anon97	file:
altAgl	.\AsDatabase.h	/^	altAmsl, altAgl, altFL, altNotam$/;"	e	enum:__anon5
altAmsl	.\AsDatabase.h	/^	altAmsl, altAgl, altFL, altNotam$/;"	e	enum:__anon5
altError	.\NavManager.c	/^	Int32 altError;			\/\/ user units, above or below glideslope$/;"	m	struct:__anon80	file:
altFL	.\AsDatabase.h	/^	altAmsl, altAgl, altFL, altNotam$/;"	e	enum:__anon5
altNotam	.\AsDatabase.h	/^	altAmsl, altAgl, altFL, altNotam$/;"	e	enum:__anon5
altType	.\FlightPlan.h	/^	VNAVAltType altType;$/;"	m	struct:__anon27
alternateAvailable	.\CpInterface.c	/^static Boolean alternateAvailable;$/;"	v	file:
alternateLoaded	.\CpInterface.c	/^static Boolean alternateLoaded;$/;"	v	file:
alternateTime	.\CpInterface.c	/^static const UInt16 alternateTime = (UInt16)(-1);$/;"	v	file:
altitude	.\CpInterface.c	/^	double     altitude;$/;"	m	struct:__anon17	file:
altitude	.\FlightPlan.h	/^	float altitude; \/\/ in feet$/;"	m	struct:__anon29
altitude	.\FlightPlanForm.c	/^	Int32 altitude;$/;"	m	struct:__anon31	file:
altitude	.\GlobalTypes.h	/^	UInt16 altitude;	\/* 0=feet, 1=metres *\/$/;"	m	struct:__anon43
altitude	.\Gps.c	/^	float altitude;$/;"	m	struct:__anon52	file:
altitude	.\Gps.h	/^	float		altitude;	\/\/ corrected altitude$/;"	m	struct:__anon54
altitude	.\NavManager.c	/^	Int32 altitude; \/\/ user units$/;"	m	struct:__anon80	file:
altitudeConv	.\GlobalTypes.h	/^	float altitudeConv;$/;"	m	struct:__anon44
altitudeUnits	.\CpInterface.c	/^	UInt16 altitudeUnits;               \/\/ {ft, m}$/;"	m	struct:__anon19	file:
altitudeUnits	.\GlobalTypes.h	/^	const char *altitudeUnits;$/;"	m	struct:__anon44
appDefinedEvents	.\GlobalTypes.h	/^} appDefinedEvents;$/;"	t	typeref:enum:__anon46
appFlagY	.\MainForm.c	/^static const Coord appFlagY       = 120;$/;"	v	file:
appLaunchTime	.\Platform.c	/^static UInt32 appLaunchTime = 0;$/;"	v	file:
approach	.\CpInterface.c	/^typedef enum {airw, sid, star, approach} CpAirwayType;$/;"	e	enum:__anon13	file:
aptFilter	.\GlobalTypes.h	38;"	d
armUnits	.\CpInterface.c	/^	UInt16 armUnits;                    \/\/ {in, cm, metre}$/;"	m	struct:__anon19	file:
asSubTypeMask	.\AsDatabase.h	47;"	d
asTypeAirspace	.\AsDatabase.h	43;"	d
asTypeAirway	.\AsDatabase.h	44;"	d
asTypeClassA	.\AsDatabase.h	32;"	d
asTypeClassB	.\AsDatabase.h	33;"	d
asTypeClassBG	.\AsDatabase.h	42;"	d
asTypeClassC	.\AsDatabase.h	34;"	d
asTypeClassD	.\AsDatabase.h	35;"	d
asTypeClassE	.\AsDatabase.h	36;"	d
asTypeClassF	.\AsDatabase.h	37;"	d
asTypeClassG	.\AsDatabase.h	38;"	d
asTypeHighAirway	.\AsDatabase.h	40;"	d
asTypeLowAirway	.\AsDatabase.h	39;"	d
asTypeMask	.\AsDatabase.h	46;"	d
asTypeOther	.\AsDatabase.h	41;"	d
asTypeSUAS	.\AsDatabase.h	31;"	d
asdb	.\AsDatabase.c	/^static AirspaceDBType *asdb = NULL;$/;"	v	file:
assert	.\GlobalTypes.h	604;"	d
atz	.\Colours.c	/^static const RGBColorType atz   = { 0, 240,0,240 };$/;"	v	file:
atz	.\GlobalTypes.h	/^	IndexedColorType atz;$/;"	m	struct:__anon40
atzCosPlot	.\MapIcon.c	/^static Int16 atzCosPlot[ATZ_POINTS];$/;"	v	file:
atzRadius	.\GlobalTypes.h	/^	UInt16 atzRadius;$/;"	m	struct:__anon39
atzSinPlot	.\MapIcon.c	/^static Int16 atzSinPlot[ATZ_POINTS];$/;"	v	file:
autoReset	.\GlobalTypes.h	/^	Boolean autoReset;		\/\/ true if timer should reset to initialValue$/;"	m	struct:__anon37
autoStartGPS	.\GlobalTypes.h	/^	Boolean autoStartGPS;$/;"	m	struct:__anon39
azimuth	.\Gps.h	/^	Int16           azimuth[GPSNumSats+1];$/;"	m	struct:__anon55
b	.\FlightPlan.h	/^	FlightPlanLegWaypointType b;$/;"	m	struct:__anon29
b19200	.\Gps.c	/^	b19200,$/;"	e	enum:__anon50	file:
b4800	.\Gps.c	/^	b4800,$/;"	e	enum:__anon50	file:
b57600	.\Gps.c	/^	b57600$/;"	e	enum:__anon50	file:
backCourse	.\NavManager.c	/^	Boolean backCourse; \/\/ true if crsPB is the backcourse, i.e. AP > AB$/;"	m	struct:__anon80	file:
backCourseFlag	.\MainForm.c	/^static const PointType backCourseFlag = { 13+134\/2-35, 17+134*5\/8 };$/;"	v	file:
background	.\Colours.c	/^static const RGBColorType background = { 0, 255,255,255 };$/;"	v	file:
background	.\GlobalTypes.h	/^	IndexedColorType background;$/;"	m	struct:__anon40
bankAngle	.\NavManager.c	/^	float  bankAngle;			\/\/ angle of bank in degrees (-ve = left)$/;"	m	struct:__anon80	file:
barHeight	.\Instruments.c	/^	Coord barWidth, barHeight;	\/\/ signal bars$/;"	m	struct:SatConstTypeStruct	file:
barWidth	.\Instruments.c	/^	Coord barWidth, barHeight;	\/\/ signal bars$/;"	m	struct:SatConstTypeStruct	file:
barx	.\Instruments.c	/^	Coord barx, bary;			\/\/ x & y position of *bottom* of first bar$/;"	m	struct:SatConstTypeStruct	file:
bary	.\Instruments.c	/^	Coord barx, bary;			\/\/ x & y position of *bottom* of first bar$/;"	m	struct:SatConstTypeStruct	file:
bat	.\Gps.h	/^	GPSBattLevelData 	bat;$/;"	m	struct:__anon59
battLevel	.\Gps.h	/^	Int8 		battLevel;$/;"	m	struct:__anon56
bdryCursorX	.\MapAirspace.c	/^static Coord bdryCursorX, bdryCursorY;$/;"	v	file:
bdryCursorY	.\MapAirspace.c	/^static Coord bdryCursorX, bdryCursorY;$/;"	v	file:
bearing	.\DiversionForm.c	/^	Int16          bearing;$/;"	m	struct:__anon21	file:
bearingFrom	.\DiversionForm.c	/^	Int16          bearingFrom;$/;"	m	struct:__anon21	file:
bearingFrom	.\NavManager.c	/^	Int16 bearingFrom;	\/\/ degrees, user units$/;"	m	struct:__anon80	file:
bearingHotspot	.\MainForm.c	/^static RectangleType bearingHotspot;$/;"	v	file:
bearingTo	.\NavManager.c	/^	Int16 bearingTo;	\/\/ degrees, user units$/;"	m	struct:__anon80	file:
black	.\Colours.c	/^static const RGBColorType black        = { 0, 0,0,0};$/;"	v	file:
black	.\GlobalTypes.h	/^	IndexedColorType black;$/;"	m	struct:__anon40
blacks	.\Colours.c	/^static const UIColorTableEntries blacks[10] = {$/;"	v	file:
blankLat	.\GPSForm.c	/^static const char *blankLat="--\\260--.----'-";$/;"	v	file:
blankTime	.\MapForm.c	/^static const char          blankTime[] = "--:--";$/;"	v	file:
bluetoothID	.\GlobalTypes.h	/^	BtLibDeviceAddressType bluetoothID;$/;"	m	struct:__anon39
boldHeight	.\GlobalTypes.h	/^	Coord boldHeight;$/;"	m	struct:__anon41
bottomReadoutY	.\MainForm.c	/^static const Coord bottomReadoutY = 144;$/;"	v	file:
bounds	.\MapAirspace.h	/^	RectangleType bounds;$/;"	m	struct:__anon61
brightRed	.\Colours.c	/^static const RGBColorType brightRed     = { 0, 255, 48, 48 };$/;"	v	file:
buttons	.\KeypadDialog.c	/^static const char **buttons;$/;"	v	file:
cache	.\TerrainCore.h	/^	UInt8 *cache;$/;"	m	struct:TerrainCoreParamType
callbackFn	.\EditWaypointForm.c	/^static Boolean (*callbackFn)(Boolean validate, const Waypoint *wp, UInt16 size, Boolean deleted);$/;"	v	file:
cancelMessage	.\DiversionMgr.c	/^static char cancelMessage[128];	\/\/ message dialog uses this$/;"	v	file:
centreHotspot	.\MainForm.c	/^static RectangleType centreHotspot;$/;"	v	file:
classOther	.\Colours.c	/^static const RGBColorType classOther = { 0, 0, 0, 255 };$/;"	v	file:
classOther	.\GlobalTypes.h	/^	IndexedColorType classOther;$/;"	m	struct:__anon40
climbRateUnits	.\CpInterface.c	/^	UInt16 climbRateUnits;              \/\/ {ftPm, ftPs, mPm, mPs}$/;"	m	struct:__anon19	file:
clipBottom	.\MapManager.c	/^static Coord clipLeft, clipRight, clipTop, clipBottom;$/;"	v	file:
clipCount	.\MapAirspace.h	/^	Int8 clipCount;$/;"	m	struct:__anon61
clipLeft	.\MapManager.c	/^static Coord clipLeft, clipRight, clipTop, clipBottom;$/;"	v	file:
clipLimit	.\MapAirspace.c	/^static Coord clipLimit;$/;"	v	file:
clipLimitX	.\MapManager.c	/^	Coord clipLimitX;$/;"	m	struct:MapTypeStruct	file:
clipLimitY	.\MapManager.c	/^	Coord clipLimitY;$/;"	m	struct:MapTypeStruct	file:
clipRight	.\MapManager.c	/^static Coord clipLeft, clipRight, clipTop, clipBottom;$/;"	v	file:
clipTop	.\MapManager.c	/^static Coord clipLeft, clipRight, clipTop, clipBottom;$/;"	v	file:
col_dir_x	.\TerrainCore.h	/^	Int32 col_dir_x;  $/;"	m	struct:TerrainCoreParamType
col_dir_y	.\TerrainCore.h	/^	Int32 col_dir_y;$/;"	m	struct:TerrainCoreParamType
col_inc_x	.\TerrainCore.h	/^	Int32 col_inc_x;$/;"	m	struct:TerrainCoreParamType
col_inc_y	.\TerrainCore.h	/^	Int32 col_inc_y;		\/\/ controls for when to step through x & y down the screen$/;"	m	struct:TerrainCoreParamType
col_src_h	.\TerrainCore.h	/^	Int32 col_src_h;$/;"	m	struct:TerrainCoreParamType
col_src_w	.\TerrainCore.h	/^	Int32 col_src_w;		\/\/ width\/height of the source rectangle$/;"	m	struct:TerrainCoreParamType
col_src_x	.\TerrainCore.h	/^	Int32 col_src_x;$/;"	m	struct:TerrainCoreParamType
col_src_y	.\TerrainCore.h	/^	Int32 col_src_y;		\/\/ source x & y coords as we step down the screen$/;"	m	struct:TerrainCoreParamType
compact	.\WDManager.c	/^	enum { compact, external, internal } source;$/;"	e	enum:__anon91::__anon92	file:
compassTextY	.\MainForm.c	/^static const Coord compassTextY   = 37;$/;"	v	file:
complete	.\MapManager.c	/^	Boolean complete;	\/\/ set true when the map is finished being built$/;"	m	struct:MapTypeStruct	file:
cosine	.\Fixed.c	/^fp14 cosine[] =$/;"	v
cosine	.\MapManager.c	/^	Int32 sine, cosine;$/;"	m	struct:__anon75	file:
cosine	.\Utils.c	/^static const Int32 cosine[SINTABSIZE\/8+1] = { 131072, 131071, 131069, 131066, 131062, 131056, 131049, 131041, 131032, 131022, 131010, 130997, 130983, 130967, 130951, 130933, 130914, 130893, 130872, 130849, 130825, 130800, 130773, 130745, 130716, 130686, 130655, 130622, 130588, 130553, 130517, 130479, 130440, 130400, 130359, 130317, 130273, 130228, 130182, 130134, 130086, 130036, 129985, 129933, 129879, 129824, 129768, 129711, 129653, 129593, 129532, 129470, 129407, 129343, 129277, 129210, 129142, 129072, 129002, 128930, 128857, 128783, 128707, 128631, 128553, 128474, 128394, 128312, 128230, 128146, 128061, 127974, 127887, 127798, 127708, 127617, 127525, 127431, 127336, 127241, 127143, 127045, 126946, 126845, 126743, 126640, 126536, 126430, 126324, 126216, 126107, 125996, 125885, 125772, 125659, 125544, 125428, 125310, 125192, 125072, 124951, 124829, 124706, 124582, 124456, 124329, 124201, 124072, 123942, 123811, 123678, 123544, 123410, 123274, 123136, 122998, 122858, 122718, 122576, 122433, 122289, 122143, 121997, 121849, 121701, 121551, 121400, 121248, 121094, 120940, 120784, 120627, 120470, 120311, 120150, 119989, 119827, 119663, 119499, 119333, 119166, 118998, 118829, 118659, 118487, 118315, 118141, 117966, 117791, 117614, 117436, 117256, 117076, 116895, 116712, 116529, 116344, 116158, 115972, 115784, 115595, 115405, 115213, 115021, 114828, 114633, 114438, 114241, 114044, 113845, 113645, 113444, 113242, 113039, 112835, 112630, 112424, 112216, 112008, 111799, 111588, 111377, 111164, 110951, 110736, 110520, 110304, 110086, 109867, 109647, 109427, 109205, 108982, 108758, 108533, 108307, 108080, 107852, 107623, 107393, 107162, 106930, 106697, 106463, 106228, 105992, 105755, 105517, 105278, 105037, 104796, 104554, 104311, 104067, 103822, 103577, 103330, 103082, 102833, 102583, 102332, 102081, 101828, 101574, 101320, 101064, 100807, 100550, 100292, 100032, 99772, 99511, 99248, 98985, 98721, 98456, 98190, 97923, 97656, 97387, 97117, 96847, 96576, 96303, 96030, 95756, 95481, 95205, 94928, 94650, 94372, 94092, 93812, 93530, 93248, 92965, 92681 };$/;"	v	file:
coslat	.\MapManager.c	/^	double coslat;$/;"	m	struct:MapTypeStruct	file:
coslat	.\WDManager.c	/^	double coslat;$/;"	m	struct:WDMSearchStructType	file:
cost	.\CpInterface.c	/^	double cost[costItems];$/;"	m	struct:__anon15	file:
costItems	.\CpInterface.c	130;"	d	file:
costText	.\CpInterface.c	/^	char costText[costItems][1];$/;"	m	struct:__anon15	file:
costType	.\CpInterface.c	/^	UInt32 costType[costItems];$/;"	m	struct:__anon15	file:
countdown	.\GlobalTypes.h	/^	Boolean countdown;		\/\/ true if timer counts down$/;"	m	struct:__anon37
cpSystem	.\GlobalTypes.h	/^	WDMDatabaseIDType cpSystem;$/;"	m	struct:__anon34
cpUser	.\GlobalTypes.h	/^	WDMDatabaseIDType cpUser;$/;"	m	struct:__anon34
cpuWarn	.\MapForm.c	/^static Int16 cpuWarn = 2;$/;"	v	file:
crsAB	.\NavManager.c	/^	double crsAB; \/\/ radians, course from A to B$/;"	m	struct:__anon80	file:
crsBC	.\NavManager.c	/^	double crsBC;			\/\/ radians, course of next leg BC$/;"	m	struct:__anon80	file:
crsDB	.\NavManager.c	/^	double crsDB;   \/\/ radians, course from aircraft to B$/;"	m	struct:__anon80	file:
crsPB	.\NavManager.c	/^	double crsPB; \/\/ radians, course from P (along track) to B$/;"	m	struct:__anon80	file:
currBuffSize	.\Gps.c	/^static Int16 	currBuffSize;		\/* chars used in gpsMessageBuff *\/$/;"	v	file:
currCycleTicks	.\Gps.c	/^static UInt32	currCycleTicks;		\/* ticks read once at start of cycle *\/$/;"	v	file:
currentFlightIndex	.\CpInterface.c	/^	UInt16 currentFlightIndex;          \/\/ index of current flight$/;"	m	struct:__anon19	file:
currentLeg	.\FlightPlan.c	/^	Int16 currentLeg;$/;"	m	struct:FlightPlanType	file:
currentPlanSegment	.\CpInterface.c	/^	UInt16 currentPlanSegment;$/;"	m	struct:__anon15	file:
currentSelection	.\DiversionForm.c	/^static Int16 currentSelection = noListSelection;$/;"	v	file:
currentSource	.\MapManager.c	/^	MapSourceType currentSource;$/;"	m	struct:MapTypeStruct	file:
currentWbSegment	.\CpInterface.c	/^	UInt16 currentWbSegment;$/;"	m	struct:__anon15	file:
cycleCounter	.\Gps.c	/^static UInt16   cycleCounter = 0;$/;"	v	file:
darkBorder	.\Platform.h	/^enum { noBorder = -1, darkBorder = 256, lightBorder = 257 };$/;"	e	enum:__anon84
data	.\AlarmManager.c	/^	MessageDialogDataType *data;$/;"	m	struct:__anon1	file:
dataDisplay	.\Colours.c	/^static const RGBColorType dataDisplay = { 0, 0, 0, 0 };$/;"	v	file:
dataDisplay	.\GlobalTypes.h	/^	IndexedColorType dataDisplay;$/;"	m	struct:__anon40
day	.\Gps.h	/^	UInt16 day;$/;"	m	struct:__anon53
db	.\WDManager.c	/^	DatabaseType *db;$/;"	m	struct:WDMSearchStructType	file:
db	.\WDManager.c	/^	DatabaseType db[MAX_DBS];$/;"	m	struct:WDMHandleStructType	file:
dbids	.\WDManager.c	/^	WDMDatabaseIDType dbids;$/;"	m	struct:WDMSearchStructType	file:
defaultAircraft	.\CpInterface.c	/^	UInt32 defaultAircraft;             \/\/ uniqueId$/;"	m	struct:__anon19	file:
defaultPilot	.\CpInterface.c	/^	UInt32 defaultPilot;                \/\/ uniqueId$/;"	m	struct:__anon19	file:
defaultPlanType	.\CpInterface.c	/^	Int32  defaultPlanType;             \/\/ {canadian, american, icao}$/;"	m	struct:__anon19	file:
degreesCrsPB	.\NavManager.c	/^	Int16  degreesCrsPB; \/\/ degrees, user units (true\/magnetic)$/;"	m	struct:__anon80	file:
deltaAltitude	.\Gps.h	/^	float		deltaAltitude;  \/* altitude change in feet between RMC messages *\/$/;"	m	struct:__anon54
deltaHeading	.\Gps.h	/^	float		deltaHeading;   \/* heading change in degrees between RMC messages *\/$/;"	m	struct:__anon54
deltaTime	.\Gps.h	/^	float		deltaTime;	\/* secs between RMC messages. 0=invalid *\/$/;"	m	struct:__anon54
description	.\AsDatabase.h	/^	char description[1];$/;"	m	struct:__anon8
description	.\CpInterface.c	/^	char description[1];$/;"	m	struct:__anon15	file:
detail	.\HeadingIndicator.c	/^	Int16 detail;	\/\/ 0 = minimum, 3 = maximum$/;"	m	struct:HSITypeStruct	file:
dgnm	.\AvCalcs.c	/^      float gnm,hnm,dgnm,dhnm;$/;"	m	struct:__anon9	file:
dgnm	.\MagVarn.c	/^      float gnm,hnm,dgnm,dhnm;$/;"	m	struct:__anon60	file:
dhnm	.\AvCalcs.c	/^      float gnm,hnm,dgnm,dhnm;$/;"	m	struct:__anon9	file:
dhnm	.\MagVarn.c	/^      float gnm,hnm,dgnm,dhnm;$/;"	m	struct:__anon60	file:
dialBmp	.\AIGauge.c	/^static BitmapType *dialBmp;$/;"	v	file:
dialBmp	.\HeadingIndicator.c	/^	BitmapType *dialBmp;$/;"	m	struct:HSITypeStruct	file:
dialDiameter	.\AIGauge.c	/^static Coord     dialDiameter;$/;"	v	file:
dialMask	.\AIGauge.c	/^static BitmapType *dialMask;$/;"	v	file:
dialogStage	.\MapDialog.c	/^static Int16 dialogStage;$/;"	v	file:
disabled	.\DiversionForm.c	/^static enum { disabled, starting, scanning, waiting } scanState = disabled;$/;"	e	enum:__anon24	file:
disclaimerShown	.\Main.c	/^static Boolean disclaimerShown = false;$/;"	v	file:
displayFilter	.\DiversionForm.c	/^static enum { airfield = 0,vor,ndb,intersection,all } displayFilter = airfield;$/;"	v	typeref:enum:__anon23	file:
displayMap	.\MapForm.c	/^static MapType displayMap;$/;"	v	file:
displayMode	.\WPInfoDialog.c	/^static enum {all = 0, frequencies, runways, ils} displayMode = all;$/;"	v	typeref:enum:__anon97	file:
displayPalette	.\TerrainType.c	/^	UInt8 *displayPalette;		\/\/ palette used in the actual display$/;"	m	struct:TerrainTypeStruct	file:
distAB	.\NavManager.c	/^	double distAB; \/\/ length of leg, radians$/;"	m	struct:__anon80	file:
distAP	.\NavManager.c	/^	double distAP;	\/\/ along track distance$/;"	m	struct:__anon80	file:
distDB	.\NavManager.c	/^	double distDB;  \/\/ distance from craft to B, radians$/;"	m	struct:__anon80	file:
distPD	.\NavManager.c	/^	double distPD;  \/\/ track error in radians$/;"	m	struct:__anon80	file:
distance	.\FlightPlan.h	/^	float distance; \/\/ in radians$/;"	m	struct:__anon29
distance	.\FlightPlanForm.c	/^	float distance;$/;"	m	struct:__anon31	file:
distance	.\GlobalTypes.h	/^	UInt16 distance;	\/* 0=nm, 1=mi, 2=km *\/$/;"	m	struct:__anon43
distanceBefore	.\FlightPlan.h	/^	float distanceBefore; \/\/ in radians$/;"	m	struct:__anon27
distanceConv	.\GlobalTypes.h	/^	float distanceConv;$/;"	m	struct:__anon44
distanceTo	.\NavManager.c	/^	float   distanceTo; \/\/ user units$/;"	m	struct:__anon80	file:
distanceToTurn	.\NavManager.c	/^	float  distanceToTurn;	\/\/ in user units$/;"	m	struct:__anon80	file:
distanceToVNAV	.\NavManager.c	/^	float distanceToVNAV;	\/\/ user units.$/;"	m	struct:__anon80	file:
distanceUnits	.\CpInterface.c	/^	UInt16 distanceUnits;               \/\/ {nm, mi, km}$/;"	m	struct:__anon19	file:
distanceUnits	.\GlobalTypes.h	/^	const char *distanceUnits;$/;"	m	struct:__anon44
divActive	.\GlobalTypes.h	/^typedef enum { divNone=0, divActive, divEmergency } DiversionType;$/;"	e	enum:__anon47
divEmergency	.\GlobalTypes.h	/^typedef enum { divNone=0, divActive, divEmergency } DiversionType;$/;"	e	enum:__anon47
divNone	.\GlobalTypes.h	/^typedef enum { divNone=0, divActive, divEmergency } DiversionType;$/;"	e	enum:__anon47
diversionStartTime	.\DiversionMgr.c	/^static char diversionStartTime[8];	\/\/ (local) time that goto began$/;"	v	file:
drawReduced	.\MapManager.c	/^	Boolean drawReduced;$/;"	m	struct:MapTypeStruct	file:
ds	.\WDManager.c	/^	WDMHandle ds;$/;"	m	struct:WDMSearchStructType	file:
east	.\CpInterface.c	/^typedef enum {north, west, south, east, noIntersection }Quadrant;$/;"	e	enum:__anon12	file:
eastStr	.\Gps.h	/^	char		eastStr[13];$/;"	m	struct:__anon54
edge	.\Polygon.c	/^static void edge(edgeRec *table, PolyPointType *pt1, PolyPointType *pt2)$/;"	f	file:
edgeRec	.\Polygon.c	/^} edgeRec;$/;"	t	typeref:struct:__anon85	file:
editCursor	.\MapForm.c	/^static Int16 editCursor = 0;$/;"	v	file:
elementIdx	.\MapManager.c	/^	MapElementIndexType elementIdx[MAX_MAP_ELEMENTS];$/;"	m	struct:MapTypeStruct	file:
elevation	.\Gps.h	/^	Int16           elevation[GPSNumSats+1];$/;"	m	struct:__anon55
elevation	.\WDManager.h	/^	float  elevation; \/* feet *\/$/;"	m	struct:__anon95
end	.\AsDatabase.h	/^	Int16 start, end;$/;"	m	struct:__anon7
evtAlphaInput	.\GlobalTypes.h	/^	evtAlphaInput,$/;"	e	enum:__anon46
evtCrsOverride	.\GlobalTypes.h	/^	evtCrsOverride = (firstUserEvent + 2),$/;"	e	enum:__anon46
evtDivertActivate	.\GlobalTypes.h	/^	evtDivertActivate,$/;"	e	enum:__anon46
evtDivertCancel	.\GlobalTypes.h	/^	evtDivertCancel,$/;"	e	enum:__anon46
evtDivertEmergency	.\GlobalTypes.h	/^	evtDivertEmergency,$/;"	e	enum:__anon46
evtDivertReActivate	.\GlobalTypes.h	/^	evtDivertReActivate,$/;"	e	enum:__anon46
evtFlightPlanLoaded	.\GlobalTypes.h	/^	evtFlightPlanLoaded,$/;"	e	enum:__anon46
evtGPSAltFix	.\GlobalTypes.h	/^	evtGPSAltFix,$/;"	e	enum:__anon46
evtGPSAltFixLost	.\GlobalTypes.h	/^	evtGPSAltFixLost,$/;"	e	enum:__anon46
evtGPSFix	.\GlobalTypes.h	/^	evtGPSFix,$/;"	e	enum:__anon46
evtGPSFixLost	.\GlobalTypes.h	/^	evtGPSFixLost,$/;"	e	enum:__anon46
evtGPSPositionUpdate	.\GlobalTypes.h	/^	evtGPSPositionUpdate,$/;"	e	enum:__anon46
evtGPSSatUpdate	.\GlobalTypes.h	/^	evtGPSSatUpdate,$/;"	e	enum:__anon46
evtGPSSync	.\GlobalTypes.h	/^	evtGPSSync,$/;"	e	enum:__anon46
evtGPSSyncLost	.\GlobalTypes.h	/^	evtGPSSyncLost,$/;"	e	enum:__anon46
evtKeypadInput	.\GlobalTypes.h	/^	evtKeypadInput,$/;"	e	enum:__anon46
evtLastUser	.\GlobalTypes.h	/^	evtLastUser$/;"	e	enum:__anon46
evtMapConfigReq	.\GlobalTypes.h	/^	evtMapConfigReq ,$/;"	e	enum:__anon46
evtMapConfigUpdate	.\GlobalTypes.h	/^	evtMapConfigUpdate,$/;"	e	enum:__anon46
evtMapEditReq	.\GlobalTypes.h	/^	evtMapEditReq,$/;"	e	enum:__anon46
evtNewWPAdded	.\GlobalTypes.h	/^	evtNewWPAdded,$/;"	e	enum:__anon46
evtNextWaypoint	.\GlobalTypes.h	/^	evtNextWaypoint ,$/;"	e	enum:__anon46
evtPrevWaypoint	.\GlobalTypes.h	/^	evtPrevWaypoint ,$/;"	e	enum:__anon46
evtWaypointInfoReq	.\GlobalTypes.h	/^	evtWaypointInfoReq ,$/;"	e	enum:__anon46
executeTest	.\GlobalTypes.h	/^	executeTest$/;"	e	enum:__anon48
extDB	.\AsDatabase.c	/^	PFFileRef extDB;		\/\/ used if AS database is external$/;"	m	struct:__anon4	file:
extDB	.\WDManager.c	/^	PFFileRef extDB;$/;"	m	struct:__anon91	file:
extLog	.\TrackLog.c	/^static PFFileRef extLog;	\/\/ external log reference$/;"	v	file:
extRef	.\Platform.c	/^	FileRef extRef;$/;"	m	struct:PFFileRefStructType	file:
external	.\AsDatabase.c	/^	Boolean   external;		\/\/ true if AS database is external$/;"	m	struct:__anon4	file:
external	.\Platform.c	/^	Boolean external;$/;"	m	struct:PFFileRefStructType	file:
external	.\WDManager.c	/^	enum { compact, external, internal } source;$/;"	e	enum:__anon91::__anon92	file:
extra	.\AsDatabase.h	/^	UInt16 extra;$/;"	m	struct:__anon8
extra	.\WDManager.h	/^	UInt8 extra[5];$/;"	m	struct:__anon96
extra1	.\WDManager.c	/^	UInt16 *extra1;$/;"	m	struct:__anon90	file:
extra1IdxRec	.\WDManager.c	/^		extra1IdxRec = 5, extra2IdxRec = 6, lastIdxRec = 7};$/;"	e	enum:__anon89	file:
extra2	.\WDManager.c	/^	UInt16 *extra2;$/;"	m	struct:__anon90	file:
extra2IdxRec	.\WDManager.c	/^		extra1IdxRec = 5, extra2IdxRec = 6, lastIdxRec = 7};$/;"	e	enum:__anon89	file:
fast	.\Gps.h	/^	fast$/;"	e	enum:__anon58
fddBasic	.\GlobalTypes.h	/^typedef enum { fddOff = 0, fddBasic, fddFull } FlightDataDisplayType;$/;"	e	enum:__anon33
fddFull	.\GlobalTypes.h	/^typedef enum { fddOff = 0, fddBasic, fddFull } FlightDataDisplayType;$/;"	e	enum:__anon33
fddOff	.\GlobalTypes.h	/^typedef enum { fddOff = 0, fddBasic, fddFull } FlightDataDisplayType;$/;"	e	enum:__anon33
file	.\TerrainType.c	/^	PFFileRef file;					\/\/ terrain file$/;"	m	struct:TerrainTypeStruct	file:
fileMagic	.\FlightPlan.c	/^static const UInt32 fileMagic = 0x44115544;		\/\/ serial number for stack file$/;"	v	file:
fileRef	.\Platform.c	/^	FileRef      fileRef[MAX_SND_QUEUE_DEPTH];$/;"	m	struct:oeCallbackDataType	file:
filterButtonMap	.\MapDialog.c	/^static const UInt16 filterButtonMap[NUM_FILTER_BUTTONS] = {$/;"	v	file:
filters	.\MapDialog.c	/^static UInt16 *filters[NUM_FILTER_BUTTONS];$/;"	v	file:
finished	.\Platform.c	/^	Boolean      finished;$/;"	m	struct:oeCallbackDataType	file:
fiveNMPixels	.\MapForm.c	/^static Coord fiveNMPixels;$/;"	v	file:
fiveNMPixels	.\MapManager.c	/^	Coord fiveNMPixels;		\/\/ how many pixels represent 5nm$/;"	m	struct:MapTypeStruct	file:
fixType	.\Gps.h	/^	UInt8		fixType;$/;"	m	struct:__anon55
flightDB	.\FlightDatabase.c	/^static PFFileRef flightDB = NULL;$/;"	v	file:
flightDBVersion	.\CpInterface.c	/^static const UInt16 flightDBVersion = 7;$/;"	v	file:
flightDb	.\CpInterface.c	/^static DmOpenRef flightDb;$/;"	v	file:
flightDirectorRoll	.\NavManager.c	/^	float  flightDirectorRoll; 	\/\/ angle (degrees) to turn to intercept current leg$/;"	m	struct:__anon80	file:
flightNumbers	.\SelectCopilotFlightDialog.c	/^static UInt16 *flightNumbers = NULL;$/;"	v	file:
flightPlan	.\MapManager.c	/^	FlightPlanType flightPlan;		\/\/ reference to flight plan to show$/;"	m	struct:MapTypeStruct	file:
flightPlanData	.\FlightPlanForm.c	/^} flightPlanData[MAX_FP_LEGS];$/;"	v	typeref:struct:__anon31	file:
flightRecord	.\CpInterface.c	/^typedef enum {noType, flightRecord=321, routeRecord, wbRecord, planRecord }$/;"	e	enum:__anon10	file:
font	.\HeadingIndicator.c	/^	FontID font;$/;"	m	struct:HSITypeStruct	file:
fpSqrt1	.\Fixed.c	/^fpSqrt1(fp14 value)$/;"	f
fpSqrt2	.\Fixed.c	/^fpSqrt2(fp14 value)$/;"	f
fpVersion	.\MapForm.c	/^static Int16 fpVersion;$/;"	v	file:
fpVersion	.\NavManager.c	/^	Int16 fpVersion;$/;"	m	struct:__anon80	file:
frameWidth	.\Platform.c	/^	UInt16       frameWidth; \/\/ number of bytes in each sample frame$/;"	m	struct:oeCallbackDataType	file:
freq	.\MapIcon.h	/^	char *freq;$/;"	m	struct:__anon69
freqLen	.\MapIcon.h	/^	UInt16 freqLen;$/;"	m	struct:__anon69
frequencies	.\WPInfoDialog.c	/^static enum {all = 0, frequencies, runways, ils} displayMode = all;$/;"	e	enum:__anon97	file:
fromIdent	.\NavManager.c	/^	char fromIdent[MAX_IDENT_CHARS+1];$/;"	m	struct:__anon80	file:
fuelCost	.\CpInterface.c	/^	double fuelCost;$/;"	m	struct:__anon15	file:
fuelDensityUnits	.\CpInterface.c	/^	UInt16 fuelDensityUnits;            \/\/ {lbPgalUS, lbPgalImp, kgPL}$/;"	m	struct:__anon19	file:
funcLevel	.\Main.c	/^static UInt16 funcLevel = 0;$/;"	v	file:
garminLibRef	.\Gps.c	/^static UInt16 garminLibRef;$/;"	v	file:
gaugeWidth	.\MainForm.c	/^static const Coord gaugeWidth     = 134;$/;"	v	file:
gaugeX	.\MainForm.c	/^static const Coord gaugeX         = 13;$/;"	v	file:
gaugeY	.\MainForm.c	/^static const Coord gaugeY         = 17;$/;"	v	file:
geomag	.\AvCalcs.c	/^static void geomag(int *maxdeg)$/;"	f	file:
geomag	.\MagVarn.c	/^static void geomag(int *maxdeg)$/;"	f	file:
geomg1	.\AvCalcs.c	/^static void geomg1(float alt,float glat,float glon,float time,$/;"	f	file:
geomg1	.\MagVarn.c	/^static void geomg1(float alt,float glat,float glon,float time,$/;"	f	file:
glideSlopeRatio	.\NavManager.c	/^	float glideSlopeRatio;	\/\/ after VNAV capture point$/;"	m	struct:__anon80	file:
gnm	.\AvCalcs.c	/^      float gnm,hnm,dgnm,dhnm;$/;"	m	struct:__anon9	file:
gnm	.\MagVarn.c	/^      float gnm,hnm,dgnm,dhnm;$/;"	m	struct:__anon60	file:
gotoActive	.\FlightPlan.c	/^	Boolean gotoActive;$/;"	m	struct:FlightPlanType	file:
gotoLat	.\FlightPlan.c	/^	Int32 gotoLat, gotoLon;$/;"	m	struct:FlightPlanType	file:
gotoLon	.\FlightPlan.c	/^	Int32 gotoLat, gotoLon;$/;"	m	struct:FlightPlanType	file:
gotoMagVar	.\FlightPlan.c	/^	float gotoMagVar;$/;"	m	struct:FlightPlanType	file:
gps	.\Instruments.c	/^	GPSType   *gps;$/;"	m	struct:SatConstTypeStruct	file:
gps2d	.\Gps.c	/^	gps2d,$/;"	e	enum:__anon49	file:
gps3d	.\Gps.c	/^	gps3d,$/;"	e	enum:__anon49	file:
gpsAltCorrection	.\Gps.c	/^static float gpsAltCorrection = 0.0;$/;"	v	file:
gpsAltOffset	.\GlobalTypes.h	/^	Int16 gpsAltOffset;$/;"	m	struct:__anon39
gpsBaudRate	.\Gps.c	/^static BaudRate gpsBaudRate = b4800;$/;"	v	file:
gpsBluetooth	.\Gps.h	/^	gpsBluetooth, $/;"	e	enum:__anon57
gpsCard	.\Gps.h	/^	gpsCard, $/;"	e	enum:__anon57
gpsClie	.\Gps.h	/^	gpsClie,$/;"	e	enum:__anon57
gpsCradle	.\Gps.h	/^typedef enum { gpsCradle = 0, $/;"	e	enum:__anon57
gpsGGA	.\Gps.c	/^	gpsGGA,$/;"	e	enum:__anon51	file:
gpsGSA	.\Gps.c	/^	gpsGSA,$/;"	e	enum:__anon51	file:
gpsGSV	.\Gps.c	/^	gpsGSV,$/;"	e	enum:__anon51	file:
gpsGarmin	.\Gps.h	/^	gpsGarmin,$/;"	e	enum:__anon57
gpsHour	.\NavManager.c	/^	Int16 gpsHour, gpsMin, gpsSec;$/;"	m	struct:__anon80	file:
gpsInvGGA	.\Gps.c	/^	gpsInvGGA,$/;"	e	enum:__anon51	file:
gpsInvRMC	.\Gps.c	/^	gpsInvRMC,$/;"	e	enum:__anon51	file:
gpsLog	.\Gps.c	/^static PFFileRef gpsLog = NULL;$/;"	v	file:
gpsMessageBuff	.\Gps.c	/^static char 	gpsMessageBuff[4096];	\/* buffer for GPS messages *\/$/;"	v	file:
gpsMin	.\NavManager.c	/^	Int16 gpsHour, gpsMin, gpsSec;$/;"	m	struct:__anon80	file:
gpsModuleState	.\Gps.c	/^}gpsModuleState = gpsOff;$/;"	v	typeref:enum:__anon49	file:
gpsOff	.\Gps.c	/^	gpsOff, $/;"	e	enum:__anon49	file:
gpsPortId	.\Gps.c	/^static UInt16 	gpsPortId;		\/* serial port Id *\/$/;"	v	file:
gpsRMC	.\Gps.c	/^	gpsRMC,$/;"	e	enum:__anon51	file:
gpsST	.\Gps.c	/^	gpsST$/;"	e	enum:__anon51	file:
gpsSec	.\NavManager.c	/^	Int16 gpsHour, gpsMin, gpsSec;$/;"	m	struct:__anon80	file:
gpsSerial	.\Gps.h	/^	gpsSerial, $/;"	e	enum:__anon57
gpsSimulate	.\Gps.h	/^	gpsSimulate$/;"	e	enum:__anon57
gpsSource	.\GlobalTypes.h	/^	GPSSourceType gpsSource;$/;"	m	struct:__anon39
gpsSource	.\Gps.c	/^static GPSSourceType gpsSource;$/;"	v	file:
gpsSync	.\Gps.c	/^	gpsSync,$/;"	e	enum:__anon49	file:
gpsSyncing	.\Gps.c	/^	gpsSyncing,$/;"	e	enum:__anon49	file:
gpsTimeout	.\Gps.c	/^	gpsTimeout$/;"	e	enum:__anon49	file:
gpsUSB	.\Gps.h	/^	gpsUSB,$/;"	e	enum:__anon57
gpsUnknown	.\Gps.c	/^	gpsUnknown,$/;"	e	enum:__anon51	file:
green	.\Colours.c	/^static const RGBColorType green   = { 0, 0, 200, 0 };$/;"	v	file:
green	.\GlobalTypes.h	/^	IndexedColorType green;$/;"	m	struct:__anon40
ground	.\Colours.c	/^static const RGBColorType ground= { 0, 167,97,43 };$/;"	v	file:
ground	.\GlobalTypes.h	/^	IndexedColorType ground;$/;"	m	struct:__anon40
groundSpeed	.\NavManager.c	/^	float groundSpeed; \/\/ user units$/;"	m	struct:__anon80	file:
groundTime	.\CpInterface.c	/^	UInt16     groundTime;$/;"	m	struct:__anon17	file:
gsi	.\MainForm.c	/^static GSIType gsi;	\/\/ Glideslope indicator$/;"	v	file:
gsi	.\MapForm.c	/^static GSIType gsi;$/;"	v	file:
hardSurface	.\CpInterface.h	/^	Boolean hardSurface;$/;"	m	struct:__anon20
hardSurfaces	.\CpInterface.c	/^static const char * const hardSurfaces[] = {$/;"	v	file:
hdop	.\Gps.h	/^	float hdop;$/;"	m	struct:__anon55
heading	.\CpInterface.h	/^	UInt8 heading;$/;"	m	struct:__anon20
heading	.\GlobalTypes.h	/^	const char *heading;$/;"	m	struct:__anon44
heading	.\Gps.c	/^	float heading;$/;"	m	struct:__anon52	file:
heartBeat	.\Gps.h	/^	Boolean		heartBeat;$/;"	m	struct:__anon55
height	.\GlobalTypes.h	/^	Coord height, pixelHeight;$/;"	m	struct:__anon41
height	.\Instruments.c	/^	Coord x, y, width, height; \/\/ y is centre of VSI, height is 1\/2 height$/;"	m	struct:VSITypeStruct	file:
height	.\Instruments.c	/^	Coord x,y, width, height;	\/\/ y is centre of GSI, height is 1\/2 height$/;"	m	struct:GSITypeStruct	file:
height	.\TerrainCore.h	/^	Int32 height;$/;"	m	struct:TerrainCoreParamType
heightFP8	.\TerrainCore.h	/^	Int32 heightFP8;$/;"	m	struct:TerrainCoreParamType
highDensity	.\GlobalTypes.h	/^	Boolean highDensity;$/;"	m	struct:__anon41
highDensity	.\HeadingIndicator.c	/^	Boolean highDensity;$/;"	m	struct:HSITypeStruct	file:
hnm	.\AvCalcs.c	/^      float gnm,hnm,dgnm,dhnm;$/;"	m	struct:__anon9	file:
hnm	.\MagVarn.c	/^      float gnm,hnm,dgnm,dhnm;$/;"	m	struct:__anon60	file:
hostFile	.\Main.c	/^static HostFILE *hostFile;$/;"	v	file:
hour	.\Gps.h	/^	UInt8 hour;$/;"	m	struct:__anon53
hsi	.\MainForm.c	/^static HSIType hsi;	\/\/ horizontal situation indicator$/;"	v	file:
hsiScale	.\MainForm.c	/^static const float hsiScale[] = { 3.0, 2.5, 2.0, 1.5, 1.0 };$/;"	v	file:
hsiZoomLabel	.\MainForm.c	/^static const PointType hsiZoomLabel = { 13+134\/2+15, 17+134*5\/8 };$/;"	v	file:
hzFlagPos	.\MainForm.c	/^static const PointType hzFlagPos = { 100, 65 };$/;"	v	file:
iSqrt	.\Fixed.c	/^iSqrt(long value)$/;"	f
icon	.\MapIcon.h	/^	Int16 icon;$/;"	m	struct:__anon67
icon	.\MapIcon.h	/^	MapIconType       icon;$/;"	m	struct:__anon71
icon	.\MapManager.c	/^	MemHandle icon;$/;"	m	struct:MapTypeStruct	file:
iconDim	.\GlobalTypes.h	/^	Coord iconDim;$/;"	m	struct:__anon42
iconMasks	.\GlobalTypes.h	/^	WinHandle iconMasks;$/;"	m	struct:__anon42
iconOffset	.\DiversionForm.c	/^static Coord iconOffset = 0;$/;"	v	file:
icons	.\GlobalTypes.h	/^	WaypointClassType icons;$/;"	m	struct:__anon35
icons	.\GlobalTypes.h	/^	WinHandle icons;$/;"	m	struct:__anon42
id	.\DiversionForm.c	/^	WaypointIDType    id;$/;"	m	struct:__anon21	file:
id	.\FlightPlan.h	/^	WaypointIDType id;$/;"	m	struct:__anon28
id	.\MapAirspace.h	/^	AirspaceIDType id;$/;"	m	struct:__anon61
id	.\MapAirspace.h	/^	AirspaceIDType id;$/;"	m	struct:__anon62
id	.\MapIcon.h	/^	WaypointIDType    id;$/;"	m	struct:__anon71
id	.\MapIcon.h	/^	WaypointIDType id; $/;"	m	struct:__anon67
id	.\MapManager.h	/^	} id;$/;"	m	struct:MapSelectionStructType	typeref:union:MapSelectionStructType::__anon77
id	.\WDManager.c	/^	UInt16 *id;$/;"	m	struct:__anon90	file:
id	.\WDManager.c	/^	WDMDatabaseIDType id;$/;"	m	struct:__anon91	file:
idIdxRec	.\WDManager.c	/^enum { idIdxRec = 0, latIdxRec = 1, lonIdxRec = 2, typeIdxRec = 3, latLonIdxRec = 4, $/;"	e	enum:__anon89	file:
ident	.\DiversionForm.c	/^	char           ident[MAX_IDENTCHARS+1];$/;"	m	struct:__anon21	file:
ident	.\FlightPlan.h	/^	char ident[11];$/;"	m	struct:__anon28
ident	.\WDManager.h	/^	char   ident[1];$/;"	m	struct:__anon95
identOnly	.\DiversionForm.c	/^static Boolean identOnly = true;$/;"	v	file:
ils	.\WPInfoDialog.c	/^static enum {all = 0, frequencies, runways, ils} displayMode = all;$/;"	e	enum:__anon97	file:
importSegment	.\SelectCopilotFlightDialog.c	/^static Int16 importSegment = 0;$/;"	v	file:
importStatus	.\MapForm.c	/^static char *importStatus;$/;"	v	file:
inWaypoint	.\EditWaypointForm.c	/^static Waypoint *inWaypoint;$/;"	v	file:
index	.\MapManager.c	/^	Int16          index;$/;"	m	struct:__anon74	file:
index	.\WDManager.c	/^	IndexPtrs index;$/;"	m	struct:WDMSearchStructType	file:
index	.\WDManager.c	/^	IndexPtrs index;$/;"	m	struct:__anon91	file:
indexDB	.\WDManager.c	/^	DmOpenRef indexDB;$/;"	m	struct:__anon91	file:
indicatorY	.\MainForm.c	/^static const Coord indicatorY     = 65;$/;"	v	file:
info	.\MapIcon.h	/^	ExtraIconInfoType info;$/;"	m	struct:__anon71
infoWp	.\WPInfoDialog.c	/^static Waypoint *infoWp;$/;"	v	file:
initWait	.\MapForm.c	/^static enum { initWait, waitGoto, waitNoGoto, simpleWait } tapPlanState = initWait;$/;"	e	enum:__anon65	file:
initialChar	.\CpInterface.c	/^	Char   initialChar;                 \/\/ default initial ident char$/;"	m	struct:__anon19	file:
initialValue	.\GlobalTypes.h	/^	Int32 initialValue;		\/\/ value to re-initialise timer to if autoreset is true$/;"	m	struct:__anon37
initialised	.\CpInterface.c	/^static Boolean initialised = false;$/;"	v	file:
inputString	.\AlphaPadDialog.c	/^static char *inputString;$/;"	v	file:
inputString	.\KeypadDialog.c	/^static char inputString[MAXSTRLEN+1];$/;"	v	file:
int64	.\Fixed.h	/^typedef long long int64;$/;"	t
intDB	.\AsDatabase.c	/^	DmOpenRef intDB;		\/\/ used if AS database is internal$/;"	m	struct:__anon4	file:
intDB	.\WDManager.c	/^	DmOpenRef intDB;$/;"	m	struct:__anon91	file:
intRef	.\Platform.c	/^	FileHand intRef;$/;"	m	struct:PFFileRefStructType	file:
intTrackDB	.\TrackLog.c	/^static DmOpenRef intTrackDB = NULL;$/;"	v	file:
internal	.\WDManager.c	/^	enum { compact, external, internal } source;$/;"	e	enum:__anon91::__anon92	file:
internalDB	.\SelectCopilotFlightDialog.c	/^static Boolean internalDB = true;$/;"	v	file:
intersection	.\CpInterface.c	/^	double     intersection;$/;"	m	struct:__anon17	file:
intersection	.\DiversionForm.c	/^static enum { airfield = 0,vor,ndb,intersection,all } displayFilter = airfield;$/;"	e	enum:__anon23	file:
isCircle	.\MapAirspace.h	/^	Boolean isCircle;$/;"	m	struct:__anon61
kFrmNavHeaderFlagsAppFocusStartState	.\ResourceDefines.h	2;"	d
kFrmNavHeaderFlagsObjectFocusStartState	.\ResourceDefines.h	1;"	d
kOurMinVersion	.\Constants.h	85;"	d
keypadCallback	.\KeypadDialog.c	/^static Boolean (*keypadCallback)(UInt16,float);$/;"	v	file:
label	.\Colours.c	/^static const RGBColorType label = { 0, 0,0,0 };$/;"	v	file:
label	.\GlobalTypes.h	/^	IndexedColorType label;$/;"	m	struct:__anon40
label	.\GlobalTypes.h	/^	char label[8];$/;"	m	struct:__anon37
label	.\MapIcon.h	/^	char label[6];$/;"	m	struct:__anon67
labelHint	.\MapAirspace.h	/^	PointType labelHint;$/;"	m	struct:__anon61
labels	.\GlobalTypes.h	/^	WaypointClassType labels;$/;"	m	struct:__anon35
labels	.\MapDialog.c	/^static UInt16 *labels[NUM_FILTER_BUTTONS];$/;"	v	file:
landscape	.\GlobalTypes.h	/^	Boolean landscape;$/;"	m	struct:__anon41
largeBoldHeight	.\GlobalTypes.h	/^	Coord largeBoldHeight;$/;"	m	struct:__anon41
lastCommsTime	.\Gps.c	/^static UInt32	lastCommsTime;		\/* time in systicks of last comm $/;"	v	file:
lastDrawLat	.\MapManager.c	/^	Int32 lastDrawLat, lastDrawLon;$/;"	m	struct:MapTypeStruct	file:
lastDrawLon	.\MapManager.c	/^	Int32 lastDrawLat, lastDrawLon;$/;"	m	struct:MapTypeStruct	file:
lastFixTime	.\Gps.c	/^static UInt32	lastFixTime = 0;	\/* time in systicks of last GPRMC $/;"	v	file:
lastForm	.\GlobalTypes.h	/^	UInt16 lastForm;$/;"	m	struct:__anon39
lastIdxRec	.\AsDatabase.c	/^enum {lat1IdxRec = 0, lon1IdxRec, lat3IdxRec, lon3IdxRec, typeIdxRec, lastIdxRec };$/;"	e	enum:__anon3	file:
lastIdxRec	.\WDManager.c	/^		extra1IdxRec = 5, extra2IdxRec = 6, lastIdxRec = 7};$/;"	e	enum:__anon89	file:
lastLatitude	.\CpInterface.c	/^	UInt16 lastLatitude;                \/\/ 0 = north, 1 = south$/;"	m	struct:__anon19	file:
lastLongitude	.\CpInterface.c	/^	UInt16 lastLongitude;               \/\/ 0 = west, 1 = east$/;"	m	struct:__anon19	file:
lastMagVar	.\CpInterface.c	/^	UInt16 lastMagVar;                  \/\/ 0 = west, 1 = east$/;"	m	struct:__anon19	file:
lastMapLat	.\GlobalTypes.h	/^	Int32 lastMapLat, lastMapLon;$/;"	m	struct:__anon39
lastMapLon	.\GlobalTypes.h	/^	Int32 lastMapLat, lastMapLon;$/;"	m	struct:__anon39
lastMaxRange	.\WDManager.c	/^	Int32 lastMaxRange;$/;"	m	struct:WDMSearchStructType	file:
lastRotation	.\MapManager.c	/^	Int16 lastRotation;$/;"	m	struct:MapTypeStruct	file:
lastXOrigin	.\MapManager.c	/^	Coord lastXOrigin, lastYOrigin;$/;"	m	struct:MapTypeStruct	file:
lastYOrigin	.\MapManager.c	/^	Coord lastXOrigin, lastYOrigin;$/;"	m	struct:MapTypeStruct	file:
lat	.\AsDatabase.h	/^	Int32 lat, lon;$/;"	m	struct:__anon6
lat	.\AsDatabase.h	/^	Int32 lat, lon;$/;"	m	struct:__anon7
lat	.\FlightPlan.h	/^	Int32 lat, lon;$/;"	m	struct:__anon28
lat	.\Gps.c	/^	double lat;$/;"	m	struct:__anon52	file:
lat	.\MapForm.c	/^	Int32 lat,lon;$/;"	m	struct:__anon66	file:
lat	.\MapForm.c	/^	Int32 lat;$/;"	m	struct:__anon63	file:
lat	.\MapIcon.h	/^	double lat, lon;$/;"	m	struct:__anon71
lat	.\TrackLog.h	/^	Int32 lat;$/;"	m	struct:__anon88
lat	.\WDManager.c	/^	Int16 *lat;$/;"	m	struct:__anon90	file:
lat	.\WDManager.c	/^	Int16 lat;$/;"	m	struct:WDMSearchStructType	file:
lat	.\WDManager.h	/^	Int32 lat;$/;"	m	struct:__anon96
lat1	.\MapManager.c	/^	Int16 lat1, lon1;$/;"	m	struct:MapTypeStruct	file:
lat1Idx	.\AsDatabase.c	/^	Int16 *lat1Idx, *lon1Idx;$/;"	m	struct:__anon4	file:
lat1IdxRec	.\AsDatabase.c	/^enum {lat1IdxRec = 0, lon1IdxRec, lat3IdxRec, lon3IdxRec, typeIdxRec, lastIdxRec };$/;"	e	enum:__anon3	file:
lat2	.\MapManager.c	/^	Int16 lat2, lon2;$/;"	m	struct:MapTypeStruct	file:
lat32	.\Gps.h	/^	Int32		lat32;$/;"	m	struct:__anon54
lat3Idx	.\AsDatabase.c	/^	Int16 *lat3Idx, *lon3Idx;$/;"	m	struct:__anon4	file:
lat3IdxRec	.\AsDatabase.c	/^enum {lat1IdxRec = 0, lon1IdxRec, lat3IdxRec, lon3IdxRec, typeIdxRec, lastIdxRec };$/;"	e	enum:__anon3	file:
latA	.\NavManager.c	/^	double latA;	\/\/ lat & lon of point A$/;"	m	struct:__anon80	file:
latB	.\NavManager.c	/^	double latB;	\/\/ lat & lon of point B$/;"	m	struct:__anon80	file:
latIdxRec	.\WDManager.c	/^enum { idIdxRec = 0, latIdxRec = 1, lonIdxRec = 2, typeIdxRec = 3, latLonIdxRec = 4, $/;"	e	enum:__anon89	file:
latLonIdxRec	.\WDManager.c	/^enum { idIdxRec = 0, latIdxRec = 1, lonIdxRec = 2, typeIdxRec = 3, latLonIdxRec = 4, $/;"	e	enum:__anon89	file:
latRef	.\MapAirspace.c	/^static Int32 latRef, lonRef;$/;"	v	file:
latRef	.\MapManager.c	/^	Int32 latRef;$/;"	m	struct:MapTypeStruct	file:
latScale	.\MapAirspace.c	/^static Int32 latScale, lonScale;$/;"	v	file:
latScaling	.\MapManager.c	/^	Int32 latScaling, lonScaling;$/;"	m	struct:MapTypeStruct	file:
latitude	.\Gps.h	/^	double		latitude;$/;"	m	struct:__anon54
latitude	.\WDManager.h	/^	double latitude;  \/* north +ve *\/$/;"	m	struct:__anon95
latlon	.\WDManager.c	/^	UInt16 *latlon;$/;"	m	struct:__anon90	file:
ledHeight	.\GlobalTypes.h	/^	Coord ledHeight;$/;"	m	struct:__anon41
leftHanded	.\Instruments.c	/^	Boolean leftHanded;$/;"	m	struct:VSITypeStruct	file:
leftTurn	.\NavManager.c	/^	Boolean leftTurn;		\/\/ true, if the turn required is left$/;"	m	struct:__anon80	file:
leg	.\CpInterface.c	/^	LegStruct leg[maxLegs];$/;"	m	struct:__anon18	file:
leg	.\FlightPlan.c	/^	FlightPlanLegType leg[MAX_FP_LEGS];$/;"	m	struct:FlightPlanType	file:
leg	.\NavManager.c	/^	Int16 leg;$/;"	m	struct:__anon80	file:
length	.\CpInterface.h	/^	UInt16 length;$/;"	m	struct:__anon20
level	.\AlarmManager.c	/^	AlarmLevelType level;$/;"	m	struct:__anon1	file:
liconWindows	.\MapForm.c	/^static IconWindowsType liconWindows;$/;"	v	file:
lightBorder	.\Platform.h	/^enum { noBorder = -1, darkBorder = 256, lightBorder = 257 };$/;"	e	enum:__anon84
line	.\Main.c	/^static char   *line;$/;"	v	file:
linePtrs	.\WPInfoDialog.c	/^static const char **linePtrs = NULL;$/;"	v	file:
lines	.\MapAirspace.h	/^	WinLineType *lines;$/;"	m	struct:__anon61
linksFile	.\CpInterface.c	/^static UInt32      *linksFile = NULL;$/;"	v	file:
loadedSegment	.\CpInterface.c	/^static Int16 loadedSegment;$/;"	v	file:
localTimeZone	.\GlobalTypes.h	/^	Int8 localTimeZone;$/;"	m	struct:__anon39
localUnits	.\MorePreferencesDialog.c	/^static UInt8 localUnits;$/;"	v	file:
logData	.\Main.c	/^static char   *logData;$/;"	v	file:
logDb	.\Main.c	/^static DmOpenRef logDb;$/;"	v	file:
logPtr	.\Main.c	/^static UInt16 *logPtr;$/;"	v	file:
logReadPtr	.\TrackLog.c	/^static Int16 logReadPtr;$/;"	v	file:
logSize	.\TrackLog.c	/^static Int16 logSize;$/;"	v	file:
logWritePtr	.\TrackLog.c	/^static Int16 logWritePtr;$/;"	v	file:
lon	.\AsDatabase.h	/^	Int32 lat, lon;$/;"	m	struct:__anon6
lon	.\AsDatabase.h	/^	Int32 lat, lon;$/;"	m	struct:__anon7
lon	.\FlightPlan.h	/^	Int32 lat, lon;$/;"	m	struct:__anon28
lon	.\Gps.c	/^	double lon;$/;"	m	struct:__anon52	file:
lon	.\MapForm.c	/^	Int32 lat,lon;$/;"	m	struct:__anon66	file:
lon	.\MapForm.c	/^	Int32 lon;$/;"	m	struct:__anon63	file:
lon	.\MapIcon.h	/^	double lat, lon;$/;"	m	struct:__anon71
lon	.\TrackLog.h	/^	Int32 lon;$/;"	m	struct:__anon88
lon	.\WDManager.c	/^	Int16 *lon;$/;"	m	struct:__anon90	file:
lon	.\WDManager.c	/^	Int16 lon;$/;"	m	struct:WDMSearchStructType	file:
lon	.\WDManager.h	/^	Int32 lon;$/;"	m	struct:__anon96
lon1	.\MapManager.c	/^	Int16 lat1, lon1;$/;"	m	struct:MapTypeStruct	file:
lon1Idx	.\AsDatabase.c	/^	Int16 *lat1Idx, *lon1Idx;$/;"	m	struct:__anon4	file:
lon1IdxRec	.\AsDatabase.c	/^enum {lat1IdxRec = 0, lon1IdxRec, lat3IdxRec, lon3IdxRec, typeIdxRec, lastIdxRec };$/;"	e	enum:__anon3	file:
lon2	.\MapManager.c	/^	Int16 lat2, lon2;$/;"	m	struct:MapTypeStruct	file:
lon32	.\Gps.h	/^	Int32		lon32;$/;"	m	struct:__anon54
lon3Idx	.\AsDatabase.c	/^	Int16 *lat3Idx, *lon3Idx;$/;"	m	struct:__anon4	file:
lon3IdxRec	.\AsDatabase.c	/^enum {lat1IdxRec = 0, lon1IdxRec, lat3IdxRec, lon3IdxRec, typeIdxRec, lastIdxRec };$/;"	e	enum:__anon3	file:
lonA	.\NavManager.c	/^	double lonA;$/;"	m	struct:__anon80	file:
lonB	.\NavManager.c	/^	double lonB;$/;"	m	struct:__anon80	file:
lonIdxRec	.\WDManager.c	/^enum { idIdxRec = 0, latIdxRec = 1, lonIdxRec = 2, typeIdxRec = 3, latLonIdxRec = 4, $/;"	e	enum:__anon89	file:
lonRef	.\MapAirspace.c	/^static Int32 latRef, lonRef;$/;"	v	file:
lonRef	.\MapManager.c	/^	Int32 lonRef;$/;"	m	struct:MapTypeStruct	file:
lonScale	.\MapAirspace.c	/^static Int32 latScale, lonScale;$/;"	v	file:
lonScaling	.\MapManager.c	/^	Int32 latScaling, lonScaling;$/;"	m	struct:MapTypeStruct	file:
longitude	.\Gps.h	/^	double 		longitude;$/;"	m	struct:__anon54
longitude	.\WDManager.h	/^	double longitude; \/* west +ve *\/$/;"	m	struct:__anon95
lowerAlt	.\AsDatabase.h	/^	UInt16 lowerAlt, upperAlt;$/;"	m	struct:__anon8
lowerAlt	.\MapAirspace.h	/^	Int32 lowerAlt;$/;"	m	struct:__anon61
lowerAltRef	.\AsDatabase.h	/^	AltReferenceType lowerAltRef;$/;"	m	struct:__anon8
lowerAltString	.\MapAirspace.h	/^	char  lowerAltString[MAX_ALT_CHARS];$/;"	m	struct:__anon61
lowerFilter	.\GlobalTypes.h	/^	UInt8   lowerFilter;$/;"	m	struct:__anon35
lscreen	.\MapForm.c	/^static ScreenInfoType lscreen;$/;"	v	file:
m	.\AvCalcs.c	/^      int n,m;$/;"	m	struct:__anon9	file:
m	.\MagVarn.c	/^      int n,m;$/;"	m	struct:__anon60	file:
magHeading	.\Gps.h	/^	float		magHeading;	\/* degress magnetic *\/$/;"	m	struct:__anon54
magVar	.\FlightPlan.h	/^	float magVar;$/;"	m	struct:__anon28
magVar	.\MapIcon.h	/^	Int16  magVar;$/;"	m	struct:__anon68
magVar	.\WDManager.h	/^	float  magVar;    \/* west +ve *\/$/;"	m	struct:__anon95
magVarn	.\Gps.h	/^	float           magVarn;        \/* degrees, -ve east *\/$/;"	m	struct:__anon54
magVarnCalculated	.\Gps.c	/^static Boolean magVarnCalculated = false;$/;"	v	file:
majorVersion	.\FlightPlan.c	/^	Int16 majorVersion;$/;"	m	struct:FlightPlanType	file:
majorVersion	.\FlightPlan.h	/^typedef enum { minorVersion, majorVersion } FlightPlanVersionType;$/;"	e	enum:__anon30
mapAirspace	.\MapAirspace.h	/^	MapAirspaceType mapAirspace;$/;"	m	struct:__anon62
mapNumber	.\GlobalTypes.h	/^	Int16 mapNumber;$/;"	m	struct:__anon39
mapNumberHotspot	.\MapForm.c	/^static RectangleType mapNumberHotspot;$/;"	v	file:
mapPrefs	.\GlobalTypes.h	64;"	d
mapPrefs	.\MapForm.c	205;"	d	file:
mapPrefs	.\MapIcon.c	45;"	d	file:
mapPrefsNumber	.\MapForm.c	206;"	d	file:
mapPrefsNumber	.\MapIcon.c	46;"	d	file:
mapPrefsScale	.\MapForm.c	207;"	d	file:
mapPrefsScale	.\MapIcon.c	47;"	d	file:
mapSetting	.\GlobalTypes.h	/^	MapSettingType mapSetting[4];$/;"	m	struct:__anon39
mapx	.\MapManager.c	/^	Coord mapx, mapy;$/;"	m	struct:__anon75	file:
mapy	.\MapManager.c	/^	Coord mapx, mapy;$/;"	m	struct:__anon75	file:
maxAcceleration	.\Gps.c	/^static const float maxAcceleration= 5.0;$/;"	v	file:
maxDeflection	.\HeadingIndicator.c	/^	Int16 maxDeflection;$/;"	m	struct:HSITypeStruct	file:
maxDeflection	.\Instruments.c	/^	Int32 maxDeflection;$/;"	m	struct:GSITypeStruct	file:
maxLat	.\WDManager.c	/^	Int16 minLat, maxLat;$/;"	m	struct:WDMSearchStructType	file:
maxLegs	.\CpInterface.c	131;"	d	file:
maxLonRange	.\WDManager.c	/^	Int16 maxLonRange;$/;"	m	struct:WDMSearchStructType	file:
maxSegments	.\CpInterface.c	132;"	d	file:
melAirspace	.\MapManager.c	/^typedef enum { melIcon, melAirspace, melAirway } MapElementType;$/;"	e	enum:__anon72	file:
melAirway	.\MapManager.c	/^typedef enum { melIcon, melAirspace, melAirway } MapElementType;$/;"	e	enum:__anon72	file:
melIcon	.\MapManager.c	/^typedef enum { melIcon, melAirspace, melAirway } MapElementType;$/;"	e	enum:__anon72	file:
message	.\MessageDialog.h	/^	char *message;$/;"	m	struct:__anon79
messageData	.\MessageDialog.c	/^static MessageDialogDataType *messageData;$/;"	v	file:
millisec	.\Gps.h	/^	UInt16 millisec;$/;"	m	struct:__anon53
min	.\Gps.h	/^	UInt8 min;$/;"	m	struct:__anon53
minLat	.\WDManager.c	/^	Int16 minLat, maxLat;$/;"	m	struct:WDMSearchStructType	file:
minorUnits	.\GlobalTypes.h	/^	float minorUnits;	\/\/ multiply to convert from NM to feet, or KM to m$/;"	m	struct:__anon44
minorVersion	.\FlightPlan.c	/^	Int16 minorVersion;$/;"	m	struct:FlightPlanType	file:
minorVersion	.\FlightPlan.h	/^typedef enum { minorVersion, majorVersion } FlightPlanVersionType;$/;"	e	enum:__anon30
month	.\Gps.h	/^	UInt16 month;$/;"	m	struct:__anon53
mothership	.\Platform.c	/^	struct oeCallbackDataType **mothership;$/;"	m	struct:oeCallbackDataType	typeref:struct:oeCallbackDataType::oeCallbackDataType	file:
mqfInputTimeout	.\MapForm.c	/^static Int32 mqfInputTimeout;$/;"	v	file:
mqfWaypointID	.\MapForm.c	/^static char mqfWaypointID[MQF_MAX_CHARS+1] = "";$/;"	v	file:
msAirspace	.\MapManager.h	/^	enum { msWaypoint, msAirspace } type;$/;"	e	enum:MapSelectionStructType::__anon76
msWaypoint	.\MapManager.h	/^	enum { msWaypoint, msAirspace } type;$/;"	e	enum:MapSelectionStructType::__anon76
mvEastTemplate	.\GPSForm.c	/^static const char *mvEastTemplate = "%sE";$/;"	v	file:
mvWestTemplate	.\GPSForm.c	/^static const char *mvWestTemplate = "%sW";$/;"	v	file:
myWindow	.\DiversionForm.c	/^static WinHandle           myWindow         = NULL;$/;"	v	file:
myWindow	.\FlightPlanForm.c	/^static WinHandle myWindow;$/;"	v	file:
myWindow	.\GPSForm.c	/^static WinHandle myWindow;$/;"	v	file:
myWindow	.\MainForm.c	/^static WinHandle myWindow;$/;"	v	file:
myWindow	.\MapForm.c	/^static WinHandle           myWindow         = NULL;$/;"	v	file:
myWindow	.\TimerForm.c	/^static WinHandle myWindow;$/;"	v	file:
n	.\AvCalcs.c	/^      int n,m;$/;"	m	struct:__anon9	file:
n	.\MagVarn.c	/^      int n,m;$/;"	m	struct:__anon60	file:
name	.\DiversionForm.c	/^	char           name[MAX_NAMECHARS+1];$/;"	m	struct:__anon21	file:
name	.\WDManager.h	/^	char   name[1];$/;"	m	struct:__anon95
navAltitude	.\NavManager.h	/^	navAltitude, navVSI,$/;"	e	enum:__anon81
navBackcourse	.\NavManager.h	/^	navBackcourse,$/;"	e	enum:__anon81
navBankAngle	.\NavManager.h	/^	navPitch, navBankAngle,$/;"	e	enum:__anon81
navBearingFrom	.\NavManager.h	/^	navBearingFrom, $/;"	e	enum:__anon81
navBearingTo	.\NavManager.h	/^	navBearingTo, navDistanceTo, $/;"	e	enum:__anon81
navCompassFrom	.\NavManager.h	/^	navCompassFrom,$/;"	e	enum:__anon81
navCourse	.\NavManager.h	/^	navCourse,$/;"	e	enum:__anon81
navDestDistance	.\NavManager.h	/^	navDestDistance, navDestETE, navDestETA,$/;"	e	enum:__anon81
navDestETA	.\NavManager.h	/^	navDestDistance, navDestETE, navDestETA,$/;"	e	enum:__anon81
navDestETE	.\NavManager.h	/^	navDestDistance, navDestETE, navDestETA,$/;"	e	enum:__anon81
navDistanceTo	.\NavManager.h	/^	navBearingTo, navDistanceTo, $/;"	e	enum:__anon81
navETA	.\NavManager.h	/^	navETE, navETA,$/;"	e	enum:__anon81
navETE	.\NavManager.h	/^	navETE, navETA,$/;"	e	enum:__anon81
navEnd	.\NavManager.h	/^	navEnd$/;"	e	enum:__anon81
navFlightDirectorRoll	.\NavManager.h	/^	navFlightDirectorRoll,	\/\/ angle to turn to get back onto course (degrees)$/;"	e	enum:__anon81
navFromIdent	.\NavManager.h	/^	navFromIdent, navToIdent,$/;"	e	enum:__anon81
navGS	.\NavManager.h	/^	navTrack, navGS, navXTRK,$/;"	e	enum:__anon81
navInfo	.\NavManager.c	/^} navInfo;$/;"	v	typeref:struct:__anon80	file:
navLocal	.\NavManager.h	/^	navLocal, navUTC, $/;"	e	enum:__anon81
navMV	.\NavManager.h	/^	navMV, $/;"	e	enum:__anon81
navPitch	.\NavManager.h	/^	navPitch, navBankAngle,$/;"	e	enum:__anon81
navRadBearingTo	.\NavManager.h	/^	navRadBearingTo,$/;"	e	enum:__anon81
navToIdent	.\NavManager.h	/^	navFromIdent, navToIdent,$/;"	e	enum:__anon81
navTrack	.\NavManager.h	/^	navTrack, navGS, navXTRK,$/;"	e	enum:__anon81
navTurnDistanceTo	.\NavManager.h	/^	navTurnDistanceTo,$/;"	e	enum:__anon81
navTurnETE	.\NavManager.h	/^	navTurnETE,				\/\/ time (secs) to the turn$/;"	e	enum:__anon81
navUTC	.\NavManager.h	/^	navLocal, navUTC, $/;"	e	enum:__anon81
navVNAVAltError	.\NavManager.h	/^	navVNAVAltError,		\/\/ altitude error during descent$/;"	e	enum:__anon81
navVNAVDistanceTo	.\NavManager.h	/^	navVNAVDistanceTo,		\/\/ distance to VNAV Point of Descent$/;"	e	enum:__anon81
navVNAVETE	.\NavManager.h	/^	navVNAVETE,				\/\/ time (secs) to VNAV point of descent$/;"	e	enum:__anon81
navVNAVRequiredVS	.\NavManager.h	/^	navVNAVRequiredVS,		\/\/ required rate of descent (user units)$/;"	e	enum:__anon81
navVNAVradDistanceToDescend	.\NavManager.h	/^	navVNAVradDistanceToDescend,	\/\/ radian descent distance$/;"	e	enum:__anon81
navVNAVradDistanceToVNAV	.\NavManager.h	/^	navVNAVradDistanceToVNAV,		\/\/ radian VNAV distance$/;"	e	enum:__anon81
navVSI	.\NavManager.h	/^	navAltitude, navVSI,$/;"	e	enum:__anon81
navXTRK	.\NavManager.h	/^	navTrack, navGS, navXTRK,$/;"	e	enum:__anon81
navaid	.\MapIcon.h	/^	ExtraNavaidInfoType   navaid;$/;"	m	union:__anon70
ndb	.\DiversionForm.c	/^static enum { airfield = 0,vor,ndb,intersection,all } displayFilter = airfield;$/;"	e	enum:__anon23	file:
ndbFilter	.\GlobalTypes.h	40;"	d
newMap	.\MapForm.c	/^static MapType newMap;$/;"	v	file:
newProxList	.\DiversionForm.c	/^static ProxWaypointListType *newProxList;$/;"	v	file:
newSegment	.\CpInterface.c	/^	Boolean    newSegment:1;$/;"	m	struct:__anon17	file:
newSerialMgr	.\Gps.c	/^static Boolean  newSerialMgr;$/;"	v	file:
nightMode	.\GlobalTypes.h	/^	Boolean nightMode;$/;"	m	struct:__anon39
nightMode	.\Main.c	/^Boolean nightMode = false;$/;"	v
noBorder	.\Platform.h	/^enum { noBorder = -1, darkBorder = 256, lightBorder = 257 };$/;"	e	enum:__anon84
noIntersection	.\CpInterface.c	/^typedef enum {north, west, south, east, noIntersection }Quadrant;$/;"	e	enum:__anon12	file:
noObstacles	.\GlobalTypes.h	/^	WDMDatabaseIDType noObstacles; 	\/\/ cpSystem | cpUser$/;"	m	struct:__anon34
noType	.\CpInterface.c	/^typedef enum {noType, flightRecord=321, routeRecord, wbRecord, planRecord }$/;"	e	enum:__anon10	file:
normal	.\Gps.h	/^	normal = 0,$/;"	e	enum:__anon58
north	.\CpInterface.c	/^typedef enum {north, west, south, east, noIntersection }Quadrant;$/;"	e	enum:__anon12	file:
northDone	.\WDManager.c	/^	Boolean northDone;$/;"	m	struct:WDMSearchStructType	file:
northIndex	.\WDManager.c	/^	Int32 northIndex;$/;"	m	struct:WDMSearchStructType	file:
northStr	.\Gps.h	/^	char		northStr[13];$/;"	m	struct:__anon54
note	.\CpInterface.c	/^	char note[1];$/;"	m	struct:__anon15	file:
notes	.\TextDialog.c	/^static char *notes;$/;"	v	file:
notes	.\WDManager.h	/^	char   notes[1];$/;"	m	struct:__anon95
numAirspaces	.\MapManager.c	/^	Int16  numAirspaces;$/;"	m	struct:MapTypeStruct	file:
numAlarms	.\AlarmManager.c	/^static Int16 numAlarms = 0;$/;"	v	file:
numDatabases	.\WDManager.c	/^	Int16 numDatabases;$/;"	m	struct:WDMHandleStructType	file:
numFiles	.\Platform.c	/^	Int16        numFiles;$/;"	m	struct:oeCallbackDataType	file:
numHardSurfaces	.\CpInterface.c	/^static const UInt16 numHardSurfaces = 77;$/;"	v	file:
numIcons	.\MapManager.c	/^	UInt16 numIcons;$/;"	m	struct:MapTypeStruct	file:
numItems	.\MessageDialog.h	/^	Int16 numItems;$/;"	m	struct:__anon79
numLegs	.\CpInterface.c	/^	UInt16 numLegs;$/;"	m	struct:__anon18	file:
numLegs	.\FlightPlan.c	/^	Int16 numLegs;$/;"	m	struct:FlightPlanType	file:
numLines	.\MapAirspace.h	/^	Int16 numLines;$/;"	m	struct:__anon61
numLinks	.\CpInterface.c	/^static UInt32		numLinks  = 0;$/;"	v	file:
numMapElements	.\MapManager.c	/^	Int16    numMapElements;$/;"	m	struct:MapTypeStruct	file:
numProxWaypointsToDisplay	.\DiversionForm.c	/^static const UInt16 numProxWaypointsToDisplay = 4;$/;"	v	file:
numRecords	.\AsDatabase.c	/^	Int16 numRecords;		\/\/ number of Airspace records in DB$/;"	m	struct:__anon4	file:
numRouteLines	.\MapManager.c	/^	Int16 numRouteLines;$/;"	m	struct:MapTypeStruct	file:
numRunways	.\MapIcon.h	/^	UInt16 numRunways;$/;"	m	struct:__anon68
numSegments	.\CpInterface.c	/^static Int16 numSegments;$/;"	v	file:
numTrackLines	.\MapManager.c	/^	Int16 numTrackLines;$/;"	m	struct:MapTypeStruct	file:
numWaypoints	.\DiversionForm.c	/^	Int16 numWaypoints;$/;"	m	struct:__anon22	file:
numWaypoints	.\WDManager.c	/^	Int16 numWaypoints;$/;"	m	struct:__anon91	file:
obs	.\GlobalTypes.h	/^	WDMDatabaseIDType obs[10];$/;"	m	struct:__anon34
obsActive	.\OBSManager.c	/^static Boolean obsActive = false;$/;"	v	file:
obsHeading	.\OBSManager.c	/^static float obsHeading;$/;"	v	file:
obsState	.\NavManager.c	/^	Boolean obsState;$/;"	m	struct:__anon80	file:
obstacleAltitude	.\MapIcon.h	/^	Int32 obstacleAltitude;$/;"	m	struct:__anon67
obstacleWarnings	.\GlobalTypes.h	/^	Boolean obstacleWarnings;$/;"	m	struct:__anon39
obstacles	.\GlobalTypes.h	/^	WDMDatabaseIDType obstacles;	\/\/ cpUser | obs[0..9]$/;"	m	struct:__anon34
oeCallbackDataType	.\Platform.c	/^typedef struct oeCallbackDataType {$/;"	s	file:
oeCallbackDataType	.\Platform.c	/^} oeCallbackDataType;$/;"	t	typeref:struct:oeCallbackDataType	file:
offScreenWindow	.\MainForm.c	/^static WinHandle offScreenWindow;$/;"	v	file:
olOldWindow	.\Utils.c	/^static WinHandle  olOldWindow;$/;"	v	file:
olWindow	.\Utils.c	/^static WinHandle  olWindow;$/;"	v	file:
oldColours	.\Colours.c	/^RGBColorType *oldColours = NULL;$/;"	v
oldDepth	.\Main.c	/^static UInt32	oldDepth;$/;"	v	file:
oneSecUpdate	.\GlobalTypes.h	/^	Boolean oneSecUpdate;$/;"	m	struct:__anon39
otherIcon	.\Colours.c	/^static const RGBColorType otherIcon = { 0, 0,0, 200 };$/;"	v	file:
otherIcon	.\GlobalTypes.h	/^	IndexedColorType otherIcon;$/;"	m	struct:__anon40
palette	.\TerrainCore.h	/^	UInt8 *palette;$/;"	m	struct:TerrainCoreParamType
paletteType	.\TerrainType.c	/^	TerrainPaletteType paletteType;$/;"	m	struct:TerrainTypeStruct	file:
pan	.\MapForm.c	/^} pan = { panInvalid, 0,0, 0 };$/;"	v	typeref:struct:__anon63	file:
panActive	.\MapForm.c	/^	enum { panInvalid, panInactive, panActive, panLocked } state;$/;"	e	enum:__anon63::__anon64	file:
panBackHotspot	.\MapForm.c	/^static RectangleType panBackHotspot;$/;"	v	file:
panInactive	.\MapForm.c	/^	enum { panInvalid, panInactive, panActive, panLocked } state;$/;"	e	enum:__anon63::__anon64	file:
panInvalid	.\MapForm.c	/^	enum { panInvalid, panInactive, panActive, panLocked } state;$/;"	e	enum:__anon63::__anon64	file:
panLocked	.\MapForm.c	/^	enum { panInvalid, panInactive, panActive, panLocked } state;$/;"	e	enum:__anon63::__anon64	file:
panResetHotspot	.\MapForm.c	/^static RectangleType panResetHotspot;$/;"	v	file:
pdop	.\Gps.h	/^	float pdop;$/;"	m	struct:__anon55
pfFileReadOnly	.\Platform.h	/^typedef enum { pfFileReadOnly, pfFileReadWrite, pfFileTruncate } PFFileMode;$/;"	e	enum:__anon82
pfFileReadWrite	.\Platform.h	/^typedef enum { pfFileReadOnly, pfFileReadWrite, pfFileTruncate } PFFileMode;$/;"	e	enum:__anon82
pfFileTruncate	.\Platform.h	/^typedef enum { pfFileReadOnly, pfFileReadWrite, pfFileTruncate } PFFileMode;$/;"	e	enum:__anon82
pfHasSound	.\Platform.c	/^static Boolean pfHasSound = false;$/;"	v	file:
pfSeekCurrent	.\Platform.h	/^typedef enum { pfSeekStart, pfSeekEnd, pfSeekCurrent} PFFileSeek;$/;"	e	enum:__anon83
pfSeekEnd	.\Platform.h	/^typedef enum { pfSeekStart, pfSeekEnd, pfSeekCurrent} PFFileSeek;$/;"	e	enum:__anon83
pfSeekStart	.\Platform.h	/^typedef enum { pfSeekStart, pfSeekEnd, pfSeekCurrent} PFFileSeek;$/;"	e	enum:__anon83
pilot	.\CpInterface.c	/^	UInt32 pilot;$/;"	m	struct:__anon15	file:
pixelHeight	.\GlobalTypes.h	/^	Coord height, pixelHeight;$/;"	m	struct:__anon41
pixelScale	.\MapIcon.h	/^	Int32 pixelScale;$/;"	m	struct:__anon71
pixelWidth	.\GlobalTypes.h	/^	Coord width, pixelWidth;$/;"	m	struct:__anon41
pixelsPerDegree	.\AIGauge.c	/^static Coord pixelsPerDegree = 3;$/;"	v	file:
plan	.\CpInterface.c	/^	UInt32 plan;$/;"	m	struct:__anon14	file:
plan	.\FlightPlan.c	/^	FlightPlanType plan[FP_STACK_SIZE];$/;"	m	struct:FlightPlanStackType	file:
planID	.\CpInterface.c	/^static UInt32 planID;$/;"	v	file:
planRecord	.\CpInterface.c	/^typedef enum {noType, flightRecord=321, routeRecord, wbRecord, planRecord }$/;"	e	enum:__anon10	file:
point	.\Instruments.c	/^	PolyPointType point[5];$/;"	m	struct:VSITypeStruct	file:
pointer	.\Colours.c	/^static const RGBColorType pointer= { 0, 0, 0, 200 };$/;"	v	file:
pointer	.\GlobalTypes.h	/^	IndexedColorType pointer;$/;"	m	struct:__anon40
points	.\HeadingIndicator.c	/^	PointType points[NUM_POINTS+8];  \/\/ extra points for the CDI dots$/;"	m	struct:HSITypeStruct	file:
position	.\Instruments.c	/^	RectangleType position;$/;"	m	struct:SatConstTypeStruct	file:
posn	.\Gps.h	/^	GPSPosnData		posn;$/;"	m	struct:__anon59
preferencesShown	.\CpInterface.c	/^	UInt16 preferencesShown;            \/\/ true if prefs have been Oked$/;"	m	struct:__anon19	file:
preselectedWaypoint	.\MapForm.c	/^static WaypointIDType preselectedWaypoint;$/;"	v	file:
pressure	.\CpInterface.c	/^	double     pressure;$/;"	m	struct:__anon17	file:
pressureUnits	.\CpInterface.c	/^	UInt16 pressureUnits;               \/\/ {inHg, hPa}$/;"	m	struct:__anon19	file:
previewMode	.\MapForm.c	/^static Boolean previewMode;$/;"	v	file:
previewMode	.\MapManager.c	/^	Boolean previewMode;$/;"	m	struct:MapTypeStruct	file:
proxDisplayArea	.\DiversionForm.c	/^static const RectangleType proxDisplayArea = { { DvItemListLeft, DvItemListTop }, {DvItemWidth,DvItemHeight*4} };$/;"	v	file:
proxList	.\DiversionForm.c	/^static ProxWaypointListType proxList;$/;"	v	file:
proxRowHeight	.\DiversionForm.c	/^static const UInt16 proxRowHeight = DvItemHeight;$/;"	v	file:
ptr	.\MapAirspace.h	/^	const AirspaceType *ptr;$/;"	m	struct:__anon62
ptr	.\MapIcon.h	/^	const Waypoint   *ptr;$/;"	m	struct:__anon71
ptr	.\MapManager.h	/^	} ptr;$/;"	m	struct:MapSelectionStructType	typeref:union:MapSelectionStructType::__anon78
quadrant	.\CpInterface.c	/^	Quadrant   quadrant;$/;"	m	struct:__anon17	file:
radDistanceToDescend	.\NavManager.c	/^	float radDistanceToDescend;\/\/ radians$/;"	m	struct:__anon80	file:
radDistanceToVNAV	.\NavManager.c	/^	float radDistanceToVNAV;\/\/ radians$/;"	m	struct:__anon80	file:
radius	.\AsDatabase.h	/^	Int32 radius;$/;"	m	struct:__anon7
radius	.\HeadingIndicator.c	/^	Coord radius;	\/\/ radius of HSI$/;"	m	struct:HSITypeStruct	file:
radius	.\Instruments.c	/^	Coord radius;	\/\/ radius of constellation$/;"	m	struct:SatConstTypeStruct	file:
radius	.\MapAirspace.h	/^	Coord   radius;$/;"	m	struct:__anon61
range	.\DiversionForm.c	/^	double         range;$/;"	m	struct:__anon21	file:
rangeY	.\MainForm.c	/^static const Coord rangeY         = 16;$/;"	v	file:
rateOfClimb	.\Gps.c	/^static const float rateOfClimb = 800;$/;"	v	file:
rateOfTurn	.\Gps.c	/^static const float rateOfTurn    = 3.0;$/;"	v	file:
rateType	.\FlightPlan.h	/^	VNAVRateType rateType;$/;"	m	struct:__anon27
rawAltitude	.\Gps.h	/^	float		rawAltitude;\/\/ raw (GPS) altitude$/;"	m	struct:__anon54
readCallbackFunc	.\Platform.c	/^static Err readCallbackFunc(void* UserDataP, SndStreamRef stream, void* bufferP, UInt32 frameCount) {$/;"	f	file:
recordEventFile	.\Platform.c	/^static PFFileRef recordEventFile = NULL;$/;"	v	file:
recordType	.\CpInterface.c	/^	CpRecordType recordType;$/;"	m	struct:__anon15	file:
recordType	.\CpInterface.c	/^	CpRecordType recordType;$/;"	m	struct:__anon18	file:
red	.\Colours.c	/^static const RGBColorType red     = { 0, 200, 0, 0 };$/;"	v	file:
red	.\GlobalTypes.h	/^	IndexedColorType red;$/;"	m	struct:__anon40
reds	.\Colours.c	/^static const UIColorTableEntries reds[17] = {$/;"	v	file:
refuel	.\CpInterface.c	/^	Boolean    refuel:1;$/;"	m	struct:__anon17	file:
registrationCode	.\GlobalTypes.h	/^	UInt16 registrationCode;$/;"	m	struct:__anon39
registrationCode32	.\GlobalTypes.h	/^	UInt32 registrationCode32;$/;"	m	struct:__anon39
reportNumTests	.\GlobalTypes.h	/^	reportNumTests,$/;"	e	enum:__anon48
requiredVS	.\NavManager.c	/^	Int32 requiredVS;		\/\/ user units - feet or metres per minute$/;"	m	struct:__anon80	file:
returnedCounter	.\AlarmManager.c	/^	UInt16 returnedCounter;$/;"	m	struct:__anon1	file:
rotation	.\MapManager.c	/^	Int16 rotation;$/;"	m	struct:MapTypeStruct	file:
rotation	.\MapManager.c	/^	Int16 rotation;$/;"	m	struct:__anon75	file:
route	.\Colours.c	/^static const RGBColorType route = { 0, 0,204,0 };$/;"	v	file:
route	.\CpInterface.c	/^	UInt32 route;$/;"	m	struct:__anon15	file:
route	.\GlobalTypes.h	/^	Boolean route;$/;"	m	struct:__anon35
route	.\GlobalTypes.h	/^	IndexedColorType route;$/;"	m	struct:__anon40
routeLines	.\MapManager.c	/^	WinLineType *routeLines;$/;"	m	struct:MapTypeStruct	file:
routeRecord	.\CpInterface.c	/^typedef enum {noType, flightRecord=321, routeRecord, wbRecord, planRecord }$/;"	e	enum:__anon10	file:
row_dir_x	.\TerrainCore.h	/^	Int32 row_dir_x;$/;"	m	struct:TerrainCoreParamType
row_dir_y	.\TerrainCore.h	/^	Int32 row_dir_y;$/;"	m	struct:TerrainCoreParamType
row_src_h	.\TerrainCore.h	/^	Int32 row_src_h;$/;"	m	struct:TerrainCoreParamType
row_src_w	.\TerrainCore.h	/^	Int32 row_src_w;$/;"	m	struct:TerrainCoreParamType
runwayIcon	.\DiversionForm.c	/^	UInt16         runwayIcon;$/;"	m	struct:__anon21	file:
runwayLength	.\GlobalTypes.h	/^	UInt16            runwayLength;$/;"	m	struct:__anon39
runwayLength	.\MapIcon.c	/^static Int32 runwayLength, runwayLength9;$/;"	v	file:
runwayLength9	.\MapIcon.c	/^static Int32 runwayLength, runwayLength9;$/;"	v	file:
runwaySurface	.\GlobalTypes.h	/^	RunwaySurfaceType runwaySurface;$/;"	m	struct:__anon39
runwayWidth	.\GlobalTypes.h	/^	UInt16            runwayWidth;$/;"	m	struct:__anon39
runways	.\MapIcon.h	/^	CpRunwayInfoType *runways;$/;"	m	struct:__anon68
runways	.\WPInfoDialog.c	/^static enum {all = 0, frequencies, runways, ils} displayMode = all;$/;"	e	enum:__anon97	file:
sat	.\Gps.h	/^	GPSSatData		sat;$/;"	m	struct:__anon59
satConst	.\GPSForm.c	/^static SatConstType satConst;$/;"	v	file:
satConstInner	.\Colours.c	/^static const RGBColorType satConstInner = { 0, 190, 190, 220};$/;"	v	file:
satConstInner	.\GlobalTypes.h	/^	IndexedColorType satConstInner;$/;"	m	struct:__anon40
satConstOuter	.\Colours.c	/^static const RGBColorType satConstOuter = { 0, 100, 100, 200};$/;"	v	file:
satConstOuter	.\GlobalTypes.h	/^	IndexedColorType satConstOuter;$/;"	m	struct:__anon40
scale	.\GlobalTypes.h	/^	Int16 scale;$/;"	m	struct:__anon35
scale	.\Instruments.c	/^	float scale;$/;"	m	struct:GSITypeStruct	file:
scale	.\Instruments.c	/^	float scale;$/;"	m	struct:VSITypeStruct	file:
scale	.\MapForm.c	/^static const Int16 scale[3][MAX_SCALES] = {$/;"	v	file:
scaleDivisorSeed	.\MapForm.c	/^static const Int32 scaleDivisorSeed[3] = { $/;"	v	file:
scanDB	.\WDManager.c	/^	Int16 scanDB;$/;"	m	struct:WDMSearchStructType	file:
scanNorth	.\WDManager.c	/^	enum {scanNorth, scanSouth} subScanState;$/;"	e	enum:WDMSearchStructType::__anon93	file:
scanSouth	.\WDManager.c	/^	enum {scanNorth, scanSouth} subScanState;$/;"	e	enum:WDMSearchStructType::__anon93	file:
scanState	.\DiversionForm.c	/^static enum { disabled, starting, scanning, waiting } scanState = disabled;$/;"	v	typeref:enum:__anon24	file:
scanning	.\DiversionForm.c	/^static enum { disabled, starting, scanning, waiting } scanState = disabled;$/;"	e	enum:__anon24	file:
screen	.\TerrainCore.h	/^	UInt8 *screen;$/;"	m	struct:TerrainCoreParamType
screenx	.\MapManager.c	/^	Coord screenx, screeny;$/;"	m	struct:__anon75	file:
screeny	.\MapManager.c	/^	Coord screenx, screeny;$/;"	m	struct:__anon75	file:
search	.\DiversionForm.c	/^static \/*@only@*\/ \/*@null@*\/ WDMSearchHandle search = NULL;$/;"	v	file:
searchCompleted	.\WDManager.c	/^	Boolean searchCompleted;$/;"	m	struct:WDMSearchStructType	file:
searchMask	.\DiversionForm.c	/^static WaypointClassType searchMask;$/;"	v	file:
searchString	.\DiversionForm.c	/^static char searchString[10] = "";$/;"	v	file:
sec	.\Gps.h	/^	UInt8 sec;$/;"	m	struct:__anon53
seconds	.\CpInterface.c	/^	UInt32 seconds;$/;"	m	struct:__anon15	file:
seconds	.\GlobalTypes.h	/^	Int32 seconds;			\/\/ current value of timer (seconds)$/;"	m	struct:__anon37
segData	.\AsDatabase.h	/^	LineSegmentType segData[1];$/;"	m	struct:__anon8
segment	.\CpInterface.c	/^	SegmentTable segment[maxSegments];$/;"	m	struct:__anon15	file:
segmentCode	.\AsDatabase.h	/^	char segmentCode[1];$/;"	m	struct:__anon8
selectedElement	.\MapManager.c	/^	Int16 selectedElement;$/;"	m	struct:MapTypeStruct	file:
selectedWaypointID	.\DiversionForm.c	/^static WaypointIDType selectedWaypointID = UNSELECTED;$/;"	v	file:
selection	.\MapForm.c	/^static MapSelection selection = NULL;$/;"	v	file:
selectionInfoBox	.\MapForm.c	/^static RectangleType selectionInfoBox;$/;"	v	file:
selectionLat	.\MapForm.c	/^static Int32 selectionLat = 0, selectionLon = 0;$/;"	v	file:
selectionLine1	.\MapForm.c	/^static char selectionLine1[MAX_INFO_LINE_CHARS+1];$/;"	v	file:
selectionLine2	.\MapForm.c	/^static char selectionLine2[MAX_INFO_LINE_CHARS+1];$/;"	v	file:
selectionLon	.\MapForm.c	/^static Int32 selectionLat = 0, selectionLon = 0;$/;"	v	file:
sendUpdate	.\MapDialog.c	/^static Boolean sendUpdate;$/;"	v	file:
serialBuffer	.\Gps.c	/^static char 	serialBuffer[4096];	\/* buffer for serial manager *\/$/;"	v	file:
showAI	.\MainForm.c	/^static Boolean showAI = false;$/;"	v	file:
showCumulative	.\GlobalTypes.h	/^	Boolean showCumulative;$/;"	m	struct:__anon39
showETA	.\GlobalTypes.h	/^	Boolean showETA;$/;"	m	struct:__anon39
showHeadingArc	.\GlobalTypes.h	/^	Boolean showHeadingArc;$/;"	m	struct:__anon35
showRoute	.\MapManager.c	/^	Boolean showRoute;$/;"	m	struct:MapTypeStruct	file:
showRouteLines	.\MapManager.c	/^	Boolean     *showRouteLines;$/;"	m	struct:MapTypeStruct	file:
showTrack	.\GlobalTypes.h	/^	Boolean showTrack;$/;"	m	struct:__anon35
showTrackLog	.\MapManager.c	/^	Boolean showTrackLog;$/;"	m	struct:MapTypeStruct	file:
showZones	.\GlobalTypes.h	/^	Boolean showZones;$/;"	m	struct:__anon35
sid	.\CpInterface.c	/^typedef enum {airw, sid, star, approach} CpAirwayType;$/;"	e	enum:__anon13	file:
simAltitude	.\GlobalTypes.h	/^	float simAltitude;$/;"	m	struct:__anon39
simHeading	.\GlobalTypes.h	/^	float simHeading;$/;"	m	struct:__anon39
simSpeed	.\GlobalTypes.h	/^	float simSpeed;$/;"	m	struct:__anon39
simpleWait	.\MapForm.c	/^static enum { initWait, waitGoto, waitNoGoto, simpleWait } tapPlanState = initWait;$/;"	e	enum:__anon65	file:
simulation	.\Gps.c	/^} simulation;$/;"	v	typeref:struct:__anon52	file:
sine	.\Fixed.c	/^fp14 sine[] =$/;"	v
sine	.\MapManager.c	/^	Int32 sine, cosine;$/;"	m	struct:__anon75	file:
sine	.\Utils.c	/^static const Int32 sine[SINTABSIZE\/8+1] = { 0, 402, 804, 1206, 1608, 2011, 2413, 2815, 3217, 3619, 4021, 4423, 4824, 5226, 5628, 6030, 6431, 6833, 7235, 7636, 8037, 8439, 8840, 9241, 9642, 10043, 10444, 10845, 11246, 11646, 12047, 12447, 12847, 13247, 13647, 14047, 14447, 14847, 15246, 15645, 16045, 16444, 16843, 17241, 17640, 18038, 18436, 18834, 19232, 19630, 20027, 20425, 20822, 21219, 21615, 22012, 22408, 22804, 23200, 23596, 23991, 24387, 24782, 25176, 25571, 25965, 26359, 26753, 27147, 27540, 27933, 28326, 28718, 29110, 29502, 29894, 30285, 30676, 31067, 31458, 31848, 32238, 32627, 33017, 33406, 33794, 34183, 34571, 34959, 35346, 35733, 36120, 36506, 36892, 37278, 37663, 38048, 38433, 38817, 39201, 39585, 39968, 40350, 40733, 41115, 41497, 41878, 42259, 42639, 43019, 43399, 43778, 44157, 44535, 44913, 45291, 45668, 46045, 46421, 46797, 47172, 47547, 47922, 48296, 48669, 49042, 49415, 49787, 50159, 50530, 50901, 51271, 51641, 52011, 52380, 52748, 53116, 53483, 53850, 54216, 54582, 54948, 55312, 55677, 56041, 56404, 56766, 57129, 57490, 57851, 58212, 58572, 58931, 59290, 59649, 60007, 60364, 60720, 61076, 61432, 61787, 62141, 62495, 62848, 63201, 63553, 63904, 64255, 64605, 64955, 65304, 65652, 66000, 66347, 66693, 67039, 67384, 67729, 68073, 68416, 68759, 69101, 69442, 69783, 70123, 70463, 70801, 71139, 71477, 71814, 72150, 72485, 72820, 73154, 73487, 73820, 74152, 74483, 74813, 75143, 75472, 75801, 76128, 76455, 76782, 77107, 77432, 77756, 78079, 78402, 78724, 79045, 79366, 79685, 80004, 80322, 80640, 80956, 81272, 81587, 81902, 82215, 82528, 82840, 83151, 83462, 83771, 84080, 84388, 84696, 85002, 85308, 85613, 85917, 86220, 86523, 86824, 87125, 87425, 87724, 88023, 88320, 88617, 88913, 89208, 89502, 89795, 90088, 90379, 90670, 90960, 91249, 91538, 91825, 92111, 92397, 92682 };$/;"	v	file:
sinlat	.\MapManager.c	/^	double sinlat;$/;"	m	struct:MapTypeStruct	file:
sky	.\Colours.c	/^static const RGBColorType sky   = { 0, 85,130,224};$/;"	v	file:
sky	.\GlobalTypes.h	/^	IndexedColorType sky;$/;"	m	struct:__anon40
source	.\WDManager.c	/^	enum { compact, external, internal } source;$/;"	m	struct:__anon91	typeref:enum:__anon91::__anon92	file:
sourcePalette	.\TerrainType.c	/^	UInt8 *sourcePalette;		\/\/ user-supplied palette$/;"	m	struct:TerrainTypeStruct	file:
south	.\CpInterface.c	/^typedef enum {north, west, south, east, noIntersection }Quadrant;$/;"	e	enum:__anon12	file:
southDone	.\WDManager.c	/^	Boolean southDone;$/;"	m	struct:WDMSearchStructType	file:
southIndex	.\WDManager.c	/^	Int32 southIndex;$/;"	m	struct:WDMSearchStructType	file:
span	.\Polygon.c	/^static void span(Coord y, edgeRec *pt1, edgeRec *pt2)$/;"	f	file:
speed	.\GlobalTypes.h	/^	UInt16 speed;	\/* 0=kts, 1=mph, 2=kph *\/$/;"	m	struct:__anon43
speed	.\Gps.c	/^	float speed;$/;"	m	struct:__anon52	file:
speed	.\Gps.h	/^	float 		speed;		\/* in kts *\/$/;"	m	struct:__anon54
speedConv	.\GlobalTypes.h	/^	float speedConv;$/;"	m	struct:__anon44
speedUnits	.\CpInterface.c	/^	UInt16 speedUnits;                  \/\/ {nm, mi, km}$/;"	m	struct:__anon19	file:
speedUnits	.\GlobalTypes.h	/^	const char *speedUnits;$/;"	m	struct:__anon44
srcAirspace	.\MapManager.c	/^	srcAirspace,		\/* from airspace DB *\/$/;"	e	enum:__anon73	file:
srcRouteWaypoint	.\MapManager.c	/^	srcRouteWaypoint, 	\/* from the route waypoints *\/$/;"	e	enum:__anon73	file:
srcTFRs	.\MapManager.c	/^	srcTFRs,			\/* from TFRs DB *\/$/;"	e	enum:__anon73	file:
srcTrackLog	.\MapManager.c	/^	srcTrackLog$/;"	e	enum:__anon73	file:
srcWaypoints	.\MapManager.c	/^	srcWaypoints,		\/* from waypoint database *\/$/;"	e	enum:__anon73	file:
stackSize	.\FlightPlan.c	/^	Int16 stackSize;$/;"	m	struct:FlightPlanStackType	file:
standardHeight	.\GlobalTypes.h	/^	Coord standardHeight;$/;"	m	struct:__anon41
standardWidth	.\GlobalTypes.h	/^	Coord standardWidth;$/;"	m	struct:__anon41
star	.\CpInterface.c	/^typedef enum {airw, sid, star, approach} CpAirwayType;$/;"	e	enum:__anon13	file:
start	.\AsDatabase.h	/^	Int16 start, end;$/;"	m	struct:__anon7
starting	.\DiversionForm.c	/^static enum { disabled, starting, scanning, waiting } scanState = disabled;$/;"	e	enum:__anon24	file:
state	.\GlobalTypes.h	/^	enum { timerStopped, timerFlight, timerRunning } state;$/;"	m	struct:__anon37	typeref:enum:__anon37::__anon38
state	.\MapForm.c	/^	enum { panInvalid, panInactive, panActive, panLocked } state;$/;"	m	struct:__anon63	typeref:enum:__anon63::__anon64	file:
statusBar	.\Colours.c	/^static const RGBColorType statusBar = {0, 0, 102, 204 };$/;"	v	file:
statusBar	.\GlobalTypes.h	/^	IndexedColorType statusBar;$/;"	m	struct:__anon40
statusBarLight	.\Colours.c	/^static const RGBColorType statusBarLight = { 0, 149, 204, 255 };$/;"	v	file:
statusBarLight	.\GlobalTypes.h	/^	IndexedColorType statusBarLight;$/;"	m	struct:__anon40
step	.\Fixed.c	100;"	d	file:
stnr	.\Gps.h	/^	Int8 		stnr[GPSNumSats+1];$/;"	m	struct:__anon55
streamRef	.\Platform.c	/^	SndStreamRef streamRef;$/;"	m	struct:oeCallbackDataType	file:
string	.\MessageDialog.h	/^	const char *string[MAX_MESSAGE_ITEMS];$/;"	m	struct:__anon79
suas	.\Colours.c	/^static const RGBColorType suas = { 0, 255, 0, 0 };$/;"	v	file:
suas	.\GlobalTypes.h	/^	IndexedColorType suas;$/;"	m	struct:__anon40
suasAlert	.\AsDatabase.h	55;"	d
suasDanger	.\AsDatabase.h	56;"	d
suasMoa	.\AsDatabase.h	57;"	d
suasProhibited	.\AsDatabase.h	58;"	d
suasRestricted	.\AsDatabase.h	59;"	d
suasTra	.\AsDatabase.h	60;"	d
suasTypes	.\AsDatabase.c	/^const char *suasTypes[] = { "ALR","DGR","MOA","PHB","RST","TRA","WAR" };$/;"	v
suasWarning	.\AsDatabase.h	61;"	d
subScanState	.\WDManager.c	/^	enum {scanNorth, scanSouth} subScanState;$/;"	m	struct:WDMSearchStructType	typeref:enum:WDMSearchStructType::__anon93	file:
surfEither	.\GlobalTypes.h	/^typedef enum { surfEither, surfHard, surfGrass } RunwaySurfaceType;$/;"	e	enum:__anon32
surfGrass	.\GlobalTypes.h	/^typedef enum { surfEither, surfHard, surfGrass } RunwaySurfaceType;$/;"	e	enum:__anon32
surfHard	.\GlobalTypes.h	/^typedef enum { surfEither, surfHard, surfGrass } RunwaySurfaceType;$/;"	e	enum:__anon32
swap	.\Polygon.c	10;"	d	file:
swapScreen	.\Utils.c	/^static WinHandle swapScreen;$/;"	v	file:
sysAppLaunchCmdCoPilotLaunch	.\Main.c	252;"	d	file:
system	.\CpInterface.c	/^typedef enum {system,user} CpWaypointType;$/;"	e	enum:__anon11	file:
t1lat	.\TerrainType.c	/^	Int32 t1lat, t1lon;$/;"	m	struct:TerrainTypeStruct	file:
t1lon	.\TerrainType.c	/^	Int32 t1lat, t1lon;$/;"	m	struct:TerrainTypeStruct	file:
t3lat	.\TerrainType.c	/^	Int32 t3lat, t3lon;			\/\/top left and bottom right of terrain in cache$/;"	m	struct:TerrainTypeStruct	file:
t3lon	.\TerrainType.c	/^	Int32 t3lat, t3lon;			\/\/top left and bottom right of terrain in cache$/;"	m	struct:TerrainTypeStruct	file:
table1	.\Polygon.c	/^static edgeRec table1[HEIGHT];$/;"	v	file:
table2	.\Polygon.c	/^static edgeRec table2[HEIGHT];$/;"	v	file:
tapPlanLeg	.\MapForm.c	/^static Int16  tapPlanLeg;$/;"	v	file:
tapPlanState	.\MapForm.c	/^static enum { initWait, waitGoto, waitNoGoto, simpleWait } tapPlanState = initWait;$/;"	v	typeref:enum:__anon65	file:
tapPlanString	.\MapForm.c	/^static char tapPlanString[50];$/;"	v	file:
tapPlanTimeout	.\MapForm.c	/^static UInt32 tapPlanTimeout;$/;"	v	file:
tapPlanTriedDelete	.\MapForm.c	/^static Boolean tapPlanTriedDelete;$/;"	v	file:
targetAltitude	.\FlightPlan.h	/^	float       targetAltitude;	\/\/ feet$/;"	m	struct:__anon27
targetAltitude	.\Gps.c	/^	float targetAltitude;$/;"	m	struct:__anon52	file:
targetAltitude	.\NavManager.c	/^	float   targetAltitude;		\/\/ feet, AMSL$/;"	m	struct:__anon80	file:
targetHeading	.\Gps.c	/^	float targetHeading;$/;"	m	struct:__anon52	file:
targetRate	.\FlightPlan.h	/^	float		targetRate;		\/\/ feet\/nm or radians$/;"	m	struct:__anon27
targetSpeed	.\Gps.c	/^	float targetSpeed;$/;"	m	struct:__anon52	file:
tcParam	.\TerrainType.c	/^struct TerrainCoreParamType tcParam;$/;"	v	typeref:struct:TerrainCoreParamType
tc_height	.\TerrainType.c	/^	Int32 tc_width, tc_height;	\/\/ dimensions of cache$/;"	m	struct:TerrainTypeStruct	file:
tc_scale_factor	.\TerrainType.c	/^	Int32 tc_scale_factor;		\/\/ scaling: 1=hi-res, 2=med, 4=lo$/;"	m	struct:TerrainTypeStruct	file:
tc_width	.\TerrainCore.h	/^	Int32 tc_width;$/;"	m	struct:TerrainCoreParamType
tc_width	.\TerrainType.c	/^	Int32 tc_width, tc_height;	\/\/ dimensions of cache$/;"	m	struct:TerrainTypeStruct	file:
temp	.\CpInterface.c	/^	double     temp;$/;"	m	struct:__anon17	file:
tempWaypoints	.\WDManager.c	/^	Waypoint *tempWaypoints[MAX_TEMP];$/;"	m	struct:WDMHandleStructType	file:
terrain	.\GlobalTypes.h	/^	TerrainPaletteType terrain;$/;"	m	struct:__anon35
terrain	.\MapManager.c	/^	TerrainType terrain;$/;"	m	struct:MapTypeStruct	file:
terrainNormal	.\TerrainType.h	/^typedef enum { terrainOff, terrainNormal, terrainNormalWarn, terrainWarn } TerrainPaletteType;$/;"	e	enum:__anon87
terrainNormalWarn	.\TerrainType.h	/^typedef enum { terrainOff, terrainNormal, terrainNormalWarn, terrainWarn } TerrainPaletteType;$/;"	e	enum:__anon87
terrainOff	.\TerrainType.h	/^typedef enum { terrainOff, terrainNormal, terrainNormalWarn, terrainWarn } TerrainPaletteType;$/;"	e	enum:__anon87
terrainRefAlt	.\GlobalTypes.h	/^	float terrainRefAlt;			\/\/ reference altitude in feet$/;"	m	struct:__anon35
terrainWarn	.\TerrainType.h	/^typedef enum { terrainOff, terrainNormal, terrainNormalWarn, terrainWarn } TerrainPaletteType;$/;"	e	enum:__anon87
terrain_cache	.\TerrainType.c	/^	TCElement *terrain_cache;$/;"	m	struct:TerrainTypeStruct	file:
terrain_cache_check	.\TerrainType.c	/^static void terrain_cache_check(TerrainType t, Int32 p1lat, Int32 p1lon, Int32 p3lat, Int32 p3lon) {$/;"	f	file:
terrain_invalid	.\TerrainType.c	/^	Boolean terrain_invalid;	\/\/ set true if the terrain cache is invalid and$/;"	m	struct:TerrainTypeStruct	file:
tf_lat1	.\TerrainType.c	/^	Int32 tf_lat1, tf_lon1;$/;"	m	struct:TerrainTypeStruct	file:
tf_lat3	.\TerrainType.c	/^	Int32 tf_lat3, tf_lon3;		$/;"	m	struct:TerrainTypeStruct	file:
tf_lon1	.\TerrainType.c	/^	Int32 tf_lat1, tf_lon1;$/;"	m	struct:TerrainTypeStruct	file:
tf_lon3	.\TerrainType.c	/^	Int32 tf_lat3, tf_lon3;		$/;"	m	struct:TerrainTypeStruct	file:
tfrdb	.\AsDatabase.c	/^static AirspaceDBType *tfrdb = NULL;$/;"	v	file:
theLog	.\Main.c	/^static MemPtr theLog;$/;"	v	file:
thisForm	.\MainForm.c	/^static FormPtr	thisForm;$/;"	v	file:
tickInterval	.\Instruments.c	/^	Int32 tickInterval;$/;"	m	struct:GSITypeStruct	file:
time	.\AlarmManager.c	/^	UInt32 time;$/;"	m	struct:__anon1	file:
time	.\FlightPlanForm.c	/^	Int32 time;$/;"	m	struct:__anon31	file:
timeETA	.\GlobalTypes.h	/^typedef enum {timeETE, timeETA, timeLocal, timeUTC, timeETV, timeETT } TimeDisplayType;$/;"	e	enum:__anon45
timeETE	.\GlobalTypes.h	/^typedef enum {timeETE, timeETA, timeLocal, timeUTC, timeETV, timeETT } TimeDisplayType;$/;"	e	enum:__anon45
timeETT	.\GlobalTypes.h	/^typedef enum {timeETE, timeETA, timeLocal, timeUTC, timeETV, timeETT } TimeDisplayType;$/;"	e	enum:__anon45
timeETV	.\GlobalTypes.h	/^typedef enum {timeETE, timeETA, timeLocal, timeUTC, timeETV, timeETT } TimeDisplayType;$/;"	e	enum:__anon45
timeField	.\MainForm.c	/^static NavDataType        timeField= navETE;$/;"	v	file:
timeHotspot	.\MainForm.c	/^static RectangleType timeHotspot;$/;"	v	file:
timeLocal	.\GlobalTypes.h	/^typedef enum {timeETE, timeETA, timeLocal, timeUTC, timeETV, timeETT } TimeDisplayType;$/;"	e	enum:__anon45
timeStamp	.\Gps.h	/^	GPSTimeStamp	timeStamp;$/;"	m	struct:__anon56
timeTo	.\NavManager.c	/^	Int32   timeTo;     \/\/ seconds$/;"	m	struct:__anon80	file:
timeToTurn	.\NavManager.c	/^	Int32  timeToTurn;		\/\/ in seconds$/;"	m	struct:__anon80	file:
timeToVNAV	.\NavManager.c	/^	Int32 timeToVNAV;		\/\/ seconds$/;"	m	struct:__anon80	file:
timeUTC	.\GlobalTypes.h	/^typedef enum {timeETE, timeETA, timeLocal, timeUTC, timeETV, timeETT } TimeDisplayType;$/;"	e	enum:__anon45
timer	.\GlobalTypes.h	/^	TimerType timer[NUMTIMERS];$/;"	m	struct:__anon39
timerFlight	.\GlobalTypes.h	/^	enum { timerStopped, timerFlight, timerRunning } state;$/;"	e	enum:__anon37::__anon38
timerRunning	.\GlobalTypes.h	/^	enum { timerStopped, timerFlight, timerRunning } state;$/;"	e	enum:__anon37::__anon38
timerStopped	.\GlobalTypes.h	/^	enum { timerStopped, timerFlight, timerRunning } state;$/;"	e	enum:__anon37::__anon38
timerToSet	.\TimerForm.c	/^static TimerType *timerToSet = NULL;$/;"	v	file:
tlFwdRef	.\MapManager.c	/^	TLRefType tlFwdRef;		\/\/ allows forward log retrieval$/;"	m	struct:MapTypeStruct	file:
tlRef	.\MapManager.c	/^	TLRefType tlRef;		\/\/ reference to track log, for retrieval$/;"	m	struct:MapTypeStruct	file:
toFromFlag	.\MainForm.c	/^static UInt8 toFromFlag = ToFlag;$/;"	v	file:
toFromFlagY	.\MainForm.c	/^static const Coord toFromFlagY    = 9;$/;"	v	file:
toIdent	.\NavManager.c	/^	char toIdent[MAX_IDENT_CHARS+1];$/;"	m	struct:__anon80	file:
topOfList	.\DiversionForm.c	/^static Int16 topOfList = 0;$/;"	v	file:
totalDistance	.\FlightPlanForm.c	/^static float totalDistance; 	\/* radians *\/$/;"	v	file:
totalTime	.\FlightPlanForm.c	/^static Int32 totalTime;		\/* seconds *\/$/;"	v	file:
track	.\Colours.c	/^static const RGBColorType track = { 0, 0,220,0 };$/;"	v	file:
track	.\FlightPlan.h	/^	float track; 	\/\/ in radians$/;"	m	struct:__anon29
track	.\FlightPlanForm.c	/^	Int16 track;$/;"	m	struct:__anon31	file:
track	.\GlobalTypes.h	/^	IndexedColorType track;$/;"	m	struct:__anon40
track	.\NavManager.c	/^	Int16  track;$/;"	m	struct:__anon80	file:
trackError	.\NavManager.c	/^	float trackError; \/\/ user units$/;"	m	struct:__anon80	file:
trackLog	.\GlobalTypes.h	/^	Boolean trackLog;$/;"	m	struct:__anon35
trackLog	.\GlobalTypes.h	/^	TrackLogSettingType trackLog;$/;"	m	struct:__anon39
trackLog	.\MapManager.c	/^	MemHandle trackLog;		\/\/ collection of WinLineType$/;"	m	struct:MapTypeStruct	file:
trackLog10s	.\GlobalTypes.h	/^typedef enum { trackLogOff = 0, trackLog1s, trackLog5s, trackLog10s } TrackLogSettingType;$/;"	e	enum:__anon36
trackLog1s	.\GlobalTypes.h	/^typedef enum { trackLogOff = 0, trackLog1s, trackLog5s, trackLog10s } TrackLogSettingType;$/;"	e	enum:__anon36
trackLog5s	.\GlobalTypes.h	/^typedef enum { trackLogOff = 0, trackLog1s, trackLog5s, trackLog10s } TrackLogSettingType;$/;"	e	enum:__anon36
trackLogOff	.\GlobalTypes.h	/^typedef enum { trackLogOff = 0, trackLog1s, trackLog5s, trackLog10s } TrackLogSettingType;$/;"	e	enum:__anon36
trackLogPtr	.\TrackLog.c	/^static TLInternalRecordType *trackLogPtr;$/;"	v	file:
trackUp	.\GlobalTypes.h	/^	Boolean trackUp;$/;"	m	struct:__anon35
transMatrix	.\MapManager.c	/^} transMatrix;$/;"	v	typeref:struct:__anon75
trueHeading	.\Gps.h	/^	float		trueHeading; 	\/* degrees true *\/$/;"	m	struct:__anon54
turnAngle	.\NavManager.c	/^	float  turnAngle;		\/\/ "a", in radians$/;"	m	struct:__anon80	file:
turnAnticipation	.\GlobalTypes.h	/^	Boolean turnAnticipation;$/;"	m	struct:__anon39
turnArmed	.\NavManager.c	/^	Boolean turnArmed;		\/\/ true if <2 minutes to turn$/;"	m	struct:__anon80	file:
turnRadius	.\NavManager.c	/^	float  turnRadius;		\/\/ in NM, based on present speed$/;"	m	struct:__anon80	file:
type	.\AsDatabase.h	/^	AirspaceClassType type;$/;"	m	struct:__anon8
type	.\DiversionForm.c	/^	WaypointClassType type;$/;"	m	struct:__anon21	file:
type	.\MapAirspace.h	/^	AirspaceClassType type;$/;"	m	struct:__anon61
type	.\MapIcon.h	/^	WaypointClassType type;$/;"	m	struct:__anon67
type	.\MapManager.c	/^	MapElementType type;$/;"	m	struct:__anon74	file:
type	.\MapManager.h	/^	enum { msWaypoint, msAirspace } type;$/;"	m	struct:MapSelectionStructType	typeref:enum:MapSelectionStructType::__anon76
type	.\WDManager.c	/^	WaypointClassType *type;$/;"	m	struct:__anon90	file:
type	.\WDManager.h	/^	WaypointClassType type;$/;"	m	struct:__anon96
typeIdx	.\AsDatabase.c	/^	AirspaceClassType *typeIdx;$/;"	m	struct:__anon4	file:
typeIdxRec	.\AsDatabase.c	/^enum {lat1IdxRec = 0, lon1IdxRec, lat3IdxRec, lon3IdxRec, typeIdxRec, lastIdxRec };$/;"	e	enum:__anon3	file:
typeIdxRec	.\WDManager.c	/^enum { idIdxRec = 0, latIdxRec = 1, lonIdxRec = 2, typeIdxRec = 3, latLonIdxRec = 4, $/;"	e	enum:__anon89	file:
uniqueID	.\CpInterface.c	/^	UInt32         uniqueID;$/;"	m	struct:__anon16	file:
units	.\GlobalTypes.h	/^	UInt8 units;	\/* 0=Nm, 1=Mi, 2=Km, 3=Copilot *\/$/;"	m	struct:__anon39
upperAlt	.\AsDatabase.h	/^	UInt16 lowerAlt, upperAlt;$/;"	m	struct:__anon8
upperAlt	.\MapAirspace.h	/^	Int32 upperAlt;$/;"	m	struct:__anon61
upperAltRef	.\AsDatabase.h	/^	AltReferenceType upperAltRef;$/;"	m	struct:__anon8
upperAltString	.\MapAirspace.h	/^	char  upperAltString[MAX_ALT_CHARS];$/;"	m	struct:__anon61
upperFilter	.\GlobalTypes.h	/^	UInt8   upperFilter;$/;"	m	struct:__anon35
useMagnetic	.\GlobalTypes.h	/^	Boolean useMagnetic;$/;"	m	struct:__anon39
useSatCount	.\Gps.h	/^	UInt8		useSatCount;$/;"	m	struct:__anon55
user	.\CpInterface.c	/^typedef enum {system,user} CpWaypointType;$/;"	e	enum:__anon11	file:
utc	.\Gps.h	/^	GPSTimeStamp	utc;		\/* time of data receipt *\/$/;"	m	struct:__anon54
value	.\MapForm.c	/^	Int32 value;$/;"	m	struct:__anon66	file:
vdop	.\Gps.h	/^	float vdop;$/;"	m	struct:__anon55
vdopFlagPos	.\MainForm.c	/^static const PointType vdopFlagPos = { 50, 65 };$/;"	v	file:
verticalSpeed	.\NavManager.c	/^	float verticalSpeed; \/\/ user units$/;"	m	struct:__anon80	file:
viewSatCount	.\Gps.h	/^	UInt8		viewSatCount;$/;"	m	struct:__anon55
visible	.\MapAirspace.h	/^	Boolean visible;$/;"	m	struct:__anon61
vnav	.\FlightPlan.h	/^	VNAVDataType vnav;$/;"	m	struct:__anon29
vnav	.\NavManager.c	/^	const VNAVDataType *vnav;	\/\/ copied in from the flight plan current leg$/;"	m	struct:__anon80	file:
vnavAltAMSL	.\FlightPlan.h	/^typedef enum { vnavAltAMSL, vnavAltAboveWP } VNAVAltType;$/;"	e	enum:__anon25
vnavAltAboveWP	.\FlightPlan.h	/^typedef enum { vnavAltAMSL, vnavAltAboveWP } VNAVAltType;$/;"	e	enum:__anon25
vnavArmed	.\NavManager.c	/^	Boolean vnavArmed;		\/\/ true if within 2mins of top of VNAV$/;"	m	struct:__anon80	file:
vnavCaptured	.\NavManager.c	/^	Boolean vnavCaptured;	\/\/ in descent if true$/;"	m	struct:__anon80	file:
vnavDegrees	.\FlightPlan.h	/^typedef enum { vnavRatePerMin, vnavRatePerMile, vnavDegrees } VNAVRateType;$/;"	e	enum:__anon26
vnavEnd	.\NavManager.c	/^	float vnavEnd;			\/\/ distance of end-of-vnav from the waypoint$/;"	m	struct:__anon80	file:
vnavRatePerMile	.\FlightPlan.h	/^typedef enum { vnavRatePerMin, vnavRatePerMile, vnavDegrees } VNAVRateType;$/;"	e	enum:__anon26
vnavRatePerMin	.\FlightPlan.h	/^typedef enum { vnavRatePerMin, vnavRatePerMile, vnavDegrees } VNAVRateType;$/;"	e	enum:__anon26
vnavSet	.\FlightPlan.h	/^	Boolean vnavSet;$/;"	m	struct:__anon29
vnavSet	.\NavManager.c	/^	Boolean vnavSet;$/;"	m	struct:__anon80	file:
vnd	.\VNAVDialog.c	/^static VNAVDataType vnd;$/;"	v	file:
voiceVolume	.\GlobalTypes.h	/^	Int32 voiceVolume;$/;"	m	struct:__anon39
vor	.\DiversionForm.c	/^static enum { airfield = 0,vor,ndb,intersection,all } displayFilter = airfield;$/;"	e	enum:__anon23	file:
vorFilter	.\GlobalTypes.h	39;"	d
vsi	.\MainForm.c	/^static VSIType vsi;	\/\/ VSI indicator$/;"	v	file:
vsi	.\MapForm.c	/^static VSIType vsi;$/;"	v	file:
vsiClimb	.\Colours.c	/^static const RGBColorType vsiClimb = { 0, 100, 130, 224 };$/;"	v	file:
vsiClimb	.\GlobalTypes.h	/^	IndexedColorType vsiClimb;$/;"	m	struct:__anon40
vsiDescend	.\Colours.c	/^static const RGBColorType vsiDescend = {0, 167, 97, 43 };$/;"	v	file:
vsiDescend	.\GlobalTypes.h	/^	IndexedColorType vsiDescend;$/;"	m	struct:__anon40
waas	.\Gps.h	/^	Boolean waas;$/;"	m	struct:__anon55
waitGoto	.\MapForm.c	/^static enum { initWait, waitGoto, waitNoGoto, simpleWait } tapPlanState = initWait;$/;"	e	enum:__anon65	file:
waitNoGoto	.\MapForm.c	/^static enum { initWait, waitGoto, waitNoGoto, simpleWait } tapPlanState = initWait;$/;"	e	enum:__anon65	file:
waiting	.\DiversionForm.c	/^static enum { disabled, starting, scanning, waiting } scanState = disabled;$/;"	e	enum:__anon24	file:
warning	.\Colours.c	/^static const RGBColorType warning= { 0, 200, 0, 0};$/;"	v	file:
warning	.\GlobalTypes.h	/^	IndexedColorType warning;$/;"	m	struct:__anon40
waypoint	.\CpInterface.c	/^	CpLegWaypoint waypoint[2];$/;"	m	struct:__anon17	file:
waypoint	.\MapManager.h	/^		Waypoint *waypoint;$/;"	m	union:MapSelectionStructType::__anon78
waypointHash	.\MapManager.c	/^static UInt8 waypointHash[HASH_SIZE];$/;"	v	file:
waypointID	.\WPInfoDialog.c	/^static WaypointIDType waypointID;$/;"	v	file:
waypointNum	.\MapForm.c	/^	Int16 waypointNum;$/;"	m	struct:__anon63	file:
waypoints	.\DiversionForm.c	/^	ProxWaypointType waypoints[MAX_PROXWAYPOINTS];$/;"	m	struct:__anon22	file:
wb	.\CpInterface.c	/^	UInt32 wb;$/;"	m	struct:__anon14	file:
wbRecord	.\CpInterface.c	/^typedef enum {noType, flightRecord=321, routeRecord, wbRecord, planRecord }$/;"	e	enum:__anon10	file:
wdmAll	.\WDManager.h	15;"	d
wdmDatabaseMask	.\WDManager.c	/^WaypointIDType    wdmDatabaseMask = 0xFFFF0000;$/;"	v
wdmNotFound	.\WDManager.h	14;"	d
wdmSysTempDB	.\WDManager.h	17;"	d
wdmTempDB	.\WDManager.h	16;"	d
wdmWaypointMask	.\WDManager.c	/^WaypointIDType    wdmWaypointMask = 0x0000FFFF;$/;"	v
weightUnits	.\CpInterface.c	/^	UInt16 weightUnits;                 \/\/ {lb, kg}$/;"	m	struct:__anon19	file:
west	.\CpInterface.c	/^typedef enum {north, west, south, east, noIntersection }Quadrant;$/;"	e	enum:__anon12	file:
white	.\Colours.c	/^static const RGBColorType white        = { 0, 255,255,255};$/;"	v	file:
white	.\GlobalTypes.h	/^	IndexedColorType white;$/;"	m	struct:__anon40
width	.\CpInterface.h	/^	UInt16 width;$/;"	m	struct:__anon20
width	.\GlobalTypes.h	/^	Coord width, pixelWidth;$/;"	m	struct:__anon41
width	.\Instruments.c	/^	Coord x, y, width, height; \/\/ y is centre of VSI, height is 1\/2 height$/;"	m	struct:VSITypeStruct	file:
width	.\Instruments.c	/^	Coord x,y, width, height;	\/\/ y is centre of GSI, height is 1\/2 height$/;"	m	struct:GSITypeStruct	file:
width	.\TerrainCore.h	/^	Int32 width;$/;"	m	struct:TerrainCoreParamType
widthFP8	.\TerrainCore.h	/^	Int32 widthFP8; $/;"	m	struct:TerrainCoreParamType
widthOverHeightFP8	.\TerrainCore.h	/^	Int32 widthOverHeightFP8;$/;"	m	struct:TerrainCoreParamType
windDirection	.\CpInterface.c	/^	Int16      windDirection;$/;"	m	struct:__anon17	file:
windSpeed	.\CpInterface.c	/^	double     windSpeed;$/;"	m	struct:__anon17	file:
windowTitle	.\KeypadDialog.c	/^static const char *windowTitle;$/;"	v	file:
wmm_coff	.\AvCalcs.c	/^static CoffData wmm_coff[] = { $/;"	v	file:
wmm_coff	.\MagVarn.c	/^static CoffData wmm_coff[] = { $/;"	v	file:
wp0	.\OBSManager.c	/^static Waypoint *wp0, *wp1;$/;"	v	file:
wp1	.\OBSManager.c	/^static Waypoint *wp0, *wp1;$/;"	v	file:
wpAirfield	.\WDManager.h	/^	wpAirfield = 0x10,$/;"	e	enum:__anon94
wpAllAirfields	.\WDManager.h	/^	wpAllAirfields = (wpAirfield | wpLargeAirfield),$/;"	e	enum:__anon94
wpAny	.\WDManager.h	/^	wpAny      = 0xFFF0,$/;"	e	enum:__anon94
wpAnyObstacle	.\WDManager.h	/^	wpAnyObstacle = 0x4000,$/;"	e	enum:__anon94
wpClassMask	.\WDManager.h	/^	wpClassMask = 0xFFF0, $/;"	e	enum:__anon94
wpDME	.\WDManager.h	/^	wpDME      = 0x42,$/;"	e	enum:__anon94
wpDisused	.\WDManager.h	/^	wpDisused 	= 0x001A,$/;"	e	enum:__anon94
wpGlider	.\WDManager.h	/^	wpGlider  	= 0x001C,$/;"	e	enum:__anon94
wpHangGlider	.\WDManager.h	/^	wpHangGlider   = 0x8003,$/;"	e	enum:__anon94
wpID	.\MapManager.h	/^		WaypointIDType wpID;$/;"	m	union:MapSelectionStructType::__anon77
wpId	.\WDManager.h	/^	WaypointIDType wpId;		\/\/ use to get 'full' waypoint$/;"	m	struct:__anon96
wpIntersection	.\WDManager.h	/^	wpIntersection = 0x100,$/;"	e	enum:__anon94
wpLabels	.\MapManager.c	/^	WaypointClassType wpTypes, wpLabels;$/;"	m	struct:MapTypeStruct	file:
wpLargeAirfield	.\WDManager.h	/^	wpLargeAirfield= 0x20,$/;"	e	enum:__anon94
wpLightObstacle	.\WDManager.h	/^	wpLightObstacle=0x4003,$/;"	e	enum:__anon94
wpLightObstacles	.\WDManager.h	/^	wpLightObstacles = 0x4004,$/;"	e	enum:__anon94
wpList	.\MapManager.c	/^	ShortWaypointType *wpList;$/;"	m	struct:MapTypeStruct	file:
wpMarker	.\WDManager.h	/^	wpMarker       = 0x8005,$/;"	e	enum:__anon94
wpMicrolight	.\WDManager.h	/^	wpMicrolight	= 0x001B,$/;"	e	enum:__anon94
wpNDB	.\WDManager.h	/^	wpNDB      = 0x80,$/;"	e	enum:__anon94
wpNDBDME	.\WDManager.h	/^	wpNDBDME   = 0x81,$/;"	e	enum:__anon94
wpNotFound	.\WDManager.h	28;"	d
wpObstacle	.\WDManager.h	/^	wpObstacle = 0x4001,$/;"	e	enum:__anon94
wpObstacles	.\WDManager.h	/^	wpObstacles= 0x4002,$/;"	e	enum:__anon94
wpOther	.\WDManager.h	/^	wpOther        = 0x8000,$/;"	e	enum:__anon94
wpParachute	.\WDManager.h	/^	wpParachute    = 0x8004,$/;"	e	enum:__anon94
wpSubClassMask	.\WDManager.h	/^	wpSubClassMask = 0xF$/;"	e	enum:__anon94
wpTACAN	.\WDManager.h	/^	wpTACAN    = 0x43,$/;"	e	enum:__anon94
wpTown	.\WDManager.h	/^	wpTown         = 0x8001,$/;"	e	enum:__anon94
wpType	.\CpInterface.c	/^	CpWaypointType wpType;$/;"	m	struct:__anon16	file:
wpType	.\WDManager.c	/^	WaypointClassType wpType;$/;"	m	struct:WDMSearchStructType	file:
wpTypes	.\MapManager.c	/^	WaypointClassType wpTypes, wpLabels;$/;"	m	struct:MapTypeStruct	file:
wpVOR	.\WDManager.h	/^	wpVOR      = 0x40,$/;"	e	enum:__anon94
wpVORDME	.\WDManager.h	/^	wpVORDME   = 0x41,$/;"	e	enum:__anon94
wpVORTAC	.\WDManager.h	/^	wpVORTAC   = 0x43,$/;"	e	enum:__anon94
wpVRP	.\WDManager.h	/^	wpVRP          = 0x8002,$/;"	e	enum:__anon94
x	.\HeadingIndicator.c	/^	Coord x,y;		\/\/ centre of HSI$/;"	m	struct:HSITypeStruct	file:
x	.\Instruments.c	/^	Coord x, y, width, height; \/\/ y is centre of VSI, height is 1\/2 height$/;"	m	struct:VSITypeStruct	file:
x	.\Instruments.c	/^	Coord x,y, width, height;	\/\/ y is centre of GSI, height is 1\/2 height$/;"	m	struct:GSITypeStruct	file:
x	.\MapIcon.h	/^	Coord x;$/;"	m	struct:__anon67
x	.\Polygon.c	/^	FP14 x;$/;"	m	struct:__anon85	file:
x	.\Polygon.h	/^	FP14 x, y;$/;"	m	struct:__anon86
xcentre	.\GlobalTypes.h	/^	Coord xcentre;$/;"	m	struct:__anon41
y	.\HeadingIndicator.c	/^	Coord x,y;		\/\/ centre of HSI$/;"	m	struct:HSITypeStruct	file:
y	.\Instruments.c	/^	Coord x, y, width, height; \/\/ y is centre of VSI, height is 1\/2 height$/;"	m	struct:VSITypeStruct	file:
y	.\Instruments.c	/^	Coord x,y, width, height;	\/\/ y is centre of GSI, height is 1\/2 height$/;"	m	struct:GSITypeStruct	file:
y	.\MapIcon.h	/^	Coord y;$/;"	m	struct:__anon67
y	.\Polygon.h	/^	FP14 x, y;$/;"	m	struct:__anon86
ycentre	.\GlobalTypes.h	/^	Coord ycentre;$/;"	m	struct:__anon41
year	.\Gps.h	/^	UInt16 year;$/;"	m	struct:__anon53
yellow	.\Colours.c	/^static const RGBColorType yellow  = { 0, 249, 160, 7 };$/;"	v	file:
yellow	.\GlobalTypes.h	/^	IndexedColorType yellow;$/;"	m	struct:__anon40
zoomLevel	.\MainForm.c	/^static Int16 zoomLevel = 2;$/;"	v	file:
